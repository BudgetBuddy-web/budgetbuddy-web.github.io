{"version":3,"file":"static/js/787.15057338.chunk.js","mappings":"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","sources":["pages/Transactions.js"],"sourcesContent":["/**\n * Transactions Page\n * Manage income and expense transactions\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { transactionAPI } from '../services/api';\nimport { useAssistant } from '../contexts/AssistantContext';\nimport { toast } from 'react-toastify';\nimport { format } from 'date-fns';\nimport './Transactions.css';\n\nconst CATEGORIES = [\n  'Food', 'Travel', 'Entertainment', 'Shopping', 'Healthcare',\n  'Education', 'Utilities', 'Rent', 'Salary', 'Freelance', 'Investment', 'Other'\n];\n\nconst Transactions = () => {\n  const { celebrate, shock, think } = useAssistant();\n  const [transactions, setTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [showModal, setShowModal] = useState(false);\n  const [editingTransaction, setEditingTransaction] = useState(null);\n  const [sortConfig, setSortConfig] = useState({ key: 'date', direction: 'desc' });\n  const [formData, setFormData] = useState({\n    type: 'expense',\n    category: 'Food',\n    amount: '',\n    date: format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\"),\n    note: ''\n  });\n\n  useEffect(() => {\n    loadTransactions();\n  }, []);\n\n  const loadTransactions = async () => {\n    try {\n      const response = await transactionAPI.getAll();\n      setTransactions(response.data);\n    } catch (error) {\n      toast.error('Failed to load transactions');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({ ...prev, [name]: value }));\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    think();\n\n    try {\n      if (editingTransaction) {\n        await transactionAPI.update(editingTransaction._id, formData);\n        toast.success('Transaction updated successfully');\n      } else {\n        await transactionAPI.create(formData);\n        toast.success('Transaction added successfully');\n        \n        // Trigger assistant reaction\n        if (formData.type === 'income') {\n          celebrate();\n        } else if (parseFloat(formData.amount) > 1000) {\n          shock();\n        }\n      }\n\n      loadTransactions();\n      resetForm();\n    } catch (error) {\n      toast.error('Failed to save transaction');\n      console.error(error);\n    }\n  };\n\n  // Sorting function\n  const handleSort = (key) => {\n    let direction = 'asc';\n    if (sortConfig.key === key && sortConfig.direction === 'asc') {\n      direction = 'desc';\n    }\n    setSortConfig({ key, direction });\n  };\n\n  // Get sorted transactions\n  const getSortedTransactions = () => {\n    const sorted = [...transactions].sort((a, b) => {\n      let aValue, bValue;\n\n      switch (sortConfig.key) {\n        case 'date':\n          aValue = new Date(a.date);\n          bValue = new Date(b.date);\n          break;\n        case 'type':\n          aValue = a.type;\n          bValue = b.type;\n          break;\n        case 'category':\n          aValue = a.category;\n          bValue = b.category;\n          break;\n        case 'amount':\n          aValue = a.amount;\n          bValue = b.amount;\n          break;\n        default:\n          return 0;\n      }\n\n      if (aValue < bValue) {\n        return sortConfig.direction === 'asc' ? -1 : 1;\n      }\n      if (aValue > bValue) {\n        return sortConfig.direction === 'asc' ? 1 : -1;\n      }\n      return 0;\n    });\n\n    return sorted;\n  };\n\n  const handleEdit = (transaction) => {\n    setEditingTransaction(transaction);\n    setFormData({\n      type: transaction.type,\n      category: transaction.category,\n      amount: transaction.amount.toString(),\n      date: format(new Date(transaction.date), \"yyyy-MM-dd'T'HH:mm:ss\"),\n      note: transaction.note || ''\n    });\n    setShowModal(true);\n  };\n\n  const handleDelete = async (id) => {\n    if (!window.confirm('Are you sure you want to delete this transaction?')) {\n      return;\n    }\n\n    try {\n      await transactionAPI.delete(id);\n      toast.success('Transaction deleted successfully');\n      loadTransactions();\n    } catch (error) {\n      toast.error('Failed to delete transaction');\n      console.error(error);\n    }\n  };\n\n  const resetForm = () => {\n    setFormData({\n      type: 'expense',\n      category: 'Food',\n      amount: '',\n      date: format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\"),\n      note: ''\n    });\n    setEditingTransaction(null);\n    setShowModal(false);\n  };\n\n  const handleAddNew = () => {\n    setEditingTransaction(null);\n    setFormData({\n      type: 'expense',\n      category: 'Food',\n      amount: '',\n      date: format(new Date(), \"yyyy-MM-dd'T'HH:mm:ss\"), // Set current time when opening\n      note: ''\n    });\n    setShowModal(true);\n  };\n\n  if (loading) {\n    return <div className=\"loading\"><div className=\"spinner\"></div></div>;\n  }\n\n  return (\n    <div className=\"transactions-page\">\n      <div className=\"page-header flex-between\">\n        <div>\n          <h1>Transactions</h1>\n          <p>Manage your income and expenses</p>\n        </div>\n        <button className=\"btn btn-primary\" onClick={handleAddNew}>\n          + Add Transaction\n        </button>\n      </div>\n\n      {/* Transactions List */}\n      <div className=\"card\">\n        {transactions.length > 0 ? (\n          <div className=\"table-responsive\">\n            <table className=\"transactions-table\">\n              <thead>\n                <tr>\n                  <th onClick={() => handleSort('date')} className=\"sortable\">\n                    Date {sortConfig.key === 'date' && (sortConfig.direction === 'asc' ? '▲' : '▼')}\n                  </th>\n                  <th onClick={() => handleSort('type')} className=\"sortable\">\n                    Type {sortConfig.key === 'type' && (sortConfig.direction === 'asc' ? '▲' : '▼')}\n                  </th>\n                  <th onClick={() => handleSort('category')} className=\"sortable\">\n                    Category {sortConfig.key === 'category' && (sortConfig.direction === 'asc' ? '▲' : '▼')}\n                  </th>\n                  <th onClick={() => handleSort('amount')} className=\"sortable\">\n                    Amount {sortConfig.key === 'amount' && (sortConfig.direction === 'asc' ? '▲' : '▼')}\n                  </th>\n                  <th>Note</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n              <tbody>\n                {getSortedTransactions().map((transaction) => (\n                  <tr key={transaction._id}>\n                    <td>\n                      <div>{format(new Date(transaction.date), 'MMM dd, yyyy')}</div>\n                      <div style={{ fontSize: '12px', color: '#888' }}>\n                        {format(new Date(transaction.date), 'HH:mm:ss')}\n                      </div>\n                    </td>\n                    <td>\n                      <span className={`badge ${transaction.type}`}>\n                        {transaction.type}\n                      </span>\n                    </td>\n                    <td>{transaction.category}</td>\n                    <td className={`amount ${transaction.type}`}>\n                      {transaction.type === 'income' ? '+' : '-'}₹{transaction.amount.toFixed(2)}\n                    </td>\n                    <td>{transaction.note || '-'}</td>\n                    <td>\n                      <div className=\"action-buttons\">\n                        <button \n                          className=\"btn-action edit\"\n                          onClick={() => handleEdit(transaction)}\n                        >\n                          ✏️\n                        </button>\n                        <button \n                          className=\"btn-action delete\"\n                          onClick={() => handleDelete(transaction._id)}\n                        >\n                          🗑️\n                        </button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        ) : (\n          <div className=\"empty-state\">\n            <p>No transactions yet. Add your first transaction!</p>\n          </div>\n        )}\n      </div>\n\n      {/* Modal */}\n      {showModal && (\n        <div className=\"modal-overlay\" onClick={resetForm}>\n          <div className=\"modal-content\" onClick={(e) => e.stopPropagation()}>\n            <div className=\"modal-header\">\n              <h2>{editingTransaction ? 'Edit Transaction' : 'Add Transaction'}</h2>\n              <button className=\"btn-close\" onClick={resetForm}>✕</button>\n            </div>\n\n            <form onSubmit={handleSubmit} className=\"transaction-form\">\n              <div className=\"form-row\">\n                <div className=\"form-group\">\n                  <label className=\"form-label\">Type</label>\n                  <select\n                    name=\"type\"\n                    value={formData.type}\n                    onChange={handleInputChange}\n                    className=\"form-select\"\n                  >\n                    <option value=\"income\">Income</option>\n                    <option value=\"expense\">Expense</option>\n                  </select>\n                </div>\n\n                <div className=\"form-group\">\n                  <label className=\"form-label\">Category</label>\n                  <select\n                    name=\"category\"\n                    value={formData.category}\n                    onChange={handleInputChange}\n                    className=\"form-select\"\n                  >\n                    {CATEGORIES.map(cat => (\n                      <option key={cat} value={cat}>{cat}</option>\n                    ))}\n                  </select>\n                </div>\n              </div>\n\n              <div className=\"form-row\">\n                <div className=\"form-group\">\n                  <label className=\"form-label\">Amount</label>\n                  <input\n                    type=\"number\"\n                    name=\"amount\"\n                    value={formData.amount}\n                    onChange={handleInputChange}\n                    className=\"form-control\"\n                    placeholder=\"0.00\"\n                    step=\"0.01\"\n                    required\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <label className=\"form-label\">Date & Time</label>\n                  <input\n                    type=\"datetime-local\"\n                    name=\"date\"\n                    value={formData.date}\n                    onChange={handleInputChange}\n                    className=\"form-control\"\n                    step=\"1\"\n                    required\n                  />\n                  <small className=\"form-text\" style={{ fontSize: '12px', color: '#888' }}>\n                    ⏰ Auto-filled with current time. Click to change manually.\n                  </small>\n                </div>\n              </div>\n\n              <div className=\"form-group\">\n                <label className=\"form-label\">Note (optional)</label>\n                <textarea\n                  name=\"note\"\n                  value={formData.note}\n                  onChange={handleInputChange}\n                  className=\"form-control\"\n                  rows=\"3\"\n                  placeholder=\"Add a note...\"\n                ></textarea>\n              </div>\n\n              <div className=\"modal-actions\">\n                <button type=\"button\" className=\"btn btn-secondary\" onClick={resetForm}>\n                  Cancel\n                </button>\n                <button type=\"submit\" className=\"btn btn-primary\">\n                  {editingTransaction ? 'Update' : 'Add'} Transaction\n                </button>\n              </div>\n            </form>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Transactions;\n"],"names":["CATEGORIES","Transactions","celebrate","shock","think","useAssistant","transactions","setTransactions","useState","loading","setLoading","showModal","setShowModal","editingTransaction","setEditingTransaction","sortConfig","setSortConfig","key","direction","formData","setFormData","type","category","amount","date","format","Date","note","useEffect","loadTransactions","async","response","transactionAPI","getAll","data","error","toast","console","handleInputChange","e","name","value","target","prev","_objectSpread","handleSort","resetForm","_jsx","className","children","_jsxs","onClick","handleAddNew","length","sort","a","b","aValue","bValue","map","transaction","style","fontSize","color","concat","toFixed","toString","handleEdit","window","confirm","delete","id","success","handleDelete","_id","stopPropagation","onSubmit","preventDefault","update","create","parseFloat","onChange","cat","placeholder","step","required","rows"],"sourceRoot":""}