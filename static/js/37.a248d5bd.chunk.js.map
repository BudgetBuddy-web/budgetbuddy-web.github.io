{"version":3,"file":"static/js/37.a248d5bd.chunk.js","mappings":"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","sources":["pages/Dashboard.js"],"sourcesContent":["/**\n * Dashboard Page\n * Main dashboard with financial overview and charts\n * Optimized with lazy loading for charts\n */\n\nimport React, { useState, useEffect, useCallback, lazy, Suspense } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useAssistant } from '../contexts/AssistantContext';\nimport { transactionAPI, reportAPI } from '../services/api';\nimport { toast } from 'react-toastify';\nimport './Dashboard.css';\n\n// Lazy load charts to reduce initial bundle size\nconst Charts = lazy(() => import('../components/DashboardCharts'));\n\nconst Dashboard = () => {\n  const { user } = useAuth();\n  const { celebrate, worry, encourage, idle } = useAssistant();\n  const [summary, setSummary] = useState(null);\n  const [recentTransactions, setRecentTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [viewMode, setViewMode] = useState('current-month'); // 'current-month' or 'all-time'\n\n  // Memoize reaction functions to avoid dependency issues\n  const triggerReactions = useCallback(() => {\n    if (summary && summary.summary) {\n      const totalIncome = Number(summary.summary.totalIncome) || 0;\n      const totalExpenses = Number(summary.summary.totalExpenses) || 0;\n      const savings = totalIncome - totalExpenses;\n      const savingsRatePercentage = totalIncome > 0 ? (savings / totalIncome) * 100 : 0;\n      \n      // Savings reactions based on savings rate (percentage of income saved)\n      if (savingsRatePercentage >= 60) {\n        // Great savings rate (>= 60% of income saved) - celebrate!\n        celebrate();\n      } else if (savingsRatePercentage >= 40) {\n        // Good savings rate (40-59% saved) - idle/steady\n        idle();\n      } else if (savingsRatePercentage >= 20) {\n        // Moderate savings rate (20-39% saved) - encourage\n        encourage();\n      } else if (savingsRatePercentage >= 5) {\n        // Low savings rate (5-19% saved) - worry\n        worry();\n      } else {\n        // Very low or negative savings (< 5%) - worry more\n        worry();\n      }\n    }\n  }, [summary, celebrate, encourage, idle, worry]);\n\n  useEffect(() => {\n    loadDashboardData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewMode]); // Reload when view mode changes\n\n  useEffect(() => {\n    triggerReactions();\n  }, [triggerReactions]);\n\n  const loadDashboardData = async () => {\n    try {\n      // Get all transactions first\n      const transactionsRes = await transactionAPI.getAll();\n      const allTransactions = transactionsRes.data;\n      \n      // Set recent transactions\n      setRecentTransactions(allTransactions.slice(0, 5));\n      \n      // Calculate summary based on view mode\n      if (viewMode === 'all-time') {\n        // Calculate all-time totals from all transactions\n        const totalIncome = allTransactions\n          .filter(t => t.type === 'income')\n          .reduce((sum, t) => sum + t.amount, 0);\n        \n        const totalExpenses = allTransactions\n          .filter(t => t.type === 'expense')\n          .reduce((sum, t) => sum + t.amount, 0);\n        \n        const balance = totalIncome - totalExpenses;\n        \n        // Category breakdown\n        const categoryBreakdown = {};\n        allTransactions\n          .filter(t => t.type === 'expense')\n          .forEach(t => {\n            categoryBreakdown[t.category] = (categoryBreakdown[t.category] || 0) + t.amount;\n          });\n        \n        // Calculate savings\n        const savingsGoal = user?.savingsGoal || 20000;\n        const savings = balance;\n        const savingsPercentage = totalIncome > 0 ? ((savings / totalIncome) * 100) : 0;\n        \n        // Generate insights\n        const insights = [];\n        if (savings >= savingsGoal) {\n          insights.push(`Excellent! You saved ₹${savings.toFixed(2)}, exceeding your goal by ₹${(savings - savingsGoal).toFixed(2)}`);\n        } else if (savings > 0) {\n          insights.push(`You saved ₹${savings.toFixed(2)} (${savingsPercentage.toFixed(1)}% of income)`);\n        } else if (savings < 0) {\n          insights.push(`Warning: You spent ₹${Math.abs(savings).toFixed(2)} more than you earned`);\n        }\n        \n        const highestCategory = Object.entries(categoryBreakdown)\n          .sort((a, b) => b[1] - a[1])[0];\n        if (highestCategory) {\n          insights.push(`Your highest expense category is ${highestCategory[0]} (₹${highestCategory[1].toFixed(2)})`);\n        }\n        \n        setSummary({\n          period: {\n            display: 'All Time'\n          },\n          summary: {\n            totalIncome,\n            totalExpenses,\n            balance,\n            savingsGoal,\n            savings,\n            savingsPercentage\n          },\n          categoryBreakdown,\n          insights,\n          transactionCount: {\n            income: allTransactions.filter(t => t.type === 'income').length,\n            expense: allTransactions.filter(t => t.type === 'expense').length,\n            total: allTransactions.length\n          }\n        });\n      } else {\n        // Get current month summary from API\n        const summaryRes = await reportAPI.getSummary();\n        setSummary(summaryRes.data);\n      }\n    } catch (error) {\n      toast.error('Failed to load dashboard data');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"loading\"><div className=\"spinner\"></div></div>;\n  }\n\n  if (!summary) {\n    return <div className=\"container\">No data available</div>;\n  }\n\n  const { totalIncome, totalExpenses, balance, savingsGoal, savings, savingsPercentage } = summary.summary;\n  const { categoryBreakdown, insights } = summary;\n\n  // Ensure all values are numbers with defaults\n  const safeIncome = Number(totalIncome) || 0;\n  const safeExpenses = Number(totalExpenses) || 0;\n  const safeBalance = Number(balance) || 0;\n  const safeSavingsGoal = Number(savingsGoal) || 20000;\n  const safeSavings = Number(savings) || 0;\n  const safeSavingsPercentage = Number(savingsPercentage) || 0;\n\n  // Calculate progress toward savings goal\n  const goalProgress = safeSavingsGoal > 0 ? (safeSavings / safeSavingsGoal) * 100 : 0;\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <div>\n          <h1>Welcome back, {user?.name}! 👋</h1>\n          <p>Here's your financial overview</p>\n        </div>\n        <div className=\"view-toggle\">\n          <button \n            className={`toggle-btn ${viewMode === 'current-month' ? 'active' : ''}`}\n            onClick={() => setViewMode('current-month')}\n          >\n            📅 This Month\n          </button>\n          <button \n            className={`toggle-btn ${viewMode === 'all-time' ? 'active' : ''}`}\n            onClick={() => setViewMode('all-time')}\n          >\n            🌍 All Time\n          </button>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n            {/* Summary Cards */}\n      <div className=\"grid grid-4 mb-4\">\n        <div className=\"stat-card income\">\n          <div className=\"stat-icon\">💰</div>\n          <div className=\"stat-info\">\n            <p className=\"stat-label\">Total Income</p>\n            <h2 className=\"stat-value\">₹{safeIncome.toFixed(2)}</h2>\n          </div>\n        </div>\n\n        <div className=\"stat-card expense\">\n          <div className=\"stat-icon\">💸</div>\n          <div className=\"stat-info\">\n            <p className=\"stat-label\">Total Expenses</p>\n            <h2 className=\"stat-value\">₹{safeExpenses.toFixed(2)}</h2>\n          </div>\n        </div>\n\n        <div className=\"stat-card balance\">\n          <div className=\"stat-icon\">💵</div>\n          <div className=\"stat-info\">\n            <p className=\"stat-label\">Balance</p>\n            <h2 className=\"stat-value\">₹{safeBalance.toFixed(2)}</h2>\n          </div>\n        </div>\n\n        <div className=\"stat-card goal\">\n          <div className=\"stat-icon\">🎯</div>\n          <div className=\"stat-info\">\n            <p className=\"stat-label\">Savings Goal</p>\n            <h2 className=\"stat-value\">₹{safeSavingsGoal.toFixed(2)}</h2>\n          </div>\n        </div>\n      </div>\n\n      {/* Savings Progress */}\n      <div className=\"card mb-4\">\n        <h3 className=\"card-title\">Savings Progress</h3>\n        <div className=\"budget-progress\">\n          <div className=\"progress-bar\">\n            <div \n              className={`progress-fill ${goalProgress >= 100 ? 'good-savings' : goalProgress < 10 ? 'low-savings' : ''}`}\n              style={{ width: `${Math.min(goalProgress, 100)}%` }}\n            ></div>\n          </div>\n          <div className=\"progress-info\">\n            <span>{goalProgress.toFixed(1)}% of goal achieved</span>\n            <span>₹{safeSavings.toFixed(2)} saved / ₹{safeSavingsGoal.toFixed(2)} goal</span>\n          </div>\n          <div className=\"progress-info\" style={{ marginTop: '8px', fontSize: '14px', color: '#666' }}>\n            <span>💡 Savings rate: {safeSavingsPercentage.toFixed(1)}% of income</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Insights */}\n      {insights.length > 0 && (\n        <div className=\"card mb-4\">\n          <h3 className=\"card-title\">💡 Insights</h3>\n          <ul className=\"insights-list\">\n            {insights.map((insight, index) => (\n              <li key={index}>{insight}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Charts - Lazy loaded for performance */}\n      <Suspense fallback={\n        <div className=\"grid grid-2 mb-4\">\n          <div className=\"card\">\n            <h3 className=\"card-title\">Category Breakdown</h3>\n            <div style={{ textAlign: 'center', padding: '40px' }}>Loading charts...</div>\n          </div>\n          <div className=\"card\">\n            <h3 className=\"card-title\">Income vs Expenses</h3>\n            <div style={{ textAlign: 'center', padding: '40px' }}>Loading charts...</div>\n          </div>\n        </div>\n      }>\n        <Charts \n          categoryBreakdown={categoryBreakdown}\n          totalIncome={totalIncome}\n          totalExpenses={totalExpenses}\n        />\n      </Suspense>\n\n      {/* Recent Transactions */}\n      <div className=\"card\">\n        <h3 className=\"card-title\">Recent Transactions</h3>\n        {recentTransactions.length > 0 ? (\n          <div className=\"transactions-list\">\n            {recentTransactions.map((transaction) => (\n              <div key={transaction._id} className=\"transaction-item\">\n                <div className=\"transaction-icon\">\n                  {transaction.type === 'income' ? '💰' : '💸'}\n                </div>\n                <div className=\"transaction-details\">\n                  <p className=\"transaction-category\">{transaction.category}</p>\n                  <p className=\"transaction-note\">{transaction.note || 'No description'}</p>\n                </div>\n                <div className={`transaction-amount ${transaction.type}`}>\n                  {transaction.type === 'income' ? '+' : '-'}₹{transaction.amount.toFixed(2)}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-center\">No transactions yet</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"names":["Charts","lazy","Dashboard","user","useAuth","celebrate","worry","encourage","idle","useAssistant","summary","setSummary","useState","recentTransactions","setRecentTransactions","loading","setLoading","viewMode","setViewMode","triggerReactions","useCallback","totalIncome","Number","totalExpenses","savingsRatePercentage","useEffect","loadDashboardData","async","allTransactions","transactionAPI","getAll","data","slice","filter","t","type","reduce","sum","amount","balance","categoryBreakdown","forEach","category","savingsGoal","savings","savingsPercentage","insights","push","concat","toFixed","Math","abs","highestCategory","Object","entries","sort","a","b","period","display","transactionCount","income","length","expense","total","summaryRes","reportAPI","getSummary","error","toast","console","_jsx","className","children","safeIncome","safeExpenses","safeBalance","safeSavingsGoal","safeSavings","safeSavingsPercentage","goalProgress","_jsxs","name","onClick","style","width","min","marginTop","fontSize","color","map","insight","index","Suspense","fallback","textAlign","padding","transaction","note","_id"],"sourceRoot":""}