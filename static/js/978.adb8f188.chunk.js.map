{"version":3,"file":"static/js/978.adb8f188.chunk.js","mappings":"0MAWA,MAobA,EApbgBA,KACd,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,OAChCC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IAChCG,EAAUC,IAAeJ,EAAAA,EAAAA,UAAS,kBAClCK,EAAeC,IAAoBN,EAAAA,EAAAA,WAAS,IAAIO,MAAOC,WAAa,IACpEC,EAAcC,IAAmBV,EAAAA,EAAAA,WAAS,IAAIO,MAAOI,eAEtDC,GAAcC,EAAAA,EAAAA,aAAYC,UAC9BZ,GAAW,GACX,IACE,GAAiB,aAAbC,EAAyB,CAE3B,MACMY,SADwBC,EAAAA,GAAeC,UACLC,KAElCC,EAAcJ,EACjBK,OAAOC,GAAgB,WAAXA,EAAEC,MACdC,OAAO,CAACC,EAAKH,IAAMG,EAAMH,EAAEI,OAAQ,GAEhCC,EAAgBX,EACnBK,OAAOC,GAAgB,YAAXA,EAAEC,MACdC,OAAO,CAACC,EAAKH,IAAMG,EAAMH,EAAEI,OAAQ,GAEhCE,EAAUR,EAAcO,EAGxBE,EAAoB,CAAC,EAC3Bb,EACGK,OAAOC,GAAgB,YAAXA,EAAEC,MACdO,QAAQR,IACPO,EAAkBP,EAAES,WAAaF,EAAkBP,EAAES,WAAa,GAAKT,EAAEI,SAG7E,MAAMM,EAAc,IACdC,EAAUL,EACVM,EAAoBd,EAAc,EAAMa,EAAUb,EAAe,IAAO,EAExEe,EAAW,GACbF,GAAWD,EACbG,EAASC,KAAK,8BAADC,OAA0BJ,EAAQK,QAAQ,GAAE,mCAAAD,QAA8BJ,EAAUD,GAAaM,QAAQ,KAC7GL,EAAU,EACnBE,EAASC,KAAK,mBAADC,OAAeJ,EAAQK,QAAQ,GAAE,MAAAD,OAAKH,EAAkBI,QAAQ,GAAE,iBACtEL,EAAU,GACnBE,EAASC,KAAK,4BAADC,OAAwBE,KAAKC,IAAIP,GAASK,QAAQ,GAAE,0BAGnE,MAAMG,EAAkBC,OAAOC,QAAQd,GACpCe,KAAK,CAACC,EAAGC,IAAMA,EAAE,GAAKD,EAAE,IAAI,GAC3BJ,GACFN,EAASC,KAAK,oCAADC,OAAqCI,EAAgB,GAAE,YAAAJ,OAAMI,EAAgB,GAAGH,QAAQ,GAAE,MAGzGtC,EAAW,CACT+C,OAAQ,CACNC,QAAS,YAEXjD,QAAS,CACPqB,cACAO,gBACAC,UACAI,cACAC,UACAC,qBAEFL,oBACAM,WACAc,aAAcjC,EACdkC,iBAAkB,CAChBC,OAAQnC,EAAgBK,OAAOC,GAAgB,WAAXA,EAAEC,MAAmB6B,OACzDC,QAASrC,EAAgBK,OAAOC,GAAgB,YAAXA,EAAEC,MAAoB6B,OAC3DE,MAAOtC,EAAgBoC,SAG7B,KAAO,CAEL,MAAMG,QAAiBC,EAAAA,GAAUC,WAAW,CAC1CC,MAAOpD,EACPqD,KAAMjD,IAERV,EAAWuD,EAASpC,KACtB,CACF,CAAE,MAAOyC,GACPC,EAAAA,GAAMD,MAAM,0BACZE,QAAQF,MAAMA,EAChB,CAAC,QACCzD,GAAW,EACb,GACC,CAACC,EAAUE,EAAeI,KAE7BqD,EAAAA,EAAAA,WAAU,KACRlD,KACC,CAACA,IAEJ,MAAMmD,EAAkBjD,UAAa,IAADkD,EAAAC,EAAAC,EAElC,MAAMC,EAA0B,aAAbhE,EACf,WAAU,GAAAiC,OACP,IAAI7B,KAAK,IAAMF,EAAgB,EAAG,GAAG+D,eAAe,UAAW,CAAEX,MAAO,SAAS,KAAArB,OAAI3B,GAEtFwC,GAA0B,OAAPnD,QAAO,IAAPA,GAAyB,QAAlBkE,EAAPlE,EAASmD,wBAAgB,IAAAe,OAAlB,EAAPA,EAA2BX,QAAS,EAW7D,GATkBgB,OAAOC,QACvB,gDAAAlC,OACW+B,EAAU,MAAI,iBAAA/B,OACRa,EAAgB,MAAI,iBAAAb,SACjB,OAAPtC,QAAO,IAAPA,GAAgB,QAATmE,EAAPnE,EAASA,eAAO,IAAAmE,OAAT,EAAPA,EAAkB9C,cAAe,GAAGkB,QAAQ,GAAE,MAAI,mBAAAD,SACzC,OAAPtC,QAAO,IAAPA,GAAgB,QAAToE,EAAPpE,EAASA,eAAO,IAAAoE,OAAT,EAAPA,EAAkBxC,gBAAiB,GAAGW,QAAQ,GAAE,QAAM,2CASvE,IACE,GAAiB,aAAblC,EAAyB,CAE3B,MAAMmD,QAAiBC,EAAAA,GAAUgB,UAAU,CAAC,GAEtCC,EAAMH,OAAOI,IAAIC,gBAAgB,IAAIC,KAAK,CAACrB,EAASpC,QACpD0D,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOP,EACZI,EAAKI,aAAa,WAAW,6BAC7BH,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLP,EAAKQ,QACP,KAAO,CACL,MAAM9B,QAAiBC,EAAAA,GAAUgB,UAAU,CACzCd,MAAOpD,EACPqD,KAAMjD,IAGF+D,EAAMH,OAAOI,IAAIC,gBAAgB,IAAIC,KAAK,CAACrB,EAASpC,QACpD0D,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOP,EACZI,EAAKI,aAAa,WAAW,gBAAD5C,OAAkB/B,EAAa,KAAA+B,OAAI3B,EAAY,SAC3EoE,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLP,EAAKQ,QACP,CAEAxB,EAAAA,GAAMyB,QAAQ,4BAChB,CAAE,MAAO1B,GACPC,EAAAA,GAAMD,MAAM,wBACZE,QAAQF,MAAMA,EAChB,MAnCEC,EAAAA,GAAM0B,KAAK,qBAsCTC,EAAkBzE,UAAa,IAAD0E,EAAAC,EAAAC,EAElC,MAAMvB,EAA0B,aAAbhE,EACf,WAAU,GAAAiC,OACP,IAAI7B,KAAK,IAAMF,EAAgB,EAAG,GAAG+D,eAAe,UAAW,CAAEX,MAAO,SAAS,KAAArB,OAAI3B,GAEtFwC,GAA0B,OAAPnD,QAAO,IAAPA,GAAyB,QAAlB0F,EAAP1F,EAASmD,wBAAgB,IAAAuC,OAAlB,EAAPA,EAA2BnC,QAAS,EAW7D,GATkBgB,OAAOC,QACvB,gDAAAlC,OACW+B,EAAU,MAAI,iBAAA/B,OACRa,EAAgB,MAAI,iBAAAb,SACjB,OAAPtC,QAAO,IAAPA,GAAgB,QAAT2F,EAAP3F,EAASA,eAAO,IAAA2F,OAAT,EAAPA,EAAkBtE,cAAe,GAAGkB,QAAQ,GAAE,MAAI,mBAAAD,SACzC,OAAPtC,QAAO,IAAPA,GAAgB,QAAT4F,EAAP5F,EAASA,eAAO,IAAA4F,OAAT,EAAPA,EAAkBhE,gBAAiB,GAAGW,QAAQ,GAAE,QAAM,2CASvE,IACE,GAAiB,aAAblC,EAAyB,CAE3B,MAAMmD,QAAiBC,EAAAA,GAAUoC,UAAU,CAAC,GAEtCnB,EAAMH,OAAOI,IAAIC,gBAAgB,IAAIC,KAAK,CAACrB,EAASpC,QACpD0D,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOP,EACZI,EAAKI,aAAa,WAAW,6BAC7BH,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLP,EAAKQ,QACP,KAAO,CACL,MAAM9B,QAAiBC,EAAAA,GAAUoC,UAAU,CACzClC,MAAOpD,EACPqD,KAAMjD,IAGF+D,EAAMH,OAAOI,IAAIC,gBAAgB,IAAIC,KAAK,CAACrB,EAASpC,QACpD0D,EAAOC,SAASC,cAAc,KACpCF,EAAKG,KAAOP,EACZI,EAAKI,aAAa,WAAW,gBAAD5C,OAAkB/B,EAAa,KAAA+B,OAAI3B,EAAY,SAC3EoE,SAASI,KAAKC,YAAYN,GAC1BA,EAAKO,QACLP,EAAKQ,QACP,CAEAxB,EAAAA,GAAMyB,QAAQ,4BAChB,CAAE,MAAO1B,GACPC,EAAAA,GAAMD,MAAM,wBACZE,QAAQF,MAAMA,EAChB,MAnCEC,EAAAA,GAAM0B,KAAK,qBAsCf,GAAIrF,EACF,OAAO2F,EAAAA,EAAAA,KAAA,OAAKC,UAAU,UAASC,UAACF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,cAGjD,IAAK/F,EACH,OAAO8F,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,SAAC,sBAGpC,MAAM,YAAE3E,EAAW,cAAEO,EAAa,QAAEC,GAAY7B,EAAQA,SAClD,kBAAE8B,EAAiB,SAAEM,EAAQ,aAAEc,EAAe,IAAOlD,EAE3D,OACEiG,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BC,EAAAA,EAAAA,MAAA,OAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,uBACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAG,sDAELC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,cAAaC,SAAA,EAC1BF,EAAAA,EAAAA,KAAA,UACEC,UAAS,cAAAzD,OAA6B,kBAAbjC,EAA+B,SAAW,IACnE6F,QAASA,IAAM5F,EAAY,iBAAiB0F,SAC7C,6BAGDF,EAAAA,EAAAA,KAAA,UACEC,UAAS,cAAAzD,OAA6B,aAAbjC,EAA0B,SAAW,IAC9D6F,QAASA,IAAM5F,EAAY,YAAY0F,SACxC,gCAOS,kBAAb3F,IACCyF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,WAC9BF,EAAAA,EAAAA,KAAA,UACEK,MAAO5F,EACP6F,SAAWC,GAAM7F,EAAiB8F,SAASD,EAAEE,OAAOJ,QACpDJ,UAAU,cAAaC,SAEtBQ,MAAMC,KAAK,CAAEpD,OAAQ,IAAM,CAACqD,EAAGC,KAC9Bb,EAAAA,EAAAA,KAAA,UAAoBK,MAAOQ,EAAI,EAAEX,SAC9B,IAAIvF,KAAK,IAAMkG,EAAG,GAAGrC,eAAe,UAAW,CAAEX,MAAO,UAD9CgD,EAAI,UAOvBV,EAAAA,EAAAA,MAAA,OAAKF,UAAU,aAAYC,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAOC,UAAU,aAAYC,SAAC,UAC9BF,EAAAA,EAAAA,KAAA,UACEK,MAAOxF,EACPyF,SAAWC,GAAMzF,EAAgB0F,SAASD,EAAEE,OAAOJ,QACnDJ,UAAU,cAAaC,SAEtBQ,MAAMC,KAAK,CAAEpD,OAAQ,GAAK,CAACqD,EAAGC,KAC7B,MAAM/C,GAAO,IAAInD,MAAOI,cAAgB8F,EACxC,OAAOb,EAAAA,EAAAA,KAAA,UAAmBK,MAAOvC,EAAKoC,SAAEpC,GAApBA,WAK1BqC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,kBAAkBG,QAASjC,EAAgB+B,SAAC,6BAG9DF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,kBAAkBG,QAAST,EAAgBO,SAAC,oCASxD,aAAb3F,IACCyF,EAAAA,EAAAA,KAAA,OAAKC,UAAU,YAAWC,UACxBC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,2BAA0BC,SAAA,EACvCF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,kBAAkBG,QAASjC,EAAgB+B,SAAC,wCAG9DF,EAAAA,EAAAA,KAAA,UAAQC,UAAU,kBAAkBG,QAAST,EAAgBO,SAAC,6CAQpEC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,gBAAeC,SAAA,CAAC,SAAE3E,EAAYkB,QAAQ,UAErD0D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,oBACJC,EAAAA,EAAAA,MAAA,KAAGF,UAAU,iBAAgBC,SAAA,CAAC,SAAEpE,EAAcW,QAAQ,UAExD0D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,eAAcC,SAAA,EAC3BF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,iBACJC,EAAAA,EAAAA,MAAA,KAAGF,UAAS,UAAAzD,OAAYT,GAAW,EAAI,SAAW,WAAYmE,SAAA,CAAC,SAC3DnE,EAAQU,QAAQ,aAMxB0D,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,aAAYC,SAAC,kCAC1BrD,OAAOiE,KAAK9E,GAAmBuB,OAAS,GACvCyC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,gBAAeC,SAC3BrD,OAAOC,QAAQd,GACbe,KAAK,CAACC,EAAGC,IAAMA,EAAE,GAAKD,EAAE,IACxB+D,IAAIC,IAAyB,IAAvB9E,EAAUL,GAAOmF,EACtB,MAAMC,GAAepF,EAASC,EAAiB,KAAKW,QAAQ,GAC5D,OACE0D,EAAAA,EAAAA,MAAA,OAAoBF,UAAU,gBAAeC,SAAA,EAC3CC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,kBAAiBC,SAAA,EAC9BF,EAAAA,EAAAA,KAAA,QAAMC,UAAU,gBAAeC,SAAEhE,KACjCiE,EAAAA,EAAAA,MAAA,QAAMF,UAAU,kBAAiBC,SAAA,CAAC,SAAErE,EAAOY,QAAQ,UAErDuD,EAAAA,EAAAA,KAAA,OAAKC,UAAU,eAAcC,UAC3BF,EAAAA,EAAAA,KAAA,OACEC,UAAU,gBACViB,MAAO,CAAEC,MAAM,GAAD3E,OAAKyE,EAAU,WAGjCd,EAAAA,EAAAA,MAAA,QAAMF,UAAU,sBAAqBC,SAAA,CAAEe,EAAW,SAX1C/E,QAiBlB8D,EAAAA,EAAAA,KAAA,KAAGC,UAAU,cAAaC,SAAC,uCAK9B5D,EAASiB,OAAS,IACjB4C,EAAAA,EAAAA,MAAA,OAAKF,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,aAAYC,SAAC,qCAC3BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,gBAAeC,SAC1B5D,EAASyE,IAAI,CAACK,EAASC,KACtBrB,EAAAA,EAAAA,KAAA,MAAAE,SAAiBkB,GAARC,UAOjBlB,EAAAA,EAAAA,MAAA,OAAKF,UAAU,4BAA2BC,SAAA,EACxCC,EAAAA,EAAAA,MAAA,OAAKF,UAAU,iBAAgBC,SAAA,EAC7BF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,aAAYC,SAAC,sCAC3BF,EAAAA,EAAAA,KAAA,UACEC,UAAU,kBACVG,QAASA,IAAM3B,OAAO6C,QAAQpB,SAC/B,uCAKF9C,EAAaG,OAAS,GACrByC,EAAAA,EAAAA,KAAA,OAAKC,UAAU,mBAAkBC,UAC/BC,EAAAA,EAAAA,MAAA,SAAOF,UAAU,qBAAoBC,SAAA,EACnCF,EAAAA,EAAAA,KAAA,SAAAE,UACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,UACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,UACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,cACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,YACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,eAGRF,EAAAA,EAAAA,KAAA,SAAAE,SACG9C,EAAa2D,IAAKQ,IACjBpB,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,MAAAD,SAAA,EACEF,EAAAA,EAAAA,KAAA,OAAAE,UAAMsB,EAAAA,EAAAA,GAAO,IAAI7G,KAAK4G,EAAYE,MAAO,mBACzCzB,EAAAA,EAAAA,KAAA,OAAKkB,MAAO,CAAEQ,SAAU,OAAQC,MAAO,QAASzB,UAC7CsB,EAAAA,EAAAA,GAAO,IAAI7G,KAAK4G,EAAYE,MAAO,eAGxCzB,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,QAAMC,UAAS,SAAAzD,OAAW+E,EAAY7F,MAAOwE,SAC1CqB,EAAY7F,UAGjBsE,EAAAA,EAAAA,KAAA,MAAAE,SAAKqB,EAAYrF,YACjBiE,EAAAA,EAAAA,MAAA,MAAIF,UAAS,UAAAzD,OAAY+E,EAAY7F,MAAOwE,SAAA,CACpB,WAArBqB,EAAY7F,KAAoB,IAAM,IAAI,SAAE6F,EAAY1F,OAAOY,QAAQ,OAE1EuD,EAAAA,EAAAA,KAAA,MAAAE,SAAKqB,EAAYK,MAAQ,QAhBlBL,EAAYM,SAoBzB1B,EAAAA,EAAAA,MAAA,SAAAD,SAAA,EACEC,EAAAA,EAAAA,MAAA,MAAIF,UAAU,YAAWC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,MAAI8B,QAAQ,IAAG5B,UAACF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,aACxBF,EAAAA,EAAAA,KAAA,MAAAE,UAAIC,EAAAA,EAAAA,MAAA,UAAQF,UAAU,gBAAeC,SAAA,CAAC,UAAG3E,EAAYkB,QAAQ,SAC7DuD,EAAAA,EAAAA,KAAA,aAEFG,EAAAA,EAAAA,MAAA,MAAIF,UAAU,YAAWC,SAAA,EACvBF,EAAAA,EAAAA,KAAA,MAAI8B,QAAQ,IAAG5B,UAACF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,sBACxBF,EAAAA,EAAAA,KAAA,MAAAE,UAAIC,EAAAA,EAAAA,MAAA,UAAQF,UAAU,iBAAgBC,SAAA,CAAC,UAAGpE,EAAcW,QAAQ,SAChEuD,EAAAA,EAAAA,KAAA,aAEFG,EAAAA,EAAAA,MAAA,MAAIF,UAAU,sBAAqBC,SAAA,EACjCF,EAAAA,EAAAA,KAAA,MAAI8B,QAAQ,IAAG5B,UAACF,EAAAA,EAAAA,KAAA,UAAAE,SAAQ,mBACxBF,EAAAA,EAAAA,KAAA,MAAAE,UACEC,EAAAA,EAAAA,MAAA,UAAQF,UAAS,UAAAzD,OAAYT,GAAW,EAAI,SAAW,WAAYmE,SAAA,CAAC,SAChEnE,EAAQU,QAAQ,SAGtBuD,EAAAA,EAAAA,KAAA,qBAMRA,EAAAA,EAAAA,KAAA,KAAGC,UAAU,cAAaC,SAAC,0C","sources":["pages/Reports.js"],"sourcesContent":["/**\n * Reports Page\n * View financial summaries and export data\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { reportAPI, transactionAPI } from '../services/api';\nimport { toast } from 'react-toastify';\nimport { format } from 'date-fns';\nimport './Reports.css';\n\nconst Reports = () => {\n  const [summary, setSummary] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [viewMode, setViewMode] = useState('current-month'); // 'current-month' or 'all-time'\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n\n  const loadSummary = useCallback(async () => {\n    setLoading(true);\n    try {\n      if (viewMode === 'all-time') {\n        // Get all transactions and calculate summary\n        const transactionsRes = await transactionAPI.getAll();\n        const allTransactions = transactionsRes.data;\n        \n        const totalIncome = allTransactions\n          .filter(t => t.type === 'income')\n          .reduce((sum, t) => sum + t.amount, 0);\n        \n        const totalExpenses = allTransactions\n          .filter(t => t.type === 'expense')\n          .reduce((sum, t) => sum + t.amount, 0);\n        \n        const balance = totalIncome - totalExpenses;\n        \n        // Category breakdown\n        const categoryBreakdown = {};\n        allTransactions\n          .filter(t => t.type === 'expense')\n          .forEach(t => {\n            categoryBreakdown[t.category] = (categoryBreakdown[t.category] || 0) + t.amount;\n          });\n        \n        const savingsGoal = 20000;\n        const savings = balance;\n        const savingsPercentage = totalIncome > 0 ? ((savings / totalIncome) * 100) : 0;\n        \n        const insights = [];\n        if (savings >= savingsGoal) {\n          insights.push(`Excellent! You saved ₹${savings.toFixed(2)}, exceeding your goal by ₹${(savings - savingsGoal).toFixed(2)}`);\n        } else if (savings > 0) {\n          insights.push(`You saved ₹${savings.toFixed(2)} (${savingsPercentage.toFixed(2)}% of income)`);\n        } else if (savings < 0) {\n          insights.push(`Warning: You spent ₹${Math.abs(savings).toFixed(2)} more than you earned`);\n        }\n        \n        const highestCategory = Object.entries(categoryBreakdown)\n          .sort((a, b) => b[1] - a[1])[0];\n        if (highestCategory) {\n          insights.push(`Your highest expense category is ${highestCategory[0]} (₹${highestCategory[1].toFixed(2)})`);\n        }\n        \n        setSummary({\n          period: {\n            display: 'All Time'\n          },\n          summary: {\n            totalIncome,\n            totalExpenses,\n            balance,\n            savingsGoal,\n            savings,\n            savingsPercentage\n          },\n          categoryBreakdown,\n          insights,\n          transactions: allTransactions,\n          transactionCount: {\n            income: allTransactions.filter(t => t.type === 'income').length,\n            expense: allTransactions.filter(t => t.type === 'expense').length,\n            total: allTransactions.length\n          }\n        });\n      } else {\n        // Get monthly summary from API\n        const response = await reportAPI.getSummary({\n          month: selectedMonth,\n          year: selectedYear\n        });\n        setSummary(response.data);\n      }\n    } catch (error) {\n      toast.error('Failed to load summary');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [viewMode, selectedMonth, selectedYear]);\n\n  useEffect(() => {\n    loadSummary();\n  }, [loadSummary]);\n\n  const handleExportCSV = async () => {\n    // Get period description for confirmation\n    const periodDesc = viewMode === 'all-time' \n      ? 'All Time' \n      : `${new Date(2000, selectedMonth - 1, 1).toLocaleString('default', { month: 'long' })} ${selectedYear}`;\n    \n    const transactionCount = summary?.transactionCount?.total || 0;\n    \n    const confirmed = window.confirm(\n      `📊 Export CSV Report\\n\\n` +\n      `Period: ${periodDesc}\\n` +\n      `Transactions: ${transactionCount}\\n` +\n      `Income: ₹${(summary?.summary?.totalIncome || 0).toFixed(2)}\\n` +\n      `Expenses: ₹${(summary?.summary?.totalExpenses || 0).toFixed(2)}\\n\\n` +\n      `Do you want to proceed with the export?`\n    );\n    \n    if (!confirmed) {\n      toast.info('Export cancelled');\n      return;\n    }\n    \n    try {\n      if (viewMode === 'all-time') {\n        // For all-time, we need to export without month/year filter\n        const response = await reportAPI.exportCSV({});\n        \n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', `transactions_all_time.csv`);\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n      } else {\n        const response = await reportAPI.exportCSV({\n          month: selectedMonth,\n          year: selectedYear\n        });\n        \n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', `transactions_${selectedMonth}_${selectedYear}.csv`);\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n      }\n      \n      toast.success('CSV exported successfully');\n    } catch (error) {\n      toast.error('Failed to export CSV');\n      console.error(error);\n    }\n  };\n\n  const handleExportPDF = async () => {\n    // Get period description for confirmation\n    const periodDesc = viewMode === 'all-time' \n      ? 'All Time' \n      : `${new Date(2000, selectedMonth - 1, 1).toLocaleString('default', { month: 'long' })} ${selectedYear}`;\n    \n    const transactionCount = summary?.transactionCount?.total || 0;\n    \n    const confirmed = window.confirm(\n      `📄 Export PDF Report\\n\\n` +\n      `Period: ${periodDesc}\\n` +\n      `Transactions: ${transactionCount}\\n` +\n      `Income: ₹${(summary?.summary?.totalIncome || 0).toFixed(2)}\\n` +\n      `Expenses: ₹${(summary?.summary?.totalExpenses || 0).toFixed(2)}\\n\\n` +\n      `Do you want to proceed with the export?`\n    );\n    \n    if (!confirmed) {\n      toast.info('Export cancelled');\n      return;\n    }\n    \n    try {\n      if (viewMode === 'all-time') {\n        // For all-time, we need to export without month/year filter\n        const response = await reportAPI.exportPDF({});\n        \n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', `transactions_all_time.pdf`);\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n      } else {\n        const response = await reportAPI.exportPDF({\n          month: selectedMonth,\n          year: selectedYear\n        });\n        \n        const url = window.URL.createObjectURL(new Blob([response.data]));\n        const link = document.createElement('a');\n        link.href = url;\n        link.setAttribute('download', `transactions_${selectedMonth}_${selectedYear}.pdf`);\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n      }\n      \n      toast.success('PDF exported successfully');\n    } catch (error) {\n      toast.error('Failed to export PDF');\n      console.error(error);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"loading\"><div className=\"spinner\"></div></div>;\n  }\n\n  if (!summary) {\n    return <div className=\"container\">No data available</div>;\n  }\n\n  const { totalIncome, totalExpenses, balance } = summary.summary;\n  const { categoryBreakdown, insights, transactions = [] } = summary;\n\n  return (\n    <div className=\"reports-page\">\n      <div className=\"page-header\">\n        <div>\n          <h1>Financial Reports</h1>\n          <p>View your financial summaries and export data</p>\n        </div>\n        <div className=\"view-toggle\">\n          <button \n            className={`toggle-btn ${viewMode === 'current-month' ? 'active' : ''}`}\n            onClick={() => setViewMode('current-month')}\n          >\n            📅 This Month\n          </button>\n          <button \n            className={`toggle-btn ${viewMode === 'all-time' ? 'active' : ''}`}\n            onClick={() => setViewMode('all-time')}\n          >\n            🌍 All Time\n          </button>\n        </div>\n      </div>\n\n      {/* Period Selector - Only show for current-month view */}\n      {viewMode === 'current-month' && (\n        <div className=\"card mb-4\">\n          <div className=\"period-selector\">\n            <div className=\"form-group\">\n              <label className=\"form-label\">Month</label>\n              <select\n                value={selectedMonth}\n                onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\n                className=\"form-select\"\n              >\n                {Array.from({ length: 12 }, (_, i) => (\n                  <option key={i + 1} value={i + 1}>\n                    {new Date(2000, i, 1).toLocaleString('default', { month: 'long' })}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"form-group\">\n              <label className=\"form-label\">Year</label>\n              <select\n                value={selectedYear}\n                onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n                className=\"form-select\"\n              >\n                {Array.from({ length: 5 }, (_, i) => {\n                  const year = new Date().getFullYear() - i;\n                  return <option key={year} value={year}>{year}</option>;\n                })}\n              </select>\n            </div>\n\n            <div className=\"export-buttons\">\n              <button className=\"btn btn-outline\" onClick={handleExportCSV}>\n                📊 Export CSV\n              </button>\n              <button className=\"btn btn-outline\" onClick={handleExportPDF}>\n                📄 Export PDF\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Export buttons for All Time view */}\n      {viewMode === 'all-time' && (\n        <div className=\"card mb-4\">\n          <div className=\"export-buttons-fullwidth\">\n            <button className=\"btn btn-outline\" onClick={handleExportCSV}>\n              📊 Export CSV (All Time)\n            </button>\n            <button className=\"btn btn-outline\" onClick={handleExportPDF}>\n              📄 Export PDF (All Time)\n            </button>\n          </div>\n        </div>\n      )}\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-3 mb-4\">\n        <div className=\"summary-card\">\n          <h3>Total Income</h3>\n          <p className=\"amount income\">₹{totalIncome.toFixed(2)}</p>\n        </div>\n        <div className=\"summary-card\">\n          <h3>Total Expenses</h3>\n          <p className=\"amount expense\">₹{totalExpenses.toFixed(2)}</p>\n        </div>\n        <div className=\"summary-card\">\n          <h3>Net Balance</h3>\n          <p className={`amount ${balance >= 0 ? 'income' : 'expense'}`}>\n            ₹{balance.toFixed(2)}\n          </p>\n        </div>\n      </div>\n\n      {/* Category Breakdown */}\n      <div className=\"card mb-4\">\n        <h3 className=\"card-title\">Expense Breakdown by Category</h3>\n        {Object.keys(categoryBreakdown).length > 0 ? (\n          <div className=\"category-list\">\n            {Object.entries(categoryBreakdown)\n              .sort((a, b) => b[1] - a[1])\n              .map(([category, amount]) => {\n                const percentage = ((amount / totalExpenses) * 100).toFixed(1);\n                return (\n                  <div key={category} className=\"category-item\">\n                    <div className=\"category-header\">\n                      <span className=\"category-name\">{category}</span>\n                      <span className=\"category-amount\">₹{amount.toFixed(2)}</span>\n                    </div>\n                    <div className=\"category-bar\">\n                      <div \n                        className=\"category-fill\"\n                        style={{ width: `${percentage}%` }}\n                      ></div>\n                    </div>\n                    <span className=\"category-percentage\">{percentage}%</span>\n                  </div>\n                );\n              })}\n          </div>\n        ) : (\n          <p className=\"text-center\">No expense data for this period</p>\n        )}\n      </div>\n\n      {/* Insights */}\n      {insights.length > 0 && (\n        <div className=\"card mb-4\">\n          <h3 className=\"card-title\">💡 Financial Insights</h3>\n          <ul className=\"insights-list\">\n            {insights.map((insight, index) => (\n              <li key={index}>{insight}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Transactions List */}\n      <div className=\"card transactions-section\">\n        <div className=\"section-header\">\n          <h3 className=\"card-title\">📋 Transaction Details</h3>\n          <button \n            className=\"btn btn-primary\"\n            onClick={() => window.print()}\n          >\n            🖨️ Print Report\n          </button>\n        </div>\n        \n        {transactions.length > 0 ? (\n          <div className=\"table-responsive\">\n            <table className=\"transactions-table\">\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Type</th>\n                  <th>Category</th>\n                  <th>Amount</th>\n                  <th>Note</th>\n                </tr>\n              </thead>\n              <tbody>\n                {transactions.map((transaction) => (\n                  <tr key={transaction._id}>\n                    <td>\n                      <div>{format(new Date(transaction.date), 'MMM dd, yyyy')}</div>\n                      <div style={{ fontSize: '12px', color: '#888' }}>\n                        {format(new Date(transaction.date), 'HH:mm')}\n                      </div>\n                    </td>\n                    <td>\n                      <span className={`badge ${transaction.type}`}>\n                        {transaction.type}\n                      </span>\n                    </td>\n                    <td>{transaction.category}</td>\n                    <td className={`amount ${transaction.type}`}>\n                      {transaction.type === 'income' ? '+' : '-'}₹{transaction.amount.toFixed(2)}\n                    </td>\n                    <td>{transaction.note || '-'}</td>\n                  </tr>\n                ))}\n              </tbody>\n              <tfoot>\n                <tr className=\"total-row\">\n                  <td colspan=\"3\"><strong>Total</strong></td>\n                  <td><strong className=\"amount income\">+₹{totalIncome.toFixed(2)}</strong></td>\n                  <td></td>\n                </tr>\n                <tr className=\"total-row\">\n                  <td colspan=\"3\"><strong>Total Expenses</strong></td>\n                  <td><strong className=\"amount expense\">-₹{totalExpenses.toFixed(2)}</strong></td>\n                  <td></td>\n                </tr>\n                <tr className=\"total-row highlight\">\n                  <td colspan=\"3\"><strong>Net Balance</strong></td>\n                  <td>\n                    <strong className={`amount ${balance >= 0 ? 'income' : 'expense'}`}>\n                      ₹{balance.toFixed(2)}\n                    </strong>\n                  </td>\n                  <td></td>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n        ) : (\n          <p className=\"text-center\">No transactions for this period</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Reports;\n"],"names":["Reports","summary","setSummary","useState","loading","setLoading","viewMode","setViewMode","selectedMonth","setSelectedMonth","Date","getMonth","selectedYear","setSelectedYear","getFullYear","loadSummary","useCallback","async","allTransactions","transactionAPI","getAll","data","totalIncome","filter","t","type","reduce","sum","amount","totalExpenses","balance","categoryBreakdown","forEach","category","savingsGoal","savings","savingsPercentage","insights","push","concat","toFixed","Math","abs","highestCategory","Object","entries","sort","a","b","period","display","transactions","transactionCount","income","length","expense","total","response","reportAPI","getSummary","month","year","error","toast","console","useEffect","handleExportCSV","_summary$transactionC","_summary$summary","_summary$summary2","periodDesc","toLocaleString","window","confirm","exportCSV","url","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","success","info","handleExportPDF","_summary$transactionC2","_summary$summary3","_summary$summary4","exportPDF","_jsx","className","children","_jsxs","onClick","value","onChange","e","parseInt","target","Array","from","_","i","keys","map","_ref","percentage","style","width","insight","index","print","transaction","format","date","fontSize","color","note","_id","colspan"],"sourceRoot":""}