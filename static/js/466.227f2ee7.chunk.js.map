{"version":3,"file":"static/js/466.227f2ee7.chunk.js","mappings":"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","sources":["../node_modules/@pixi/constants/src/index.ts","../node_modules/@pixi/settings/src/adapter.ts","../node_modules/node_modules/ismobilejs/esm/isMobile.js","../node_modules/@pixi/settings/src/utils/isMobile.ts","../node_modules/@pixi/settings/src/settings.ts","../node_modules/@pixi/settings/src/utils/maxRecommendedTextures.ts","../node_modules/@pixi/settings/src/utils/canUploadSameBuffer.ts","../node_modules/@pixi/utils/src/url.ts","../node_modules/@pixi/utils/src/settings.ts","../node_modules/@pixi/utils/src/browser/hello.ts","../node_modules/@pixi/utils/src/browser/isWebGLSupported.ts","../node_modules/@pixi/utils/src/color/premultiply.ts","../node_modules/@pixi/utils/src/data/getBufferType.ts","../node_modules/@pixi/utils/src/data/interleaveTypedArrays.ts","../node_modules/@pixi/utils/src/data/pow2.ts","../node_modules/@pixi/utils/src/data/removeItems.ts","../node_modules/@pixi/utils/src/data/uid.ts","../node_modules/@pixi/utils/src/logging/deprecation.ts","../node_modules/@pixi/utils/src/media/caches.ts","../node_modules/@pixi/utils/src/media/CanvasRenderTarget.ts","../node_modules/@pixi/utils/src/const.ts","../node_modules/@pixi/utils/src/network/determineCrossOrigin.ts","../node_modules/@pixi/utils/src/network/getResolutionOfUrl.ts","../node_modules/@pixi/math/src/const.ts","../node_modules/@pixi/math/src/Point.ts","../node_modules/@pixi/math/src/shapes/Rectangle.ts","../node_modules/@pixi/math/src/ObservablePoint.ts","../node_modules/@pixi/math/src/shapes/Circle.ts","../node_modules/@pixi/math/src/shapes/Ellipse.ts","../node_modules/@pixi/math/src/shapes/Polygon.ts","../node_modules/@pixi/math/src/shapes/RoundedRectangle.ts","../node_modules/@pixi/math/src/Matrix.ts","../node_modules/@pixi/math/src/groupD8.ts","../node_modules/@pixi/extensions/src/index.ts","../node_modules/@pixi/math/src/Transform.ts","../node_modules/node_modules/tslib/tslib.es6.js","../node_modules/@pixi/ticker/src/const.ts","../node_modules/@pixi/runner/src/Runner.ts","../node_modules/@pixi/ticker/src/settings.ts","../node_modules/@pixi/ticker/src/TickerListener.ts","../node_modules/@pixi/ticker/src/Ticker.ts","../node_modules/@pixi/ticker/src/TickerPlugin.ts","../node_modules/@pixi/core/src/settings.ts","../node_modules/@pixi/core/src/textures/resources/autoDetectResource.ts","../node_modules/@pixi/core/src/textures/resources/Resource.ts","../node_modules/@pixi/core/src/textures/resources/BufferResource.ts","../node_modules/@pixi/core/src/textures/BaseTexture.ts","../node_modules/@pixi/core/src/textures/resources/AbstractMultiResource.ts","../node_modules/@pixi/core/src/textures/resources/ArrayResource.ts","../node_modules/@pixi/core/src/textures/resources/BaseImageResource.ts","../node_modules/@pixi/core/src/textures/resources/CanvasResource.ts","../node_modules/@pixi/core/src/textures/resources/CubeResource.ts","../node_modules/@pixi/core/src/textures/resources/ImageResource.ts","../node_modules/@pixi/core/src/textures/resources/SVGResource.ts","../node_modules/@pixi/core/src/textures/resources/VideoResource.ts","../node_modules/@pixi/core/src/textures/resources/ImageBitmapResource.ts","../node_modules/@pixi/core/src/textures/resources/index.ts","../node_modules/@pixi/core/src/textures/resources/DepthResource.ts","../node_modules/@pixi/core/src/framebuffer/Framebuffer.ts","../node_modules/@pixi/core/src/renderTexture/BaseRenderTexture.ts","../node_modules/@pixi/core/src/textures/TextureUvs.ts","../node_modules/@pixi/core/src/textures/Texture.ts","../node_modules/@pixi/core/src/renderTexture/RenderTexture.ts","../node_modules/@pixi/core/src/renderTexture/RenderTexturePool.ts","../node_modules/@pixi/core/src/geometry/Attribute.ts","../node_modules/@pixi/core/src/geometry/Buffer.ts","../node_modules/@pixi/core/src/geometry/utils/interleaveTypedArrays.ts","../node_modules/@pixi/core/src/geometry/Geometry.ts","../node_modules/@pixi/core/src/utils/Quad.ts","../node_modules/@pixi/core/src/utils/QuadUv.ts","../node_modules/@pixi/core/src/shader/UniformGroup.ts","../node_modules/@pixi/core/src/filters/FilterState.ts","../node_modules/@pixi/core/src/filters/FilterSystem.ts","../node_modules/@pixi/core/src/batch/ObjectRenderer.ts","../node_modules/@pixi/core/src/batch/BatchSystem.ts","../node_modules/@pixi/core/src/context/ContextSystem.ts","../node_modules/@pixi/core/src/framebuffer/GLFramebuffer.ts","../node_modules/@pixi/core/src/framebuffer/FramebufferSystem.ts","../node_modules/@pixi/core/src/geometry/GeometrySystem.ts","../node_modules/@pixi/core/src/mask/MaskData.ts","../node_modules/@pixi/core/src/shader/utils/compileShader.ts","../node_modules/@pixi/core/src/shader/utils/logProgramError.ts","../node_modules/@pixi/core/src/shader/utils/defaultValue.ts","../node_modules/@pixi/core/src/shader/utils/getTestContext.ts","../node_modules/@pixi/core/src/shader/utils/getMaxFragmentPrecision.ts","../node_modules/@pixi/core/src/shader/utils/setPrecision.ts","../node_modules/@pixi/core/src/shader/utils/mapSize.ts","../node_modules/@pixi/core/src/shader/utils/mapType.ts","../node_modules/@pixi/core/src/shader/utils/uniformParsers.ts","../node_modules/@pixi/core/src/shader/utils/generateUniformsSync.ts","../node_modules/@pixi/core/src/shader/utils/checkMaxIfStatementsInShader.ts","../node_modules/@pixi/core/src/shader/utils/unsafeEvalSupported.ts","../node_modules/@pixi/core/src/shader/Program.ts","../node_modules/@pixi/core/src/shader/Shader.ts","../node_modules/@pixi/core/src/state/State.ts","../node_modules/@pixi/core/src/filters/Filter.ts","../node_modules/@pixi/core/src/textures/TextureMatrix.ts","../node_modules/@pixi/core/src/filters/spriteMask/SpriteMaskFilter.ts","../node_modules/@pixi/core/src/mask/MaskSystem.ts","../node_modules/@pixi/core/src/mask/AbstractMaskSystem.ts","../node_modules/@pixi/core/src/mask/ScissorSystem.ts","../node_modules/@pixi/core/src/mask/StencilSystem.ts","../node_modules/@pixi/core/src/projection/ProjectionSystem.ts","../node_modules/@pixi/core/src/renderTexture/RenderTextureSystem.ts","../node_modules/@pixi/core/src/shader/utils/generateUniformBufferSync.ts","../node_modules/@pixi/core/src/shader/GLProgram.ts","../node_modules/@pixi/core/src/shader/utils/generateProgram.ts","../node_modules/@pixi/core/src/shader/utils/getAttributeData.ts","../node_modules/@pixi/core/src/shader/utils/getUniformData.ts","../node_modules/@pixi/core/src/shader/ShaderSystem.ts","../node_modules/@pixi/core/src/state/StateSystem.ts","../node_modules/@pixi/core/src/state/utils/mapWebGLBlendModesToPixi.ts","../node_modules/@pixi/core/src/textures/TextureGCSystem.ts","../node_modules/@pixi/core/src/textures/GLTexture.ts","../node_modules/@pixi/core/src/textures/TextureSystem.ts","../node_modules/@pixi/core/src/textures/utils/mapTypeAndFormatToInternalFormat.ts","../node_modules/@pixi/core/src/AbstractRenderer.ts","../node_modules/@pixi/utils/src/color/hex.ts","../node_modules/@pixi/core/src/geometry/GLBuffer.ts","../node_modules/@pixi/core/src/geometry/BufferSystem.ts","../node_modules/@pixi/core/src/Renderer.ts","../node_modules/@pixi/core/src/ISystem.ts","../node_modules/@pixi/core/src/batch/BatchDrawCall.ts","../node_modules/@pixi/core/src/batch/BatchTextureArray.ts","../node_modules/@pixi/core/src/geometry/ViewableBuffer.ts","../node_modules/@pixi/core/src/batch/AbstractBatchRenderer.ts","../node_modules/@pixi/core/src/batch/BatchShaderGenerator.ts","../node_modules/@pixi/core/src/batch/BatchGeometry.ts","../node_modules/@pixi/core/src/batch/BatchPluginFactory.ts","../node_modules/@pixi/core/src/deprecations.ts","../node_modules/@pixi/display/src/settings.ts","../node_modules/@pixi/display/src/Bounds.ts","../node_modules/@pixi/display/src/DisplayObject.ts","../node_modules/@pixi/display/src/Container.ts","../node_modules/pixi-live2d-display/dist/index.es.js","../node_modules/@pixi/utils/node_modules/eventemitter3/index.js"],"sourcesContent":["/**\n * Different types of environments for WebGL.\n * @static\n * @memberof PIXI\n * @name ENV\n * @enum {number}\n * @property {number} WEBGL_LEGACY - Used for older v1 WebGL devices. PixiJS will aim to ensure compatibility\n *  with older / less advanced devices. If you experience unexplained flickering prefer this environment.\n * @property {number} WEBGL - Version 1 of WebGL\n * @property {number} WEBGL2 - Version 2 of WebGL\n */\nexport enum ENV\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    WEBGL_LEGACY,\n    WEBGL,\n    WEBGL2,\n}\n\n/**\n * Constant to identify the Renderer Type.\n * @static\n * @memberof PIXI\n * @name RENDERER_TYPE\n * @enum {number}\n * @property {number} UNKNOWN - Unknown render type.\n * @property {number} WEBGL - WebGL render type.\n * @property {number} CANVAS - Canvas render type.\n */\nexport enum RENDERER_TYPE\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    UNKNOWN,\n    WEBGL,\n    CANVAS,\n}\n\n/**\n * Bitwise OR of masks that indicate the buffers to be cleared.\n * @static\n * @memberof PIXI\n * @name BUFFER_BITS\n * @enum {number}\n * @property {number} COLOR - Indicates the buffers currently enabled for color writing.\n * @property {number} DEPTH - Indicates the depth buffer.\n * @property {number} STENCIL - Indicates the stencil buffer.\n */\nexport enum BUFFER_BITS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    COLOR = 0x00004000,\n    DEPTH = 0x00000100,\n    STENCIL = 0x00000400\n}\n\n/**\n * Various blend modes supported by PIXI.\n *\n * IMPORTANT - The WebGL renderer only supports the NORMAL, ADD, MULTIPLY and SCREEN blend modes.\n * Anything else will silently act like NORMAL.\n * @memberof PIXI\n * @name BLEND_MODES\n * @enum {number}\n * @property {number} NORMAL -\n * @property {number} ADD -\n * @property {number} MULTIPLY -\n * @property {number} SCREEN -\n * @property {number} OVERLAY -\n * @property {number} DARKEN -\n * @property {number} LIGHTEN -\n * @property {number} COLOR_DODGE -\n * @property {number} COLOR_BURN -\n * @property {number} HARD_LIGHT -\n * @property {number} SOFT_LIGHT -\n * @property {number} DIFFERENCE -\n * @property {number} EXCLUSION -\n * @property {number} HUE -\n * @property {number} SATURATION -\n * @property {number} COLOR -\n * @property {number} LUMINOSITY -\n * @property {number} NORMAL_NPM -\n * @property {number} ADD_NPM -\n * @property {number} SCREEN_NPM -\n * @property {number} NONE -\n * @property {number} SRC_IN -\n * @property {number} SRC_OUT -\n * @property {number} SRC_ATOP -\n * @property {number} DST_OVER -\n * @property {number} DST_IN -\n * @property {number} DST_OUT -\n * @property {number} DST_ATOP -\n * @property {number} SUBTRACT -\n * @property {number} SRC_OVER -\n * @property {number} ERASE -\n * @property {number} XOR -\n */\nexport enum BLEND_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    NORMAL = 0,\n    ADD = 1,\n    MULTIPLY = 2,\n    SCREEN = 3,\n    OVERLAY = 4,\n    DARKEN = 5,\n    LIGHTEN = 6,\n    COLOR_DODGE = 7,\n    COLOR_BURN = 8,\n    HARD_LIGHT = 9,\n    SOFT_LIGHT = 10,\n    DIFFERENCE = 11,\n    EXCLUSION = 12,\n    HUE = 13,\n    SATURATION = 14,\n    COLOR = 15,\n    LUMINOSITY = 16,\n    NORMAL_NPM = 17,\n    ADD_NPM = 18,\n    SCREEN_NPM = 19,\n    NONE = 20,\n\n    SRC_OVER = 0,\n    SRC_IN = 21,\n    SRC_OUT = 22,\n    SRC_ATOP = 23,\n    DST_OVER = 24,\n    DST_IN = 25,\n    DST_OUT = 26,\n    DST_ATOP = 27,\n    ERASE = 26,\n    SUBTRACT = 28,\n    XOR = 29,\n}\n\n/**\n * Various webgl draw modes. These can be used to specify which GL drawMode to use\n * under certain situations and renderers.\n * @memberof PIXI\n * @static\n * @name DRAW_MODES\n * @enum {number}\n * @property {number} POINTS -\n * @property {number} LINES -\n * @property {number} LINE_LOOP -\n * @property {number} LINE_STRIP -\n * @property {number} TRIANGLES -\n * @property {number} TRIANGLE_STRIP -\n * @property {number} TRIANGLE_FAN -\n */\nexport enum DRAW_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    POINTS,\n    LINES,\n    LINE_LOOP,\n    LINE_STRIP,\n    TRIANGLES,\n    TRIANGLE_STRIP,\n    TRIANGLE_FAN,\n}\n\n/**\n * Various GL texture/resources formats.\n * @memberof PIXI\n * @static\n * @name FORMATS\n * @enum {number}\n * @property {number} [RGBA=6408] -\n * @property {number} [RGB=6407] -\n * @property {number} [RG=33319] -\n * @property {number} [RED=6403] -\n * @property {number} [RGBA_INTEGER=36249] -\n * @property {number} [RGB_INTEGER=36248] -\n * @property {number} [RG_INTEGER=33320] -\n * @property {number} [RED_INTEGER=36244] -\n * @property {number} [ALPHA=6406] -\n * @property {number} [LUMINANCE=6409] -\n * @property {number} [LUMINANCE_ALPHA=6410] -\n * @property {number} [DEPTH_COMPONENT=6402] -\n * @property {number} [DEPTH_STENCIL=34041] -\n */\nexport enum FORMATS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    RGBA = 6408,\n    RGB = 6407,\n    RG = 33319,\n    RED = 6403,\n    RGBA_INTEGER = 36249,\n    RGB_INTEGER = 36248,\n    RG_INTEGER = 33320,\n    RED_INTEGER = 36244,\n    ALPHA = 6406,\n    LUMINANCE = 6409,\n    LUMINANCE_ALPHA = 6410,\n    DEPTH_COMPONENT = 6402,\n    DEPTH_STENCIL = 34041,\n}\n\n/**\n * Various GL target types.\n * @memberof PIXI\n * @static\n * @name TARGETS\n * @enum {number}\n * @property {number} [TEXTURE_2D=3553] -\n * @property {number} [TEXTURE_CUBE_MAP=34067] -\n * @property {number} [TEXTURE_2D_ARRAY=35866] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_X=34069] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_X=34070] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Y=34071] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Y=34072] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Z=34073] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Z=34074] -\n */\nexport enum TARGETS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    TEXTURE_2D = 3553,\n    TEXTURE_CUBE_MAP = 34067,\n    TEXTURE_2D_ARRAY = 35866,\n    TEXTURE_CUBE_MAP_POSITIVE_X = 34069,\n    TEXTURE_CUBE_MAP_NEGATIVE_X = 34070,\n    TEXTURE_CUBE_MAP_POSITIVE_Y = 34071,\n    TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072,\n    TEXTURE_CUBE_MAP_POSITIVE_Z = 34073,\n    TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074,\n}\n\n/**\n * Various GL data format types.\n * @memberof PIXI\n * @static\n * @name TYPES\n * @enum {number}\n * @property {number} [UNSIGNED_BYTE=5121] -\n * @property {number} [UNSIGNED_SHORT=5123] -\n * @property {number} [UNSIGNED_SHORT_5_6_5=33635] -\n * @property {number} [UNSIGNED_SHORT_4_4_4_4=32819] -\n * @property {number} [UNSIGNED_SHORT_5_5_5_1=32820] -\n * @property {number} [UNSIGNED_INT=5125] -\n * @property {number} [UNSIGNED_INT_10F_11F_11F_REV=35899] -\n * @property {number} [UNSIGNED_INT_2_10_10_10_REV=33640] -\n * @property {number} [UNSIGNED_INT_24_8=34042] -\n * @property {number} [UNSIGNED_INT_5_9_9_9_REV=35902] -\n * @property {number} [BYTE=5120] -\n * @property {number} [SHORT=5122] -\n * @property {number} [INT=5124] -\n * @property {number} [FLOAT=5126] -\n * @property {number} [FLOAT_32_UNSIGNED_INT_24_8_REV=36269] -\n * @property {number} [HALF_FLOAT=36193] -\n */\nexport enum TYPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    UNSIGNED_BYTE = 5121,\n    UNSIGNED_SHORT = 5123,\n    UNSIGNED_SHORT_5_6_5 = 33635,\n    UNSIGNED_SHORT_4_4_4_4 = 32819,\n    UNSIGNED_SHORT_5_5_5_1 = 32820,\n    UNSIGNED_INT = 5125,\n    UNSIGNED_INT_10F_11F_11F_REV = 35899,\n    UNSIGNED_INT_2_10_10_10_REV = 33640,\n    UNSIGNED_INT_24_8 = 34042,\n    UNSIGNED_INT_5_9_9_9_REV = 35902,\n    BYTE = 5120,\n    SHORT = 5122,\n    INT = 5124,\n    FLOAT = 5126,\n    FLOAT_32_UNSIGNED_INT_24_8_REV = 36269,\n    HALF_FLOAT = 36193,\n}\n\n/**\n * Various sampler types. Correspond to `sampler`, `isampler`, `usampler` GLSL types respectively.\n * WebGL1 works only with FLOAT.\n * @memberof PIXI\n * @static\n * @name SAMPLER_TYPES\n * @enum {number}\n * @property {number} [FLOAT=0] -\n * @property {number} [INT=1] -\n * @property {number} [UINT=2] -\n */\nexport enum SAMPLER_TYPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    FLOAT = 0,\n    INT = 1,\n    UINT = 2,\n}\n\n/**\n * The scale modes that are supported by pixi.\n *\n * The {@link PIXI.settings.SCALE_MODE} scale mode affects the default scaling mode of future operations.\n * It can be re-assigned to either LINEAR or NEAREST, depending upon suitability.\n * @memberof PIXI\n * @static\n * @name SCALE_MODES\n * @enum {number}\n * @property {number} LINEAR Smooth scaling\n * @property {number} NEAREST Pixelating scaling\n */\nexport enum SCALE_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    NEAREST,\n    LINEAR,\n}\n\n/**\n * The wrap modes that are supported by pixi.\n *\n * The {@link PIXI.settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n * @name WRAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} CLAMP - The textures uvs are clamped\n * @property {number} REPEAT - The texture uvs tile and repeat\n * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\n */\nexport enum WRAP_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    CLAMP = 33071,\n    REPEAT = 10497,\n    MIRRORED_REPEAT = 33648,\n}\n\n/**\n * Mipmap filtering modes that are supported by pixi.\n *\n * The {@link PIXI.settings.MIPMAP_TEXTURES} affects default texture filtering.\n * Mipmaps are generated for a baseTexture if its `mipmap` field is `ON`,\n * or its `POW2` and texture dimensions are powers of 2.\n * Due to platform restriction, `ON` option will work like `POW2` for webgl-1.\n *\n * This property only affects WebGL.\n * @name MIPMAP_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} OFF - No mipmaps\n * @property {number} POW2 - Generate mipmaps if texture dimensions are pow2\n * @property {number} ON - Always generate mipmaps\n * @property {number} ON_MANUAL - Use mipmaps, but do not auto-generate them; this is used with a resource\n *   that supports buffering each level-of-detail.\n */\nexport enum MIPMAP_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    OFF,\n    POW2,\n    ON,\n    ON_MANUAL\n}\n\n/**\n * How to treat textures with premultiplied alpha\n * @name ALPHA_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NO_PREMULTIPLIED_ALPHA - Source is not premultiplied, leave it like that.\n *  Option for compressed and data textures that are created from typed arrays.\n * @property {number} PREMULTIPLY_ON_UPLOAD - Source is not premultiplied, premultiply on upload.\n *  Default option, used for all loaded images.\n * @property {number} PREMULTIPLIED_ALPHA - Source is already premultiplied\n *  Example: spine atlases with `_pma` suffix.\n * @property {number} NPM - Alias for NO_PREMULTIPLIED_ALPHA.\n * @property {number} UNPACK - Default option, alias for PREMULTIPLY_ON_UPLOAD.\n * @property {number} PMA - Alias for PREMULTIPLIED_ALPHA.\n */\nexport enum ALPHA_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    NPM = 0,\n    UNPACK = 1,\n    PMA = 2,\n    NO_PREMULTIPLIED_ALPHA = 0,\n    PREMULTIPLY_ON_UPLOAD = 1,\n    PREMULTIPLY_ALPHA = 2, // deprecated, undocumented\n    PREMULTIPLIED_ALPHA = 2,\n}\n\n/**\n * Configure whether filter textures are cleared after binding.\n *\n * Filter textures need not be cleared if the filter does not use pixel blending. {@link CLEAR_MODES.BLIT} will detect\n * this and skip clearing as an optimization.\n * @name CLEAR_MODES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} BLEND - Do not clear the filter texture. The filter's output will blend on top of the output texture.\n * @property {number} CLEAR - Always clear the filter texture.\n * @property {number} BLIT - Clear only if {@link FilterSystem.forceClear} is set or if the filter uses pixel blending.\n * @property {number} NO - Alias for BLEND, same as `false` in earlier versions\n * @property {number} YES - Alias for CLEAR, same as `true` in earlier versions\n * @property {number} AUTO - Alias for BLIT\n */\nexport enum CLEAR_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    NO = 0,\n    YES = 1,\n    AUTO = 2,\n    BLEND = 0,\n    CLEAR = 1,\n    BLIT = 2,\n}\n\n/**\n * The gc modes that are supported by pixi.\n *\n * The {@link PIXI.settings.GC_MODE} Garbage Collection mode for PixiJS textures is AUTO\n * If set to GC_MODE, the renderer will occasionally check textures usage. If they are not\n * used for a specified period of time they will be removed from the GPU. They will of course\n * be uploaded again when they are required. This is a silent behind the scenes process that\n * should ensure that the GPU does not  get filled up.\n *\n * Handy for mobile devices!\n * This property only affects WebGL.\n * @name GC_MODES\n * @enum {number}\n * @static\n * @memberof PIXI\n * @property {number} AUTO - Garbage collection will happen periodically automatically\n * @property {number} MANUAL - Garbage collection will need to be called manually\n */\nexport enum GC_MODES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    AUTO,\n    MANUAL,\n}\n\n/**\n * Constants that specify float precision in shaders.\n * @name PRECISION\n * @memberof PIXI\n * @constant\n * @static\n * @enum {string}\n * @property {string} [LOW='lowp'] -\n * @property {string} [MEDIUM='mediump'] -\n * @property {string} [HIGH='highp'] -\n */\nexport enum PRECISION\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    LOW = 'lowp',\n    MEDIUM = 'mediump',\n    HIGH = 'highp',\n}\n\n/**\n * Constants for mask implementations.\n * We use `type` suffix because it leads to very different behaviours\n * @name MASK_TYPES\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - Mask is ignored\n * @property {number} SCISSOR - Scissor mask, rectangle on screen, cheap\n * @property {number} STENCIL - Stencil mask, 1-bit, medium, works only if renderer supports stencil\n * @property {number} SPRITE - Mask that uses SpriteMaskFilter, uses temporary RenderTexture\n * @property {number} COLOR - Color mask (RGBA)\n */\nexport enum MASK_TYPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    NONE = 0,\n    SCISSOR = 1,\n    STENCIL = 2,\n    SPRITE = 3,\n    COLOR = 4,\n}\n\n/**\n * Bitwise OR of masks that indicate the color channels that are rendered to.\n * @static\n * @memberof PIXI\n * @name COLOR_MASK_BITS\n * @enum {number}\n * @property {number} RED - Red channel.\n * @property {number} GREEN - Green channel\n * @property {number} BLUE - Blue channel.\n * @property {number} ALPHA - Alpha channel.\n */\nexport enum COLOR_MASK_BITS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    RED = 0x1,\n    GREEN = 0x2,\n    BLUE = 0x4,\n    ALPHA = 0x8\n}\n\n/**\n * Constants for multi-sampling antialiasing.\n * @see PIXI.Framebuffer#multisample\n * @name MSAA_QUALITY\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} NONE - No multisampling for this renderTexture\n * @property {number} LOW - Try 2 samples\n * @property {number} MEDIUM - Try 4 samples\n * @property {number} HIGH - Try 8 samples\n */\nexport enum MSAA_QUALITY\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    NONE = 0,\n    LOW = 2,\n    MEDIUM = 4,\n    HIGH = 8\n}\n\n/**\n * Constants for various buffer types in Pixi\n * @see PIXI.BUFFER_TYPE\n * @name BUFFER_TYPE\n * @memberof PIXI\n * @static\n * @enum {number}\n * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer\n * @property {number} ARRAY_BUFFER - buffer type for using attribute data\n * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects\n */\nexport enum BUFFER_TYPE\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    ELEMENT_ARRAY_BUFFER = 34963,\n    ARRAY_BUFFER = 34962,\n    // NOT YET SUPPORTED\n    UNIFORM_BUFFER = 35345,\n}\n","export type ContextIds = '2d' | 'webgl' | 'experimental-webgl' | 'webgl2';\n\n/**\n * This interface describes all the DOM dependent calls that Pixi makes throughout its codebase\n * Implementations of this interface can be used to make sure Pixi will work in any environment\n * such as browser, web workers, and node\n */\nexport interface IAdapter\n{\n    /** Returns a canvas object that can be used to create a webgl context. */\n    createCanvas: (width?: number, height?: number) => HTMLCanvasElement;\n    /** Returns a webgl rendering context. */\n    getWebGLRenderingContext: () => typeof WebGLRenderingContext;\n    /** Returns a partial implementation of the browsers window.navigator */\n    getNavigator: () => { userAgent: string };\n    /** Returns the current base URL For browser environments this is either the document.baseURI or window.location.href */\n    getBaseUrl: () => string;\n    fetch: (url: RequestInfo, options?: RequestInit) => Promise<Response>;\n}\n\nexport const BrowserAdapter = {\n    /**\n     * Creates a canvas element of the given size.\n     * This canvas is created using the browser's native canvas element.\n     * @param width - width of the canvas\n     * @param height - height of the canvas\n     */\n    createCanvas: (width: number, height: number): HTMLCanvasElement =>\n    {\n        const canvas = document.createElement('canvas');\n\n        canvas.width = width;\n        canvas.height = height;\n\n        return canvas;\n    },\n    getWebGLRenderingContext: () => WebGLRenderingContext,\n    getNavigator: () => navigator,\n    getBaseUrl: () => (document.baseURI ?? window.location.href),\n    fetch: (url: RequestInfo, options?: RequestInit) => fetch(url, options),\n} as IAdapter;\n","var appleIphone = /iPhone/i;\nvar appleIpod = /iPod/i;\nvar appleTablet = /iPad/i;\nvar appleUniversal = /\\biOS-universal(?:.+)Mac\\b/i;\nvar androidPhone = /\\bAndroid(?:.+)Mobile\\b/i;\nvar androidTablet = /Android/i;\nvar amazonPhone = /(?:SD4930UR|\\bSilk(?:.+)Mobile\\b)/i;\nvar amazonTablet = /Silk/i;\nvar windowsPhone = /Windows Phone/i;\nvar windowsTablet = /\\bWindows(?:.+)ARM\\b/i;\nvar otherBlackBerry = /BlackBerry/i;\nvar otherBlackBerry10 = /BB10/i;\nvar otherOpera = /Opera Mini/i;\nvar otherChrome = /\\b(CriOS|Chrome)(?:.+)Mobile/i;\nvar otherFirefox = /Mobile(?:.+)Firefox\\b/i;\nvar isAppleTabletOnIos13 = function (navigator) {\n    return (typeof navigator !== 'undefined' &&\n        navigator.platform === 'MacIntel' &&\n        typeof navigator.maxTouchPoints === 'number' &&\n        navigator.maxTouchPoints > 1 &&\n        typeof MSStream === 'undefined');\n};\nfunction createMatch(userAgent) {\n    return function (regex) { return regex.test(userAgent); };\n}\nexport default function isMobile(param) {\n    var nav = {\n        userAgent: '',\n        platform: '',\n        maxTouchPoints: 0\n    };\n    if (!param && typeof navigator !== 'undefined') {\n        nav = {\n            userAgent: navigator.userAgent,\n            platform: navigator.platform,\n            maxTouchPoints: navigator.maxTouchPoints || 0\n        };\n    }\n    else if (typeof param === 'string') {\n        nav.userAgent = param;\n    }\n    else if (param && param.userAgent) {\n        nav = {\n            userAgent: param.userAgent,\n            platform: param.platform,\n            maxTouchPoints: param.maxTouchPoints || 0\n        };\n    }\n    var userAgent = nav.userAgent;\n    var tmp = userAgent.split('[FBAN');\n    if (typeof tmp[1] !== 'undefined') {\n        userAgent = tmp[0];\n    }\n    tmp = userAgent.split('Twitter');\n    if (typeof tmp[1] !== 'undefined') {\n        userAgent = tmp[0];\n    }\n    var match = createMatch(userAgent);\n    var result = {\n        apple: {\n            phone: match(appleIphone) && !match(windowsPhone),\n            ipod: match(appleIpod),\n            tablet: !match(appleIphone) &&\n                (match(appleTablet) || isAppleTabletOnIos13(nav)) &&\n                !match(windowsPhone),\n            universal: match(appleUniversal),\n            device: (match(appleIphone) ||\n                match(appleIpod) ||\n                match(appleTablet) ||\n                match(appleUniversal) ||\n                isAppleTabletOnIos13(nav)) &&\n                !match(windowsPhone)\n        },\n        amazon: {\n            phone: match(amazonPhone),\n            tablet: !match(amazonPhone) && match(amazonTablet),\n            device: match(amazonPhone) || match(amazonTablet)\n        },\n        android: {\n            phone: (!match(windowsPhone) && match(amazonPhone)) ||\n                (!match(windowsPhone) && match(androidPhone)),\n            tablet: !match(windowsPhone) &&\n                !match(amazonPhone) &&\n                !match(androidPhone) &&\n                (match(amazonTablet) || match(androidTablet)),\n            device: (!match(windowsPhone) &&\n                (match(amazonPhone) ||\n                    match(amazonTablet) ||\n                    match(androidPhone) ||\n                    match(androidTablet))) ||\n                match(/\\bokhttp\\b/i)\n        },\n        windows: {\n            phone: match(windowsPhone),\n            tablet: match(windowsTablet),\n            device: match(windowsPhone) || match(windowsTablet)\n        },\n        other: {\n            blackberry: match(otherBlackBerry),\n            blackberry10: match(otherBlackBerry10),\n            opera: match(otherOpera),\n            firefox: match(otherFirefox),\n            chrome: match(otherChrome),\n            device: match(otherBlackBerry) ||\n                match(otherBlackBerry10) ||\n                match(otherOpera) ||\n                match(otherFirefox) ||\n                match(otherChrome)\n        },\n        any: false,\n        phone: false,\n        tablet: false\n    };\n    result.any =\n        result.apple.device ||\n            result.android.device ||\n            result.windows.device ||\n            result.other.device;\n    result.phone =\n        result.apple.phone || result.android.phone || result.windows.phone;\n    result.tablet =\n        result.apple.tablet || result.android.tablet || result.windows.tablet;\n    return result;\n}\n//# sourceMappingURL=isMobile.js.map","import isMobileCall from 'ismobilejs';\n\ntype isMobileResult = {\n    apple: {\n        phone: boolean;\n        ipod: boolean;\n        tablet: boolean;\n        universal: boolean;\n        device: boolean;\n    };\n    amazon: {\n        phone: boolean;\n        tablet: boolean;\n        device: boolean;\n    };\n    android: {\n        phone: boolean;\n        tablet: boolean;\n        device: boolean;\n    };\n    windows: {\n        phone: boolean;\n        tablet: boolean;\n        device: boolean;\n    };\n    other: {\n        blackberry: boolean;\n        blackberry10: boolean;\n        opera: boolean;\n        firefox: boolean;\n        chrome: boolean;\n        device: boolean;\n    };\n    phone: boolean;\n    tablet: boolean;\n    any: boolean;\n};\n\nexport const isMobile: isMobileResult = isMobileCall(globalThis.navigator);\n","import type { ENV } from '@pixi/constants';\nimport { GC_MODES, MIPMAP_MODES, MSAA_QUALITY, PRECISION, SCALE_MODES, WRAP_MODES } from '@pixi/constants';\nimport type { IAdapter } from './adapter';\nimport { BrowserAdapter } from './adapter';\nimport { canUploadSameBuffer } from './utils/canUploadSameBuffer';\nimport { isMobile } from './utils/isMobile';\nimport { maxRecommendedTextures } from './utils/maxRecommendedTextures';\n\nexport interface IRenderOptions\n{\n    view: HTMLCanvasElement;\n    width: number;\n    height: number;\n    autoDensity: boolean;\n    backgroundColor: number;\n    backgroundAlpha: number;\n    useContextAlpha: boolean | 'notMultiplied';\n    clearBeforeRender: boolean;\n    antialias: boolean;\n    preserveDrawingBuffer: boolean;\n}\n\nexport interface ISettings\n{\n    ADAPTER: IAdapter;\n    MIPMAP_TEXTURES: MIPMAP_MODES;\n    ANISOTROPIC_LEVEL: number;\n    RESOLUTION: number;\n    FILTER_RESOLUTION: number;\n    FILTER_MULTISAMPLE: MSAA_QUALITY;\n    SPRITE_MAX_TEXTURES: number;\n    SPRITE_BATCH_SIZE: number;\n    RENDER_OPTIONS: IRenderOptions;\n    GC_MODE: GC_MODES;\n    GC_MAX_IDLE: number;\n    GC_MAX_CHECK_COUNT: number;\n    WRAP_MODE: WRAP_MODES;\n    SCALE_MODE: SCALE_MODES;\n    PRECISION_VERTEX: PRECISION;\n    PRECISION_FRAGMENT: PRECISION;\n    CAN_UPLOAD_SAME_BUFFER: boolean;\n    CREATE_IMAGE_BITMAP: boolean;\n    ROUND_PIXELS: boolean;\n    RETINA_PREFIX?: RegExp;\n    FAIL_IF_MAJOR_PERFORMANCE_CAVEAT?: boolean;\n    UPLOADS_PER_FRAME?: number;\n    SORTABLE_CHILDREN?: boolean;\n    PREFER_ENV?: ENV;\n    STRICT_TEXTURE_CACHE?: boolean;\n    MESH_CANVAS_PADDING?: number;\n    TARGET_FPMS?: number;\n}\n\n/**\n * User's customizable globals for overriding the default PIXI settings, such\n * as a renderer's default resolution, framerate, float precision, etc.\n * @example\n * // Use the native window resolution as the default resolution\n * // will support high-density displays when rendering\n * PIXI.settings.RESOLUTION = window.devicePixelRatio;\n *\n * // Disable interpolation when scaling, will make texture be pixelated\n * PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST;\n * @namespace PIXI.settings\n */\nexport const settings: ISettings = {\n\n    /**\n     * This adapter is used to call methods that are platform dependent.\n     * For example `document.createElement` only runs on the web but fails in node environments.\n     * This allows us to support more platforms by abstracting away specific implementations per platform.\n     *\n     * By default the adapter is set to work in the browser. However you can create your own\n     * by implementing the `IAdapter` interface. See `IAdapter` for more information.\n     * @name ADAPTER\n     * @memberof PIXI.settings\n     * @type {PIXI.IAdapter}\n     * @default PIXI.BrowserAdapter\n     */\n    ADAPTER: BrowserAdapter,\n    /**\n     * If set to true WebGL will attempt make textures mimpaped by default.\n     * Mipmapping will only succeed if the base texture uploaded has power of two dimensions.\n     * @static\n     * @name MIPMAP_TEXTURES\n     * @memberof PIXI.settings\n     * @type {PIXI.MIPMAP_MODES}\n     * @default PIXI.MIPMAP_MODES.POW2\n     */\n    MIPMAP_TEXTURES: MIPMAP_MODES.POW2,\n\n    /**\n     * Default anisotropic filtering level of textures.\n     * Usually from 0 to 16\n     * @static\n     * @name ANISOTROPIC_LEVEL\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 0\n     */\n    ANISOTROPIC_LEVEL: 0,\n\n    /**\n     * Default resolution / device pixel ratio of the renderer.\n     * @static\n     * @name RESOLUTION\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 1\n     */\n    RESOLUTION: 1,\n\n    /**\n     * Default filter resolution.\n     * @static\n     * @name FILTER_RESOLUTION\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 1\n     */\n    FILTER_RESOLUTION: 1,\n\n    /**\n     * Default filter samples.\n     * @static\n     * @name FILTER_MULTISAMPLE\n     * @memberof PIXI.settings\n     * @type {PIXI.MSAA_QUALITY}\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    FILTER_MULTISAMPLE: MSAA_QUALITY.NONE,\n\n    /**\n     * The maximum textures that this device supports.\n     * @static\n     * @name SPRITE_MAX_TEXTURES\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 32\n     */\n    SPRITE_MAX_TEXTURES: maxRecommendedTextures(32),\n\n    // TODO: maybe change to SPRITE.BATCH_SIZE: 2000\n    // TODO: maybe add PARTICLE.BATCH_SIZE: 15000\n\n    /**\n     * The default sprite batch size.\n     *\n     * The default aims to balance desktop and mobile devices.\n     * @static\n     * @name SPRITE_BATCH_SIZE\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 4096\n     */\n    SPRITE_BATCH_SIZE: 4096,\n\n    /**\n     * The default render options if none are supplied to {@link PIXI.Renderer}\n     * or {@link PIXI.CanvasRenderer}.\n     * @static\n     * @name RENDER_OPTIONS\n     * @memberof PIXI.settings\n     * @type {object}\n     * @property {boolean} [antialias=false] - {@link PIXI.IRendererOptions.antialias}\n     * @property {boolean} [autoDensity=false] - {@link PIXI.IRendererOptions.autoDensity}\n     * @property {number} [backgroundAlpha=1] - {@link PIXI.IRendererOptions.backgroundAlpha}\n     * @property {number} [backgroundColor=0x000000] - {@link PIXI.IRendererOptions.backgroundColor}\n     * @property {boolean} [clearBeforeRender=true] - {@link PIXI.IRendererOptions.clearBeforeRender}\n     * @property {number} [height=600] - {@link PIXI.IRendererOptions.height}\n     * @property {boolean} [preserveDrawingBuffer=false] - {@link PIXI.IRendererOptions.preserveDrawingBuffer}\n     * @property {boolean|'notMultiplied'} [useContextAlpha=true] - {@link PIXI.IRendererOptions.useContextAlpha}\n     * @property {HTMLCanvasElement} [view=null] - {@link PIXI.IRendererOptions.view}\n     * @property {number} [width=800] - {@link PIXI.IRendererOptions.width}\n     */\n    RENDER_OPTIONS: {\n        view: null,\n        width: 800,\n        height: 600,\n        autoDensity: false,\n        backgroundColor: 0x000000,\n        backgroundAlpha: 1,\n        useContextAlpha: true,\n        clearBeforeRender: true,\n        antialias: false,\n        preserveDrawingBuffer: false,\n    },\n\n    /**\n     * Default Garbage Collection mode.\n     * @static\n     * @name GC_MODE\n     * @memberof PIXI.settings\n     * @type {PIXI.GC_MODES}\n     * @default PIXI.GC_MODES.AUTO\n     */\n    GC_MODE: GC_MODES.AUTO,\n\n    /**\n     * Default Garbage Collection max idle.\n     * @static\n     * @name GC_MAX_IDLE\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 3600\n     */\n    GC_MAX_IDLE: 60 * 60,\n\n    /**\n     * Default Garbage Collection maximum check count.\n     * @static\n     * @name GC_MAX_CHECK_COUNT\n     * @memberof PIXI.settings\n     * @type {number}\n     * @default 600\n     */\n    GC_MAX_CHECK_COUNT: 60 * 10,\n\n    /**\n     * Default wrap modes that are supported by pixi.\n     * @static\n     * @name WRAP_MODE\n     * @memberof PIXI.settings\n     * @type {PIXI.WRAP_MODES}\n     * @default PIXI.WRAP_MODES.CLAMP\n     */\n    WRAP_MODE: WRAP_MODES.CLAMP,\n\n    /**\n     * Default scale mode for textures.\n     * @static\n     * @name SCALE_MODE\n     * @memberof PIXI.settings\n     * @type {PIXI.SCALE_MODES}\n     * @default PIXI.SCALE_MODES.LINEAR\n     */\n    SCALE_MODE: SCALE_MODES.LINEAR,\n\n    /**\n     * Default specify float precision in vertex shader.\n     * @static\n     * @name PRECISION_VERTEX\n     * @memberof PIXI.settings\n     * @type {PIXI.PRECISION}\n     * @default PIXI.PRECISION.HIGH\n     */\n    PRECISION_VERTEX: PRECISION.HIGH,\n\n    /**\n     * Default specify float precision in fragment shader.\n     * iOS is best set at highp due to https://github.com/pixijs/pixi.js/issues/3742\n     * @static\n     * @name PRECISION_FRAGMENT\n     * @memberof PIXI.settings\n     * @type {PIXI.PRECISION}\n     * @default PIXI.PRECISION.MEDIUM\n     */\n    PRECISION_FRAGMENT: isMobile.apple.device ? PRECISION.HIGH : PRECISION.MEDIUM,\n\n    /**\n     * Can we upload the same buffer in a single frame?\n     * @static\n     * @name CAN_UPLOAD_SAME_BUFFER\n     * @memberof PIXI.settings\n     * @type {boolean}\n     */\n    CAN_UPLOAD_SAME_BUFFER: canUploadSameBuffer(),\n\n    /**\n     * Enables bitmap creation before image load. This feature is experimental.\n     * @static\n     * @name CREATE_IMAGE_BITMAP\n     * @memberof PIXI.settings\n     * @type {boolean}\n     * @default false\n     */\n    CREATE_IMAGE_BITMAP: false,\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * @static\n     * @constant\n     * @memberof PIXI.settings\n     * @type {boolean}\n     * @default false\n     */\n    ROUND_PIXELS: false,\n};\n","import { isMobile } from './isMobile';\n\n/**\n * The maximum recommended texture units to use.\n * In theory the bigger the better, and for desktop we'll use as many as we can.\n * But some mobile devices slow down if there is to many branches in the shader.\n * So in practice there seems to be a sweet spot size that varies depending on the device.\n *\n * In v4, all mobile devices were limited to 4 texture units because for this.\n * In v5, we allow all texture units to be used on modern Apple or Android devices.\n * @private\n * @param {number} max\n * @returns {number} The maximum recommended texture units to use.\n */\nexport function maxRecommendedTextures(max: number): number\n{\n    let allowMax = true;\n\n    if (isMobile.tablet || isMobile.phone)\n    {\n        if (isMobile.apple.device)\n        {\n            const match = (navigator.userAgent).match(/OS (\\d+)_(\\d+)?/);\n\n            if (match)\n            {\n                const majorVersion = parseInt(match[1], 10);\n\n                // Limit texture units on devices below iOS 11, which will be older hardware\n                if (majorVersion < 11)\n                {\n                    allowMax = false;\n                }\n            }\n        }\n        if (isMobile.android.device)\n        {\n            const match = (navigator.userAgent).match(/Android\\s([0-9.]*)/);\n\n            if (match)\n            {\n                const majorVersion = parseInt(match[1], 10);\n\n                // Limit texture units on devices below Android 7 (Nougat), which will be older hardware\n                if (majorVersion < 7)\n                {\n                    allowMax = false;\n                }\n            }\n        }\n    }\n\n    return allowMax ? max : 4;\n}\n","import { isMobile } from './isMobile';\n\n/**\n * Uploading the same buffer multiple times in a single frame can cause performance issues.\n * Apparent on iOS so only check for that at the moment\n * This check may become more complex if this issue pops up elsewhere.\n * @private\n * @returns {boolean} `true` if the same buffer may be uploaded more than once.\n */\nexport function canUploadSameBuffer(): boolean\n{\n    return !isMobile.apple.device;\n}\n","/**\n * This file contains redeclared types for Node `url` and `querystring` modules. These modules\n * don't provide their own typings but instead are a part of the full Node typings. The purpose of\n * this file is to redeclare the required types to avoid having the whole Node types as a\n * dependency.\n */\n\nimport { parse as _parse, format as _format, resolve as _resolve } from 'url';\n\ninterface ParsedUrlQuery\n{\n    [key: string]: string | string[];\n}\n\ninterface ParsedUrlQueryInput\n{\n    [key: string]: unknown;\n}\n\ninterface UrlObjectCommon\n{\n    auth?: string;\n    hash?: string;\n    host?: string;\n    hostname?: string;\n    href?: string;\n    path?: string;\n    pathname?: string;\n    protocol?: string;\n    search?: string;\n    slashes?: boolean;\n}\n\n// Input to `url.format`\ninterface UrlObject extends UrlObjectCommon\n{\n    port?: string | number;\n    query?: string | null | ParsedUrlQueryInput;\n}\n\n// Output of `url.parse`\ninterface Url extends UrlObjectCommon\n{\n    port?: string;\n    query?: string | null | ParsedUrlQuery;\n}\n\ninterface UrlWithParsedQuery extends Url\n{\n    query: ParsedUrlQuery;\n}\n\ninterface UrlWithStringQuery extends Url\n{\n    query: string | null;\n}\n\ninterface URLFormatOptions\n{\n    auth?: boolean;\n    fragment?: boolean;\n    search?: boolean;\n    unicode?: boolean;\n}\n\ntype ParseFunction = {\n    (urlStr: string): UrlWithStringQuery;\n    (urlStr: string, parseQueryString: false | undefined, slashesDenoteHost?: boolean): UrlWithStringQuery;\n    (urlStr: string, parseQueryString: true, slashesDenoteHost?: boolean): UrlWithParsedQuery;\n    (urlStr: string, parseQueryString: boolean, slashesDenoteHost?: boolean): Url;\n};\n\ntype FormatFunction = {\n    (URL: URL, options?: URLFormatOptions): string;\n    (urlObject: UrlObject | string): string;\n};\n\ntype ResolveFunction = {\n    (from: string, to: string): string;\n};\n\nexport const url = {\n    parse: _parse as ParseFunction,\n    format: _format as FormatFunction,\n    resolve: _resolve as ResolveFunction,\n};\n","import { settings } from '@pixi/settings';\n\n/**\n * The prefix that denotes a URL is for a retina asset.\n * @static\n * @name RETINA_PREFIX\n * @memberof PIXI.settings\n * @type {RegExp}\n * @default /@([0-9\\.]+)x/\n * @example `@2x`\n */\nsettings.RETINA_PREFIX = /@([0-9\\.]+)x/;\n\n/**\n * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported` function.\n * If set to true, a WebGL renderer can fail to be created if the browser thinks there could be performance issues when\n * using WebGL.\n *\n * In PixiJS v6 this has changed from true to false by default, to allow WebGL to work in as many scenarios as possible.\n * However, some users may have a poor experience, for example, if a user has a gpu or driver version blacklisted by the\n * browser.\n *\n * If your application requires high performance rendering, you may wish to set this to false.\n * We recommend one of two options if you decide to set this flag to false:\n *\n * 1: Use the `pixi.js-legacy` package, which includes a Canvas renderer as a fallback in case high performance WebGL is\n *    not supported.\n *\n * 2: Call `isWebGLSupported` (which if found in the PIXI.utils package) in your code before attempting to create a PixiJS\n *    renderer, and show an error message to the user if the function returns false, explaining that their device & browser\n *    combination does not support high performance WebGL.\n *    This is a much better strategy than trying to create a PixiJS renderer and finding it then fails.\n * @static\n * @name FAIL_IF_MAJOR_PERFORMANCE_CAVEAT\n * @memberof PIXI.settings\n * @type {boolean}\n * @default false\n */\nsettings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT = false;\n\nexport { settings };\n","import { settings } from '@pixi/settings';\n\nlet saidHello = false;\nconst VERSION = '$_VERSION';\n\n/**\n * Skips the hello message of renderers that are created after this is run.\n * @function skipHello\n * @memberof PIXI.utils\n */\nexport function skipHello(): void\n{\n    saidHello = true;\n}\n\n/**\n * Logs out the version and renderer information for this running instance of PIXI.\n * If you don't want to see this message you can run `PIXI.utils.skipHello()` before\n * creating your renderer. Keep in mind that doing that will forever make you a jerk face.\n * @static\n * @function sayHello\n * @memberof PIXI.utils\n * @param {string} type - The string renderer type to log.\n */\nexport function sayHello(type: string): void\n{\n    if (saidHello)\n    {\n        return;\n    }\n\n    if (settings.ADAPTER.getNavigator().userAgent.toLowerCase().indexOf('chrome') > -1)\n    {\n        const args = [\n            `\\n %c %c %c PixiJS ${VERSION} - ✰ ${type} ✰  %c  %c  http://www.pixijs.com/  %c %c ♥%c♥%c♥ \\n\\n`,\n            'background: #ff66a5; padding:5px 0;',\n            'background: #ff66a5; padding:5px 0;',\n            'color: #ff66a5; background: #030307; padding:5px 0;',\n            'background: #ff66a5; padding:5px 0;',\n            'background: #ffc3dc; padding:5px 0;',\n            'background: #ff66a5; padding:5px 0;',\n            'color: #ff2424; background: #fff; padding:5px 0;',\n            'color: #ff2424; background: #fff; padding:5px 0;',\n            'color: #ff2424; background: #fff; padding:5px 0;',\n        ];\n\n        globalThis.console.log(...args);\n    }\n    else if (globalThis.console)\n    {\n        globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n    }\n\n    saidHello = true;\n}\n","import { settings } from '../settings';\n\nlet supported: boolean | undefined;\n\n/**\n * Helper for checking for WebGL support.\n * @memberof PIXI.utils\n * @function isWebGLSupported\n * @returns {boolean} Is WebGL supported.\n */\nexport function isWebGLSupported(): boolean\n{\n    if (typeof supported === 'undefined')\n    {\n        supported = (function supported(): boolean\n        {\n            const contextOptions = {\n                stencil: true,\n                failIfMajorPerformanceCaveat: settings.FAIL_IF_MAJOR_PERFORMANCE_CAVEAT,\n            };\n\n            try\n            {\n                if (!settings.ADAPTER.getWebGLRenderingContext())\n                {\n                    return false;\n                }\n\n                const canvas = settings.ADAPTER.createCanvas();\n                let gl = (\n                    canvas.getContext('webgl', contextOptions)\n                    || canvas.getContext('experimental-webgl', contextOptions)\n                ) as WebGLRenderingContext;\n\n                const success = !!(gl && gl.getContextAttributes().stencil);\n\n                if (gl)\n                {\n                    const loseContext = gl.getExtension('WEBGL_lose_context');\n\n                    if (loseContext)\n                    {\n                        loseContext.loseContext();\n                    }\n                }\n\n                gl = null;\n\n                return success;\n            }\n            catch (e)\n            {\n                return false;\n            }\n        })();\n    }\n\n    return supported;\n}\n","import { BLEND_MODES } from '@pixi/constants';\n\n/**\n * Corrects PixiJS blend, takes premultiplied alpha into account\n * @memberof PIXI.utils\n * @function mapPremultipliedBlendModes\n * @private\n * @returns {Array<number[]>} Mapped modes.\n */\nfunction mapPremultipliedBlendModes(): number[][]\n{\n    const pm = [];\n    const npm = [];\n\n    for (let i = 0; i < 32; i++)\n    {\n        pm[i] = i;\n        npm[i] = i;\n    }\n\n    pm[BLEND_MODES.NORMAL_NPM] = BLEND_MODES.NORMAL;\n    pm[BLEND_MODES.ADD_NPM] = BLEND_MODES.ADD;\n    pm[BLEND_MODES.SCREEN_NPM] = BLEND_MODES.SCREEN;\n\n    npm[BLEND_MODES.NORMAL] = BLEND_MODES.NORMAL_NPM;\n    npm[BLEND_MODES.ADD] = BLEND_MODES.ADD_NPM;\n    npm[BLEND_MODES.SCREEN] = BLEND_MODES.SCREEN_NPM;\n\n    const array: number[][] = [];\n\n    array.push(npm);\n    array.push(pm);\n\n    return array;\n}\n\n/**\n * maps premultiply flag and blendMode to adjusted blendMode\n * @memberof PIXI.utils\n * @constant premultiplyBlendMode\n * @type {Array<number[]>}\n */\nexport const premultiplyBlendMode = mapPremultipliedBlendModes();\n\n/**\n * changes blendMode according to texture format\n * @memberof PIXI.utils\n * @function correctBlendMode\n * @param {number} blendMode - supposed blend mode\n * @param {boolean} premultiplied - whether source is premultiplied\n * @returns {number} true blend mode for this texture\n */\nexport function correctBlendMode(blendMode: number, premultiplied: boolean): number\n{\n    return premultiplyBlendMode[premultiplied ? 1 : 0][blendMode];\n}\n\n/**\n * combines rgb and alpha to out array\n * @memberof PIXI.utils\n * @function premultiplyRgba\n * @param {Float32Array|number[]} rgb - input rgb\n * @param {number} alpha - alpha param\n * @param {Float32Array} [out] - output\n * @param {boolean} [premultiply=true] - do premultiply it\n * @returns {Float32Array} vec4 rgba\n */\nexport function premultiplyRgba(\n    rgb: Float32Array | number[],\n    alpha: number,\n    out?: Float32Array,\n    premultiply?: boolean\n): Float32Array\n{\n    out = out || new Float32Array(4);\n    if (premultiply || premultiply === undefined)\n    {\n        out[0] = rgb[0] * alpha;\n        out[1] = rgb[1] * alpha;\n        out[2] = rgb[2] * alpha;\n    }\n    else\n    {\n        out[0] = rgb[0];\n        out[1] = rgb[1];\n        out[2] = rgb[2];\n    }\n    out[3] = alpha;\n\n    return out;\n}\n\n/**\n * premultiplies tint\n * @memberof PIXI.utils\n * @function premultiplyTint\n * @param {number} tint - integer RGB\n * @param {number} alpha - floating point alpha (0.0-1.0)\n * @returns {number} tint multiplied by alpha\n */\nexport function premultiplyTint(tint: number, alpha: number): number\n{\n    if (alpha === 1.0)\n    {\n        return (alpha * 255 << 24) + tint;\n    }\n    if (alpha === 0.0)\n    {\n        return 0;\n    }\n    let R = ((tint >> 16) & 0xFF);\n    let G = ((tint >> 8) & 0xFF);\n    let B = (tint & 0xFF);\n\n    R = ((R * alpha) + 0.5) | 0;\n    G = ((G * alpha) + 0.5) | 0;\n    B = ((B * alpha) + 0.5) | 0;\n\n    return (alpha * 255 << 24) + (R << 16) + (G << 8) + B;\n}\n\n/**\n * converts integer tint and float alpha to vec4 form, premultiplies by default\n * @memberof PIXI.utils\n * @function premultiplyTintToRgba\n * @param {number} tint - input tint\n * @param {number} alpha - alpha param\n * @param {Float32Array} [out] - output\n * @param {boolean} [premultiply=true] - do premultiply it\n * @returns {Float32Array} vec4 rgba\n */\nexport function premultiplyTintToRgba(tint: number, alpha: number, out: Float32Array, premultiply?: boolean): Float32Array\n{\n    out = out || new Float32Array(4);\n    out[0] = ((tint >> 16) & 0xFF) / 255.0;\n    out[1] = ((tint >> 8) & 0xFF) / 255.0;\n    out[2] = (tint & 0xFF) / 255.0;\n    if (premultiply || premultiply === undefined)\n    {\n        out[0] *= alpha;\n        out[1] *= alpha;\n        out[2] *= alpha;\n    }\n    out[3] = alpha;\n\n    return out;\n}\n","import type { ITypedArray } from '@pixi/core';\n\nexport function getBufferType(\n    array: ITypedArray\n): 'Float32Array' | 'Uint32Array' | 'Int32Array' | 'Uint16Array' | 'Uint8Array' | null\n{\n    if (array.BYTES_PER_ELEMENT === 4)\n    {\n        if (array instanceof Float32Array)\n        {\n            return 'Float32Array';\n        }\n        else if (array instanceof Uint32Array)\n        {\n            return 'Uint32Array';\n        }\n\n        return 'Int32Array';\n    }\n    else if (array.BYTES_PER_ELEMENT === 2)\n    {\n        if (array instanceof Uint16Array)\n        {\n            return 'Uint16Array';\n        }\n    }\n    else if (array.BYTES_PER_ELEMENT === 1)\n    {\n        if (array instanceof Uint8Array)\n        {\n            return 'Uint8Array';\n        }\n    }\n\n    // TODO map out the rest of the array elements!\n    return null;\n}\n","import { getBufferType } from './getBufferType';\n\n/* eslint-disable object-shorthand */\nconst map = { Float32Array: Float32Array, Uint32Array: Uint32Array, Int32Array: Int32Array, Uint8Array: Uint8Array };\n\ntype PackedArray = Float32Array | Uint32Array | Int32Array | Uint8Array;\n\nexport function interleaveTypedArrays(arrays: PackedArray[], sizes: number[]): Float32Array\n{\n    let outSize = 0;\n    let stride = 0;\n    const views: {[key: string]: PackedArray} = {};\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        stride += sizes[i];\n        outSize += arrays[i].length;\n    }\n\n    const buffer = new ArrayBuffer(outSize * 4);\n\n    let out = null;\n    let littleOffset = 0;\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        const size = sizes[i];\n        const array = arrays[i];\n\n        /*\n        @todo This is unsafe casting but consistent with how the code worked previously. Should it stay this way\n              or should and `getBufferTypeUnsafe` function be exposed that throws an Error if unsupported type is passed?\n         */\n        const type = getBufferType(array) as keyof typeof map;\n\n        if (!views[type])\n        {\n            views[type] = new map[type](buffer);\n        }\n\n        out = views[type];\n\n        for (let j = 0; j < array.length; j++)\n        {\n            const indexStart = ((j / size | 0) * stride) + littleOffset;\n            const index = j % size;\n\n            out[indexStart + index] = array[j];\n        }\n\n        littleOffset += size;\n    }\n\n    return new Float32Array(buffer);\n}\n","// Taken from the bit-twiddle package\n\n/**\n * Rounds to next power of two.\n * @function nextPow2\n * @memberof PIXI.utils\n * @param {number} v - input value\n * @returns {number} - next rounded power of two\n */\nexport function nextPow2(v: number): number\n{\n    v += v === 0 ? 1 : 0;\n    --v;\n    v |= v >>> 1;\n    v |= v >>> 2;\n    v |= v >>> 4;\n    v |= v >>> 8;\n    v |= v >>> 16;\n\n    return v + 1;\n}\n\n/**\n * Checks if a number is a power of two.\n * @function isPow2\n * @memberof PIXI.utils\n * @param {number} v - input value\n * @returns {boolean} `true` if value is power of two\n */\nexport function isPow2(v: number): boolean\n{\n    return !(v & (v - 1)) && (!!v);\n}\n\n/**\n * Computes ceil of log base 2\n * @function log2\n * @memberof PIXI.utils\n * @param {number} v - input value\n * @returns {number} logarithm base 2\n */\nexport function log2(v: number): number\n{\n    let r = (v > 0xFFFF ? 1 : 0) << 4;\n\n    v >>>= r;\n\n    let shift = (v > 0xFF ? 1 : 0) << 3;\n\n    v >>>= shift; r |= shift;\n    shift = (v > 0xF ? 1 : 0) << 2;\n    v >>>= shift; r |= shift;\n    shift = (v > 0x3 ? 1 : 0) << 1;\n    v >>>= shift; r |= shift;\n\n    return r | (v >> 1);\n}\n","/**\n * Remove items from a javascript array without generating garbage\n * @function removeItems\n * @memberof PIXI.utils\n * @param {Array<any>} arr - Array to remove elements from\n * @param {number} startIdx - starting index\n * @param {number} removeCount - how many to remove\n */\nexport function removeItems(arr: any[], startIdx: number, removeCount: number): void\n{\n    const length = arr.length;\n    let i;\n\n    if (startIdx >= length || removeCount === 0)\n    {\n        return;\n    }\n\n    removeCount = (startIdx + removeCount > length ? length - startIdx : removeCount);\n\n    const len = length - removeCount;\n\n    for (i = startIdx; i < len; ++i)\n    {\n        arr[i] = arr[i + removeCount];\n    }\n\n    arr.length = len;\n}\n","let nextUid = 0;\n\n/**\n * Gets the next unique identifier\n * @memberof PIXI.utils\n * @function uid\n * @returns {number} The next unique identifier to use.\n */\nexport function uid(): number\n{\n    return ++nextUid;\n}\n","import type { Dict } from '../types';\n\n// A map of warning messages already fired\nconst warnings: Dict<boolean> = {};\n\n/**\n * Helper for warning developers about deprecated features & settings.\n * A stack track for warnings is given; useful for tracking-down where\n * deprecated methods/properties/classes are being used within the code.\n * @memberof PIXI.utils\n * @function deprecation\n * @param {string} version - The version where the feature became deprecated\n * @param {string} message - Message should include what is deprecated, where, and the new solution\n * @param {number} [ignoreDepth=3] - The number of steps to ignore at the top of the error stack\n *        this is mostly to ignore internal deprecation calls.\n */\nexport function deprecation(version: string, message: string, ignoreDepth = 3): void\n{\n    // Ignore duplicat\n    if (warnings[message])\n    {\n        return;\n    }\n\n    /* eslint-disable no-console */\n    let stack = new Error().stack;\n\n    // Handle IE < 10 and Safari < 6\n    if (typeof stack === 'undefined')\n    {\n        console.warn('PixiJS Deprecation Warning: ', `${message}\\nDeprecated since v${version}`);\n    }\n    else\n    {\n        // chop off the stack trace which includes PixiJS internal calls\n        stack = stack.split('\\n').splice(ignoreDepth).join('\\n');\n\n        if (console.groupCollapsed)\n        {\n            console.groupCollapsed(\n                '%cPixiJS Deprecation Warning: %c%s',\n                'color:#614108;background:#fffbe6',\n                'font-weight:normal;color:#614108;background:#fffbe6',\n                `${message}\\nDeprecated since v${version}`\n            );\n            console.warn(stack);\n            console.groupEnd();\n        }\n        else\n        {\n            console.warn('PixiJS Deprecation Warning: ', `${message}\\nDeprecated since v${version}`);\n            console.warn(stack);\n        }\n    }\n    /* eslint-enable no-console */\n\n    warnings[message] = true;\n}\n","import type { Program, Texture, BaseTexture } from '@pixi/core';\n\n/**\n * @todo Describe property usage\n * @static\n * @name ProgramCache\n * @memberof PIXI.utils\n * @type {object}\n */\nexport const ProgramCache: {[key: string]: Program} = {};\n\n/**\n * @todo Describe property usage\n * @static\n * @name TextureCache\n * @memberof PIXI.utils\n * @type {object}\n */\nexport const TextureCache: {[key: string]: Texture} = Object.create(null);\n\n/**\n * @todo Describe property usage\n * @static\n * @name BaseTextureCache\n * @memberof PIXI.utils\n * @type {object}\n */\nexport const BaseTextureCache: {[key: string]: BaseTexture} = Object.create(null);\n\n/**\n * Destroys all texture in the cache\n * @memberof PIXI.utils\n * @function destroyTextureCache\n */\nexport function destroyTextureCache(): void\n{\n    let key;\n\n    for (key in TextureCache)\n    {\n        TextureCache[key].destroy();\n    }\n    for (key in BaseTextureCache)\n    {\n        BaseTextureCache[key].destroy();\n    }\n}\n\n/**\n * Removes all textures from cache, but does not destroy them\n * @memberof PIXI.utils\n * @function clearTextureCache\n */\nexport function clearTextureCache(): void\n{\n    let key;\n\n    for (key in TextureCache)\n    {\n        delete TextureCache[key];\n    }\n    for (key in BaseTextureCache)\n    {\n        delete BaseTextureCache[key];\n    }\n}\n","import { settings } from '@pixi/settings';\n\n/**\n * Creates a Canvas element of the given size to be used as a target for rendering to.\n * @class\n * @memberof PIXI.utils\n */\nexport class CanvasRenderTarget\n{\n    /** The Canvas object that belongs to this CanvasRenderTarget. */\n    public canvas: HTMLCanvasElement;\n\n    /** A CanvasRenderingContext2D object representing a two-dimensional rendering context. */\n    public context: CanvasRenderingContext2D;\n\n    /**\n     * The resolution / device pixel ratio of the canvas\n     * @default 1\n     */\n    public resolution: number;\n\n    /**\n     * @param width - the width for the newly created canvas\n     * @param height - the height for the newly created canvas\n     * @param {number} [resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the canvas\n     */\n    constructor(width: number, height: number, resolution?: number)\n    {\n        this.canvas = settings.ADAPTER.createCanvas();\n\n        this.context = this.canvas.getContext('2d');\n\n        this.resolution = resolution || settings.RESOLUTION;\n\n        this.resize(width, height);\n    }\n\n    /**\n     * Clears the canvas that was created by the CanvasRenderTarget class.\n     * @private\n     */\n    clear(): void\n    {\n        this.context.setTransform(1, 0, 0, 1, 0, 0);\n        this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    /**\n     * Resizes the canvas to the specified width and height.\n     * @param desiredWidth - the desired width of the canvas\n     * @param desiredHeight - the desired height of the canvas\n     */\n    resize(desiredWidth: number, desiredHeight: number): void\n    {\n        this.canvas.width = Math.round(desiredWidth * this.resolution);\n        this.canvas.height = Math.round(desiredHeight * this.resolution);\n    }\n\n    /** Destroys this canvas. */\n    destroy(): void\n    {\n        this.context = null;\n        this.canvas = null;\n    }\n\n    /**\n     * The width of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get width(): number\n    {\n        return this.canvas.width;\n    }\n\n    set width(val: number)\n    {\n        this.canvas.width = Math.round(val);\n    }\n\n    /**\n     * The height of the canvas buffer in pixels.\n     * @member {number}\n     */\n    get height(): number\n    {\n        return this.canvas.height;\n    }\n\n    set height(val: number)\n    {\n        this.canvas.height = Math.round(val);\n    }\n}\n","/**\n * Regexp for data URI.\n * Based on: {@link https://github.com/ragingwind/data-uri-regex}\n * @static\n * @constant {RegExp|string} DATA_URI\n * @memberof PIXI\n * @example data:image/png;base64\n */\nexport const DATA_URI = /^\\s*data:(?:([\\w-]+)\\/([\\w+.-]+))?(?:;charset=([\\w-]+))?(?:;(base64))?,(.*)/i;\n","import { url as _url } from '../url';\n\nlet tempAnchor: HTMLAnchorElement | undefined;\n\n/**\n * Sets the `crossOrigin` property for this resource based on if the url\n * for this resource is cross-origin. If crossOrigin was manually set, this\n * function does nothing.\n * Nipped from the resource loader!\n * @ignore\n * @param {string} url - The url to test.\n * @param {object} [loc=window.location] - The location object to test against.\n * @returns {string} The crossOrigin value to use (or empty string for none).\n */\nexport function determineCrossOrigin(url: string, loc: Location = globalThis.location): string\n{\n    // data: and javascript: urls are considered same-origin\n    if (url.indexOf('data:') === 0)\n    {\n        return '';\n    }\n\n    // default is window.location\n    loc = loc || globalThis.location;\n\n    if (!tempAnchor)\n    {\n        tempAnchor = document.createElement('a');\n    }\n\n    // let the browser determine the full href for the url of this resource and then\n    // parse with the node url lib, we can't use the properties of the anchor element\n    // because they don't work in IE9 :(\n    tempAnchor.href = url;\n    const parsedUrl = _url.parse(tempAnchor.href);\n\n    const samePort = (!parsedUrl.port && loc.port === '') || (parsedUrl.port === loc.port);\n\n    // if cross origin\n    if (parsedUrl.hostname !== loc.hostname || !samePort || parsedUrl.protocol !== loc.protocol)\n    {\n        return 'anonymous';\n    }\n\n    return '';\n}\n","import { settings } from '../settings';\n\n/**\n * get the resolution / device pixel ratio of an asset by looking for the prefix\n * used by spritesheets and image urls\n * @memberof PIXI.utils\n * @function getResolutionOfUrl\n * @param {string} url - the image path\n * @param {number} [defaultValue=1] - the defaultValue if no filename prefix is set.\n * @returns {number} resolution / device pixel ratio of an asset\n */\nexport function getResolutionOfUrl(url: string, defaultValue?: number): number\n{\n    const resolution = settings.RETINA_PREFIX.exec(url);\n\n    if (resolution)\n    {\n        return parseFloat(resolution[1]);\n    }\n\n    return defaultValue !== undefined ? defaultValue : 1;\n}\n","/**\n * Two Pi.\n * @static\n * @member {number}\n * @memberof PIXI\n */\nexport const PI_2 = Math.PI * 2;\n\n/**\n * Conversion factor for converting radians to degrees.\n * @static\n * @member {number} RAD_TO_DEG\n * @memberof PIXI\n */\nexport const RAD_TO_DEG = 180 / Math.PI;\n\n/**\n * Conversion factor for converting degrees to radians.\n * @static\n * @member {number}\n * @memberof PIXI\n */\nexport const DEG_TO_RAD = Math.PI / 180;\n\n/**\n * Constants that identify shapes, mainly to prevent `instanceof` calls.\n * @static\n * @memberof PIXI\n * @enum {number}\n * @property {number} POLY Polygon\n * @property {number} RECT Rectangle\n * @property {number} CIRC Circle\n * @property {number} ELIP Ellipse\n * @property {number} RREC Rounded Rectangle\n */\nexport enum SHAPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    POLY = 0,\n    RECT = 1,\n    CIRC = 2,\n    ELIP = 3,\n    RREC = 4,\n}\n","import type { IPoint } from './IPoint';\nimport type { IPointData } from './IPointData';\n\nexport interface Point extends GlobalMixins.Point, IPoint {}\n\n/**\n * The Point object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis\n * @class\n * @memberof PIXI\n * @implements {IPoint}\n */\nexport class Point implements IPoint\n{\n    /** Position of the point on the x axis */\n    public x = 0;\n    /** Position of the point on the y axis */\n    public y = 0;\n\n    /**\n     * Creates a new `Point`\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(x = 0, y = 0)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Creates a clone of this point\n     * @returns A clone of this point\n     */\n    clone(): Point\n    {\n        return new Point(this.x, this.y);\n    }\n\n    /**\n     * Copies `x` and `y` from the given point into this point\n     * @param p - The point to copy from\n     * @returns The point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        this.set(p.x, p.y);\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into the given point (`p`).\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this.x, this.y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this.x) && (p.y === this.y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the `x` axis\n     * @param {number} [y=x] - position of the point on the `y` axis\n     * @returns The point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        this.x = x;\n        this.y = y;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Point x=${this.x} y=${this.y}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\nimport type { Matrix } from '../Matrix';\nimport { Point } from '../Point';\n\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Rectangle extends GlobalMixins.Rectangle {}\n\n/**\n * Size object, contains width and height\n * @memberof PIXI\n * @typedef {object} ISize\n * @property {number} width - Width component\n * @property {number} height - Height component\n */\n\n/**\n * Rectangle object is an area defined by its position, as indicated by its top-left corner\n * point (x, y) and by its width and its height.\n * @memberof PIXI\n */\nexport class Rectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RECT\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RECT;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rectangle\n     * @param width - The overall width of the rectangle\n     * @param height - The overall height of the rectangle\n     */\n    constructor(x: string | number = 0, y: string | number = 0, width: string | number = 0, height: string | number = 0)\n    {\n        this.x = Number(x);\n        this.y = Number(y);\n        this.width = Number(width);\n        this.height = Number(height);\n        this.type = SHAPES.RECT;\n    }\n\n    /** Returns the left edge of the rectangle. */\n    get left(): number\n    {\n        return this.x;\n    }\n\n    /** Returns the right edge of the rectangle. */\n    get right(): number\n    {\n        return this.x + this.width;\n    }\n\n    /** Returns the top edge of the rectangle. */\n    get top(): number\n    {\n        return this.y;\n    }\n\n    /** Returns the bottom edge of the rectangle. */\n    get bottom(): number\n    {\n        return this.y + this.height;\n    }\n\n    /** A constant empty rectangle. */\n    static get EMPTY(): Rectangle\n    {\n        return new Rectangle(0, 0, 0, 0);\n    }\n\n    /**\n     * Creates a clone of this Rectangle\n     * @returns a copy of the rectangle\n     */\n    clone(): Rectangle\n    {\n        return new Rectangle(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Copies another rectangle to this one.\n     * @param rectangle - The rectangle to copy from.\n     * @returns Returns itself.\n     */\n    copyFrom(rectangle: Rectangle): Rectangle\n    {\n        this.x = rectangle.x;\n        this.y = rectangle.y;\n        this.width = rectangle.width;\n        this.height = rectangle.height;\n\n        return this;\n    }\n\n    /**\n     * Copies this rectangle to another one.\n     * @param rectangle - The rectangle to copy to.\n     * @returns Returns given parameter.\n     */\n    copyTo(rectangle: Rectangle): Rectangle\n    {\n        rectangle.x = this.x;\n        rectangle.y = this.y;\n        rectangle.width = this.width;\n        rectangle.height = this.height;\n\n        return rectangle;\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rectangle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Rectangle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        if (x >= this.x && x < this.x + this.width)\n        {\n            if (y >= this.y && y < this.y + this.height)\n            {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Determines whether the `other` Rectangle transformed by `transform` intersects with `this` Rectangle object.\n     * Returns true only if the area of the intersection is >0, this means that Rectangles\n     * sharing a side are not overlapping. Another side effect is that an arealess rectangle\n     * (width or height equal to zero) can't intersect any other rectangle.\n     * @param {Rectangle} other - The Rectangle to intersect with `this`.\n     * @param {Matrix} transform - The transformation matrix of `other`.\n     * @returns {boolean} A value of `true` if the transformed `other` Rectangle intersects with `this`; otherwise `false`.\n     */\n    intersects(other: Rectangle, transform?: Matrix): boolean\n    {\n        if (!transform)\n        {\n            const x0 = this.x < other.x ? other.x : this.x;\n            const x1 = this.right > other.right ? other.right : this.right;\n\n            if (x1 <= x0)\n            {\n                return false;\n            }\n\n            const y0 = this.y < other.y ? other.y : this.y;\n            const y1 = this.bottom > other.bottom ? other.bottom : this.bottom;\n\n            return y1 > y0;\n        }\n\n        const x0 = this.left;\n        const x1 = this.right;\n        const y0 = this.top;\n        const y1 = this.bottom;\n\n        if (x1 <= x0 || y1 <= y0)\n        {\n            return false;\n        }\n\n        const lt = tempPoints[0].set(other.left, other.top);\n        const lb = tempPoints[1].set(other.left, other.bottom);\n        const rt = tempPoints[2].set(other.right, other.top);\n        const rb = tempPoints[3].set(other.right, other.bottom);\n\n        if (rt.x <= lt.x || lb.y <= lt.y)\n        {\n            return false;\n        }\n\n        const s = Math.sign((transform.a * transform.d) - (transform.b * transform.c));\n\n        if (s === 0)\n        {\n            return false;\n        }\n\n        transform.apply(lt, lt);\n        transform.apply(lb, lb);\n        transform.apply(rt, rt);\n        transform.apply(rb, rb);\n\n        if (Math.max(lt.x, lb.x, rt.x, rb.x) <= x0\n            || Math.min(lt.x, lb.x, rt.x, rb.x) >= x1\n            || Math.max(lt.y, lb.y, rt.y, rb.y) <= y0\n            || Math.min(lt.y, lb.y, rt.y, rb.y) >= y1)\n        {\n            return false;\n        }\n\n        const nx = s * (lb.y - lt.y);\n        const ny = s * (lt.x - lb.x);\n        const n00 = (nx * x0) + (ny * y0);\n        const n10 = (nx * x1) + (ny * y0);\n        const n01 = (nx * x0) + (ny * y1);\n        const n11 = (nx * x1) + (ny * y1);\n\n        if (Math.max(n00, n10, n01, n11) <= (nx * lt.x) + (ny * lt.y)\n            || Math.min(n00, n10, n01, n11) >= (nx * rb.x) + (ny * rb.y))\n        {\n            return false;\n        }\n\n        const mx = s * (lt.y - rt.y);\n        const my = s * (rt.x - lt.x);\n        const m00 = (mx * x0) + (my * y0);\n        const m10 = (mx * x1) + (my * y0);\n        const m01 = (mx * x0) + (my * y1);\n        const m11 = (mx * x1) + (my * y1);\n\n        if (Math.max(m00, m10, m01, m11) <= (mx * lt.x) + (my * lt.y)\n            || Math.min(m00, m10, m01, m11) >= (mx * rb.x) + (my * rb.y))\n        {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Pads the rectangle making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     * @returns Returns itself.\n     */\n    pad(paddingX = 0, paddingY = paddingX): this\n    {\n        this.x -= paddingX;\n        this.y -= paddingY;\n\n        this.width += paddingX * 2;\n        this.height += paddingY * 2;\n\n        return this;\n    }\n\n    /**\n     * Fits this rectangle around the passed one.\n     * @param rectangle - The rectangle to fit.\n     * @returns Returns itself.\n     */\n    fit(rectangle: Rectangle): this\n    {\n        const x1 = Math.max(this.x, rectangle.x);\n        const x2 = Math.min(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.max(this.y, rectangle.y);\n        const y2 = Math.min(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = Math.max(x2 - x1, 0);\n        this.y = y1;\n        this.height = Math.max(y2 - y1, 0);\n\n        return this;\n    }\n\n    /**\n     * Enlarges rectangle that way its corners lie on grid\n     * @param resolution - resolution\n     * @param eps - precision\n     * @returns Returns itself.\n     */\n    ceil(resolution = 1, eps = 0.001): this\n    {\n        const x2 = Math.ceil((this.x + this.width - eps) * resolution) / resolution;\n        const y2 = Math.ceil((this.y + this.height - eps) * resolution) / resolution;\n\n        this.x = Math.floor((this.x + eps) * resolution) / resolution;\n        this.y = Math.floor((this.y + eps) * resolution) / resolution;\n\n        this.width = x2 - this.x;\n        this.height = y2 - this.y;\n\n        return this;\n    }\n\n    /**\n     * Enlarges this rectangle to include the passed rectangle.\n     * @param rectangle - The rectangle to include.\n     * @returns Returns itself.\n     */\n    enlarge(rectangle: Rectangle): this\n    {\n        const x1 = Math.min(this.x, rectangle.x);\n        const x2 = Math.max(this.x + this.width, rectangle.x + rectangle.width);\n        const y1 = Math.min(this.y, rectangle.y);\n        const y2 = Math.max(this.y + this.height, rectangle.y + rectangle.height);\n\n        this.x = x1;\n        this.width = x2 - x1;\n        this.y = y1;\n        this.height = y2 - y1;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Rectangle x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n","import type { IPointData } from './IPointData';\nimport type { IPoint } from './IPoint';\n\nexport interface ObservablePoint extends GlobalMixins.Point, IPoint {}\n\n/**\n * The ObservablePoint object represents a location in a two-dimensional coordinate system, where `x` represents\n * the position on the horizontal axis and `y` represents the position on the vertical axis.\n *\n * An `ObservablePoint` is a point that triggers a callback when the point's position is changed.\n * @memberof PIXI\n */\nexport class ObservablePoint<T = any> implements IPoint\n{\n    /** The callback function triggered when `x` and/or `y` are changed */\n    public cb: (this: T) => any;\n\n    /** The owner of the callback */\n    public scope: any;\n\n    _x: number;\n    _y: number;\n\n    /**\n     * Creates a new `ObservablePoint`\n     * @param cb - callback function triggered when `x` and/or `y` are changed\n     * @param scope - owner of callback\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=0] - position of the point on the y axis\n     */\n    constructor(cb: (this: T) => any, scope: T, x = 0, y = 0)\n    {\n        this._x = x;\n        this._y = y;\n\n        this.cb = cb;\n        this.scope = scope;\n    }\n\n    /**\n     * Creates a clone of this point.\n     * The callback and scope params can be overridden otherwise they will default\n     * to the clone object's values.\n     * @override\n     * @param cb - The callback function triggered when `x` and/or `y` are changed\n     * @param scope - The owner of the callback\n     * @returns a copy of this observable point\n     */\n    clone(cb = this.cb, scope = this.scope): ObservablePoint\n    {\n        return new ObservablePoint(cb, scope, this._x, this._y);\n    }\n\n    /**\n     * Sets the point to a new `x` and `y` position.\n     * If `y` is omitted, both `x` and `y` will be set to `x`.\n     * @param {number} [x=0] - position of the point on the x axis\n     * @param {number} [y=x] - position of the point on the y axis\n     * @returns The observable point instance itself\n     */\n    set(x = 0, y = x): this\n    {\n        if (this._x !== x || this._y !== y)\n        {\n            this._x = x;\n            this._y = y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies x and y from the given point (`p`)\n     * @param p - The point to copy from. Can be any of type that is or extends `IPointData`\n     * @returns The observable point instance itself\n     */\n    copyFrom(p: IPointData): this\n    {\n        if (this._x !== p.x || this._y !== p.y)\n        {\n            this._x = p.x;\n            this._y = p.y;\n            this.cb.call(this.scope);\n        }\n\n        return this;\n    }\n\n    /**\n     * Copies this point's x and y into that of the given point (`p`)\n     * @param p - The point to copy to. Can be any of type that is or extends `IPointData`\n     * @returns The point (`p`) with values updated\n     */\n    copyTo<T extends IPoint>(p: T): T\n    {\n        p.set(this._x, this._y);\n\n        return p;\n    }\n\n    /**\n     * Accepts another point (`p`) and returns `true` if the given point is equal to this point\n     * @param p - The point to check\n     * @returns Returns `true` if both `x` and `y` are equal\n     */\n    equals(p: IPointData): boolean\n    {\n        return (p.x === this._x) && (p.y === this._y);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:ObservablePoint x=${0} y=${0} scope=${this.scope}]`;\n    }\n    // #endif\n\n    /** Position of the observable point on the x axis. */\n    get x(): number\n    {\n        return this._x;\n    }\n\n    set x(value: number)\n    {\n        if (this._x !== value)\n        {\n            this._x = value;\n            this.cb.call(this.scope);\n        }\n    }\n\n    /** Position of the observable point on the y axis. */\n    get y(): number\n    {\n        return this._y;\n    }\n\n    set y(value: number)\n    {\n        if (this._y !== value)\n        {\n            this._y = value;\n            this.cb.call(this.scope);\n        }\n    }\n}\n","import { SHAPES } from './../const';\nimport { Rectangle } from './Rectangle';\n\n/**\n * The Circle object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nexport class Circle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.CIRC\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.CIRC;\n\n    /**\n     * @param x - The X coordinate of the center of this circle\n     * @param y - The Y coordinate of the center of this circle\n     * @param radius - The radius of the circle\n     */\n    constructor(x = 0, y = 0, radius = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.radius = radius;\n\n        this.type = SHAPES.CIRC;\n    }\n\n    /**\n     * Creates a clone of this Circle instance\n     * @returns A copy of the Circle\n     */\n    clone(): Circle\n    {\n        return new Circle(this.x, this.y, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this circle\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coordinates are within this Circle\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.radius <= 0)\n        {\n            return false;\n        }\n\n        const r2 = this.radius * this.radius;\n        let dx = (this.x - x);\n        let dy = (this.y - y);\n\n        dx *= dx;\n        dy *= dy;\n\n        return (dx + dy <= r2);\n    }\n\n    /**\n     * Returns the framing rectangle of the circle as a Rectangle object\n     * @returns The framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.radius, this.y - this.radius, this.radius * 2, this.radius * 2);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Circle x=${this.x} y=${this.y} radius=${this.radius}]`;\n    }\n    // #endif\n}\n","import { Rectangle } from './Rectangle';\nimport { SHAPES } from '../const';\n\n/**\n * The Ellipse object is used to help draw graphics and can also be used to specify a hit area for displayObjects.\n * @memberof PIXI\n */\nexport class Ellipse\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.ELIP\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.ELIP;\n\n    /**\n     * @param x - The X coordinate of the center of this ellipse\n     * @param y - The Y coordinate of the center of this ellipse\n     * @param halfWidth - The half width of this ellipse\n     * @param halfHeight - The half height of this ellipse\n     */\n    constructor(x = 0, y = 0, halfWidth = 0, halfHeight = 0)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = halfWidth;\n        this.height = halfHeight;\n\n        this.type = SHAPES.ELIP;\n    }\n\n    /**\n     * Creates a clone of this Ellipse instance\n     * @returns {PIXI.Ellipse} A copy of the ellipse\n     */\n    clone(): Ellipse\n    {\n        return new Ellipse(this.x, this.y, this.width, this.height);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this ellipse\n     * @param x - The X coordinate of the point to test\n     * @param y - The Y coordinate of the point to test\n     * @returns Whether the x/y coords are within this ellipse\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n\n        // normalize the coords to an ellipse with center 0,0\n        let normx = ((x - this.x) / this.width);\n        let normy = ((y - this.y) / this.height);\n\n        normx *= normx;\n        normy *= normy;\n\n        return (normx + normy <= 1);\n    }\n\n    /**\n     * Returns the framing rectangle of the ellipse as a Rectangle object\n     * @returns The framing rectangle\n     */\n    getBounds(): Rectangle\n    {\n        return new Rectangle(this.x - this.width, this.y - this.height, this.width, this.height);\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Ellipse x=${this.x} y=${this.y} width=${this.width} height=${this.height}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\nimport type { IPointData } from '../IPointData';\n\n/**\n * A class to define a shape via user defined coordinates.\n * @memberof PIXI\n */\nexport class Polygon\n{\n    /** An array of the points of this polygon. */\n    public points: number[];\n\n    /** `false` after moveTo, `true` after `closePath`. In all other cases it is `true`. */\n    public closeStroke: boolean;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.POLY\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.POLY;\n\n    constructor(points: IPointData[] | number[]);\n    constructor(...points: IPointData[] | number[]);\n\n    /**\n     * @param {PIXI.IPointData[]|number[]} points - This can be an array of Points\n     *  that form the polygon, a flat array of numbers that will be interpreted as [x,y, x,y, ...], or\n     *  the arguments passed can be all the points of the polygon e.g.\n     *  `new PIXI.Polygon(new PIXI.Point(), new PIXI.Point(), ...)`, or the arguments passed can be flat\n     *  x,y values e.g. `new Polygon(x,y, x,y, x,y, ...)` where `x` and `y` are Numbers.\n     */\n    constructor(...points: any[])\n    {\n        let flat: IPointData[] | number[] = Array.isArray(points[0]) ? points[0] : points;\n\n        // if this is an array of points, convert it to a flat array of numbers\n        if (typeof flat[0] !== 'number')\n        {\n            const p: number[] = [];\n\n            for (let i = 0, il = flat.length; i < il; i++)\n            {\n                p.push((flat[i] as IPointData).x, (flat[i] as IPointData).y);\n            }\n\n            flat = p;\n        }\n\n        this.points = flat as number[];\n        this.type = SHAPES.POLY;\n        this.closeStroke = true;\n    }\n\n    /**\n     * Creates a clone of this polygon.\n     * @returns - A copy of the polygon.\n     */\n    clone(): Polygon\n    {\n        const points = this.points.slice();\n        const polygon = new Polygon(points);\n\n        polygon.closeStroke = this.closeStroke;\n\n        return polygon;\n    }\n\n    /**\n     * Checks whether the x and y coordinates passed to this function are contained within this polygon.\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this polygon.\n     */\n    contains(x: number, y: number): boolean\n    {\n        let inside = false;\n\n        // use some raycasting to test hits\n        // https://github.com/substack/point-in-polygon/blob/master/index.js\n        const length = this.points.length / 2;\n\n        for (let i = 0, j = length - 1; i < length; j = i++)\n        {\n            const xi = this.points[i * 2];\n            const yi = this.points[(i * 2) + 1];\n            const xj = this.points[j * 2];\n            const yj = this.points[(j * 2) + 1];\n            const intersect = ((yi > y) !== (yj > y)) && (x < ((xj - xi) * ((y - yi) / (yj - yi))) + xi);\n\n            if (intersect)\n            {\n                inside = !inside;\n            }\n        }\n\n        return inside;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Polygon`\n            + `closeStroke=${this.closeStroke}`\n            + `points=${this.points.reduce((pointsDesc, currentPoint) => `${pointsDesc}, ${currentPoint}`, '')}]`;\n    }\n    // #endif\n}\n","import { SHAPES } from '../const';\n\n/**\n * The Rounded Rectangle object is an area that has nice rounded corners, as indicated by its\n * top-left corner point (x, y) and by its width and its height and its radius.\n * @memberof PIXI\n */\nexport class RoundedRectangle\n{\n    /** @default 0 */\n    public x: number;\n\n    /** @default 0 */\n    public y: number;\n\n    /** @default 0 */\n    public width: number;\n\n    /** @default 0 */\n    public height: number;\n\n    /** @default 20 */\n    public radius: number;\n\n    /**\n     * The type of the object, mainly used to avoid `instanceof` checks\n     * @default PIXI.SHAPES.RREC\n     * @see PIXI.SHAPES\n     */\n    public readonly type: SHAPES.RREC;\n\n    /**\n     * @param x - The X coordinate of the upper-left corner of the rounded rectangle\n     * @param y - The Y coordinate of the upper-left corner of the rounded rectangle\n     * @param width - The overall width of this rounded rectangle\n     * @param height - The overall height of this rounded rectangle\n     * @param radius - Controls the radius of the rounded corners\n     */\n    constructor(x = 0, y = 0, width = 0, height = 0, radius = 20)\n    {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        this.radius = radius;\n        this.type = SHAPES.RREC;\n    }\n\n    /**\n     * Creates a clone of this Rounded Rectangle.\n     * @returns - A copy of the rounded rectangle.\n     */\n    clone(): RoundedRectangle\n    {\n        return new RoundedRectangle(this.x, this.y, this.width, this.height, this.radius);\n    }\n\n    /**\n     * Checks whether the x and y coordinates given are contained within this Rounded Rectangle\n     * @param x - The X coordinate of the point to test.\n     * @param y - The Y coordinate of the point to test.\n     * @returns - Whether the x/y coordinates are within this Rounded Rectangle.\n     */\n    contains(x: number, y: number): boolean\n    {\n        if (this.width <= 0 || this.height <= 0)\n        {\n            return false;\n        }\n        if (x >= this.x && x <= this.x + this.width)\n        {\n            if (y >= this.y && y <= this.y + this.height)\n            {\n                const radius = Math.max(0, Math.min(this.radius, Math.min(this.width, this.height) / 2));\n\n                if ((y >= this.y + radius && y <= this.y + this.height - radius)\n                || (x >= this.x + radius && x <= this.x + this.width - radius))\n                {\n                    return true;\n                }\n                let dx = x - (this.x + radius);\n                let dy = y - (this.y + radius);\n                const radius2 = radius * radius;\n\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + this.width - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dy = y - (this.y + this.height - radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n                dx = x - (this.x + radius);\n                if ((dx * dx) + (dy * dy) <= radius2)\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:RoundedRectangle x=${this.x} y=${this.y}`\n            + `width=${this.width} height=${this.height} radius=${this.radius}]`;\n    }\n    // #endif\n}\n","import { Point } from './Point';\nimport { PI_2 } from './const';\n\nimport type { Transform } from './Transform';\nimport type { IPointData } from './IPointData';\n\n/**\n * The PixiJS Matrix as a class makes it a lot faster.\n *\n * Here is a representation of it:\n * ```js\n * | a | c | tx|\n * | b | d | ty|\n * | 0 | 0 | 1 |\n * ```\n * @memberof PIXI\n */\nexport class Matrix\n{\n    /** @default 1 */\n    public a: number;\n\n    /** @default 0 */\n    public b: number;\n\n    /** @default 0 */\n    public c: number;\n\n    /** @default 1 */\n    public d: number;\n\n    /** @default 0 */\n    public tx: number;\n\n    /** @default 0 */\n    public ty: number;\n\n    public array: Float32Array | null = null;\n\n    /**\n     * @param a - x scale\n     * @param b - y skew\n     * @param c - x skew\n     * @param d - y scale\n     * @param tx - x translation\n     * @param ty - y translation\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0)\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n    }\n\n    /**\n     * Creates a Matrix object based on the given array. The Element to Matrix mapping order is as follows:\n     *\n     * a = array[0]\n     * b = array[1]\n     * c = array[3]\n     * d = array[4]\n     * tx = array[2]\n     * ty = array[5]\n     * @param array - The array that the matrix will be populated from.\n     */\n    fromArray(array: number[]): void\n    {\n        this.a = array[0];\n        this.b = array[1];\n        this.c = array[3];\n        this.d = array[4];\n        this.tx = array[2];\n        this.ty = array[5];\n    }\n\n    /**\n     * Sets the matrix properties.\n     * @param a - Matrix component\n     * @param b - Matrix component\n     * @param c - Matrix component\n     * @param d - Matrix component\n     * @param tx - Matrix component\n     * @param ty - Matrix component\n     * @returns This matrix. Good for chaining method calls.\n     */\n    set(a: number, b: number, c: number, d: number, tx: number, ty: number): this\n    {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.tx = tx;\n        this.ty = ty;\n\n        return this;\n    }\n\n    /**\n     * Creates an array from the current Matrix object.\n     * @param transpose - Whether we need to transpose the matrix or not\n     * @param [out=new Float32Array(9)] - If provided the array will be assigned to out\n     * @returns The newly created array which contains the matrix\n     */\n    toArray(transpose: boolean, out?: Float32Array): Float32Array\n    {\n        if (!this.array)\n        {\n            this.array = new Float32Array(9);\n        }\n\n        const array = out || this.array;\n\n        if (transpose)\n        {\n            array[0] = this.a;\n            array[1] = this.b;\n            array[2] = 0;\n            array[3] = this.c;\n            array[4] = this.d;\n            array[5] = 0;\n            array[6] = this.tx;\n            array[7] = this.ty;\n            array[8] = 1;\n        }\n        else\n        {\n            array[0] = this.a;\n            array[1] = this.c;\n            array[2] = this.tx;\n            array[3] = this.b;\n            array[4] = this.d;\n            array[5] = this.ty;\n            array[6] = 0;\n            array[7] = 0;\n            array[8] = 1;\n        }\n\n        return array;\n    }\n\n    /**\n     * Get a new position with the current transformation applied.\n     * Can be used to go from a child's coordinate space to the world coordinate space. (e.g. rendering)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, transformed through this matrix\n     */\n    apply<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.a * x) + (this.c * y) + this.tx;\n        newPos.y = (this.b * x) + (this.d * y) + this.ty;\n\n        return newPos;\n    }\n\n    /**\n     * Get a new position with the inverse of the current transformation applied.\n     * Can be used to go from the world coordinate space to a child's coordinate space. (e.g. input)\n     * @param pos - The origin\n     * @param {PIXI.Point} [newPos] - The point that the new position is assigned to (allowed to be same as input)\n     * @returns {PIXI.Point} The new point, inverse-transformed through this matrix\n     */\n    applyInverse<P extends IPointData = Point>(pos: IPointData, newPos?: P): P\n    {\n        newPos = (newPos || new Point()) as P;\n\n        const id = 1 / ((this.a * this.d) + (this.c * -this.b));\n\n        const x = pos.x;\n        const y = pos.y;\n\n        newPos.x = (this.d * id * x) + (-this.c * id * y) + (((this.ty * this.c) - (this.tx * this.d)) * id);\n        newPos.y = (this.a * id * y) + (-this.b * id * x) + (((-this.ty * this.a) + (this.tx * this.b)) * id);\n\n        return newPos;\n    }\n\n    /**\n     * Translates the matrix on the x and y.\n     * @param x - How much to translate x by\n     * @param y - How much to translate y by\n     * @returns This matrix. Good for chaining method calls.\n     */\n    translate(x: number, y: number): this\n    {\n        this.tx += x;\n        this.ty += y;\n\n        return this;\n    }\n\n    /**\n     * Applies a scale transformation to the matrix.\n     * @param x - The amount to scale horizontally\n     * @param y - The amount to scale vertically\n     * @returns This matrix. Good for chaining method calls.\n     */\n    scale(x: number, y: number): this\n    {\n        this.a *= x;\n        this.d *= y;\n        this.c *= x;\n        this.b *= y;\n        this.tx *= x;\n        this.ty *= y;\n\n        return this;\n    }\n\n    /**\n     * Applies a rotation transformation to the matrix.\n     * @param angle - The angle in radians.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    rotate(angle: number): this\n    {\n        const cos = Math.cos(angle);\n        const sin = Math.sin(angle);\n\n        const a1 = this.a;\n        const c1 = this.c;\n        const tx1 = this.tx;\n\n        this.a = (a1 * cos) - (this.b * sin);\n        this.b = (a1 * sin) + (this.b * cos);\n        this.c = (c1 * cos) - (this.d * sin);\n        this.d = (c1 * sin) + (this.d * cos);\n        this.tx = (tx1 * cos) - (this.ty * sin);\n        this.ty = (tx1 * sin) + (this.ty * cos);\n\n        return this;\n    }\n\n    /**\n     * Appends the given Matrix to this Matrix.\n     * @param matrix - The matrix to append.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    append(matrix: Matrix): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n\n        this.a = (matrix.a * a1) + (matrix.b * c1);\n        this.b = (matrix.a * b1) + (matrix.b * d1);\n        this.c = (matrix.c * a1) + (matrix.d * c1);\n        this.d = (matrix.c * b1) + (matrix.d * d1);\n\n        this.tx = (matrix.tx * a1) + (matrix.ty * c1) + this.tx;\n        this.ty = (matrix.tx * b1) + (matrix.ty * d1) + this.ty;\n\n        return this;\n    }\n\n    /**\n     * Sets the matrix based on all the available properties\n     * @param x - Position on the x axis\n     * @param y - Position on the y axis\n     * @param pivotX - Pivot on the x axis\n     * @param pivotY - Pivot on the y axis\n     * @param scaleX - Scale on the x axis\n     * @param scaleY - Scale on the y axis\n     * @param rotation - Rotation in radians\n     * @param skewX - Skew on the x axis\n     * @param skewY - Skew on the y axis\n     * @returns This matrix. Good for chaining method calls.\n     */\n    setTransform(x: number, y: number, pivotX: number, pivotY: number, scaleX: number,\n        scaleY: number, rotation: number, skewX: number, skewY: number): this\n    {\n        this.a = Math.cos(rotation + skewY) * scaleX;\n        this.b = Math.sin(rotation + skewY) * scaleX;\n        this.c = -Math.sin(rotation - skewX) * scaleY;\n        this.d = Math.cos(rotation - skewX) * scaleY;\n\n        this.tx = x - ((pivotX * this.a) + (pivotY * this.c));\n        this.ty = y - ((pivotX * this.b) + (pivotY * this.d));\n\n        return this;\n    }\n\n    /**\n     * Prepends the given Matrix to this Matrix.\n     * @param matrix - The matrix to prepend\n     * @returns This matrix. Good for chaining method calls.\n     */\n    prepend(matrix: Matrix): this\n    {\n        const tx1 = this.tx;\n\n        if (matrix.a !== 1 || matrix.b !== 0 || matrix.c !== 0 || matrix.d !== 1)\n        {\n            const a1 = this.a;\n            const c1 = this.c;\n\n            this.a = (a1 * matrix.a) + (this.b * matrix.c);\n            this.b = (a1 * matrix.b) + (this.b * matrix.d);\n            this.c = (c1 * matrix.a) + (this.d * matrix.c);\n            this.d = (c1 * matrix.b) + (this.d * matrix.d);\n        }\n\n        this.tx = (tx1 * matrix.a) + (this.ty * matrix.c) + matrix.tx;\n        this.ty = (tx1 * matrix.b) + (this.ty * matrix.d) + matrix.ty;\n\n        return this;\n    }\n\n    /**\n     * Decomposes the matrix (x, y, scaleX, scaleY, and rotation) and sets the properties on to a transform.\n     * @param transform - The transform to apply the properties to.\n     * @returns The transform with the newly applied properties\n     */\n    decompose(transform: Transform): Transform\n    {\n        // sort out rotation / skew..\n        const a = this.a;\n        const b = this.b;\n        const c = this.c;\n        const d = this.d;\n        const pivot = transform.pivot;\n\n        const skewX = -Math.atan2(-c, d);\n        const skewY = Math.atan2(b, a);\n\n        const delta = Math.abs(skewX + skewY);\n\n        if (delta < 0.00001 || Math.abs(PI_2 - delta) < 0.00001)\n        {\n            transform.rotation = skewY;\n            transform.skew.x = transform.skew.y = 0;\n        }\n        else\n        {\n            transform.rotation = 0;\n            transform.skew.x = skewX;\n            transform.skew.y = skewY;\n        }\n\n        // next set scale\n        transform.scale.x = Math.sqrt((a * a) + (b * b));\n        transform.scale.y = Math.sqrt((c * c) + (d * d));\n\n        // next set position\n        transform.position.x = this.tx + ((pivot.x * a) + (pivot.y * c));\n        transform.position.y = this.ty + ((pivot.x * b) + (pivot.y * d));\n\n        return transform;\n    }\n\n    /**\n     * Inverts this matrix\n     * @returns This matrix. Good for chaining method calls.\n     */\n    invert(): this\n    {\n        const a1 = this.a;\n        const b1 = this.b;\n        const c1 = this.c;\n        const d1 = this.d;\n        const tx1 = this.tx;\n        const n = (a1 * d1) - (b1 * c1);\n\n        this.a = d1 / n;\n        this.b = -b1 / n;\n        this.c = -c1 / n;\n        this.d = a1 / n;\n        this.tx = ((c1 * this.ty) - (d1 * tx1)) / n;\n        this.ty = -((a1 * this.ty) - (b1 * tx1)) / n;\n\n        return this;\n    }\n\n    /**\n     * Resets this Matrix to an identity (default) matrix.\n     * @returns This matrix. Good for chaining method calls.\n     */\n    identity(): this\n    {\n        this.a = 1;\n        this.b = 0;\n        this.c = 0;\n        this.d = 1;\n        this.tx = 0;\n        this.ty = 0;\n\n        return this;\n    }\n\n    /**\n     * Creates a new Matrix object with the same values as this one.\n     * @returns A copy of this matrix. Good for chaining method calls.\n     */\n    clone(): Matrix\n    {\n        const matrix = new Matrix();\n\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the given matrix to be the same as the ones in this matrix\n     * @param matrix - The matrix to copy to.\n     * @returns The matrix given in parameter with its values updated.\n     */\n    copyTo(matrix: Matrix): Matrix\n    {\n        matrix.a = this.a;\n        matrix.b = this.b;\n        matrix.c = this.c;\n        matrix.d = this.d;\n        matrix.tx = this.tx;\n        matrix.ty = this.ty;\n\n        return matrix;\n    }\n\n    /**\n     * Changes the values of the matrix to be the same as the ones in given matrix\n     * @param {PIXI.Matrix} matrix - The matrix to copy from.\n     * @returns {PIXI.Matrix} this\n     */\n    copyFrom(matrix: Matrix): this\n    {\n        this.a = matrix.a;\n        this.b = matrix.b;\n        this.c = matrix.c;\n        this.d = matrix.d;\n        this.tx = matrix.tx;\n        this.ty = matrix.ty;\n\n        return this;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Matrix a=${this.a} b=${this.b} c=${this.c} d=${this.d} tx=${this.tx} ty=${this.ty}]`;\n    }\n    // #endif\n\n    /**\n     * A default (identity) matrix\n     * @readonly\n     */\n    static get IDENTITY(): Matrix\n    {\n        return new Matrix();\n    }\n\n    /**\n     * A temp matrix\n     * @readonly\n     */\n    static get TEMP_MATRIX(): Matrix\n    {\n        return new Matrix();\n    }\n}\n","// Your friendly neighbour https://en.wikipedia.org/wiki/Dihedral_group\n//\n// This file implements the dihedral group of order 16, also called\n// of degree 8. That's why its called groupD8.\n\nimport { Matrix } from './Matrix';\n\n/*\n * Transform matrix for operation n is:\n * | ux | vx |\n * | uy | vy |\n */\n\nconst ux = [1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1, 0, 1];\nconst uy = [0, 1, 1, 1, 0, -1, -1, -1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vx = [0, -1, -1, -1, 0, 1, 1, 1, 0, 1, 1, 1, 0, -1, -1, -1];\nconst vy = [1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, 1, 1, 1, 0, -1];\n\n/**\n * [Cayley Table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n * for the composition of each rotation in the dihederal group D8.\n * @type {number[][]}\n * @private\n */\nconst rotationCayley: number[][] = [];\n\n/**\n * Matrices for each `GD8Symmetry` rotation.\n * @type {PIXI.Matrix[]}\n * @private\n */\nconst rotationMatrices: Matrix[] = [];\n\n/*\n * Alias for {@code Math.sign}.\n */\nconst signum = Math.sign;\n\n/*\n * Initializes `rotationCayley` and `rotationMatrices`. It is called\n * only once below.\n */\nfunction init(): void\n{\n    for (let i = 0; i < 16; i++)\n    {\n        const row: number[] = [];\n\n        rotationCayley.push(row);\n\n        for (let j = 0; j < 16; j++)\n        {\n            /* Multiplies rotation matrices i and j. */\n            const _ux = signum((ux[i] * ux[j]) + (vx[i] * uy[j]));\n            const _uy = signum((uy[i] * ux[j]) + (vy[i] * uy[j]));\n            const _vx = signum((ux[i] * vx[j]) + (vx[i] * vy[j]));\n            const _vy = signum((uy[i] * vx[j]) + (vy[i] * vy[j]));\n\n            /* Finds rotation matrix matching the product and pushes it. */\n            for (let k = 0; k < 16; k++)\n            {\n                if (ux[k] === _ux && uy[k] === _uy\n                      && vx[k] === _vx && vy[k] === _vy)\n                {\n                    row.push(k);\n                    break;\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < 16; i++)\n    {\n        const mat = new Matrix();\n\n        mat.set(ux[i], uy[i], vx[i], vy[i], 0, 0);\n        rotationMatrices.push(mat);\n    }\n}\n\ninit();\n\ntype GD8Symmetry = number;\n/**\n * @memberof PIXI\n * @typedef {number} GD8Symmetry\n * @see PIXI.groupD8\n */\n\n/**\n * Implements the dihedral group D8, which is similar to\n * [group D4]{@link http://mathworld.wolfram.com/DihedralGroupD4.html};\n * D8 is the same but with diagonals, and it is used for texture\n * rotations.\n *\n * The directions the U- and V- axes after rotation\n * of an angle of `a: GD8Constant` are the vectors `(uX(a), uY(a))`\n * and `(vX(a), vY(a))`. These aren't necessarily unit vectors.\n *\n * **Origin:**<br>\n *  This is the small part of gameofbombs.com portal system. It works.\n * @see PIXI.groupD8.E\n * @see PIXI.groupD8.SE\n * @see PIXI.groupD8.S\n * @see PIXI.groupD8.SW\n * @see PIXI.groupD8.W\n * @see PIXI.groupD8.NW\n * @see PIXI.groupD8.N\n * @see PIXI.groupD8.NE\n * @author Ivan @ivanpopelyshev\n * @namespace PIXI.groupD8\n * @memberof PIXI\n */\nexport const groupD8 = {\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 0°       | East      |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    E: 0,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 45°↻     | Southeast |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SE: 1,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 90°↻     | South     |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    S: 2,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 135°↻    | Southwest |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    SW: 3,\n\n    /**\n     * | Rotation | Direction |\n     * |----------|-----------|\n     * | 180°     | West      |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    W: 4,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -135°/225°↻ | Northwest    |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NW: 5,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -90°/270°↻  | North        |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    N: 6,\n\n    /**\n     * | Rotation    | Direction    |\n     * |-------------|--------------|\n     * | -45°/315°↻  | Northeast    |\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    NE: 7,\n\n    /**\n     * Reflection about Y-axis.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_VERTICAL: 8,\n\n    /**\n     * Reflection about the main diagonal.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MAIN_DIAGONAL: 10,\n\n    /**\n     * Reflection about X-axis.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    MIRROR_HORIZONTAL: 12,\n\n    /**\n     * Reflection about reverse diagonal.\n     * @memberof PIXI.groupD8\n     * @constant {PIXI.GD8Symmetry}\n     */\n    REVERSE_DIAGONAL: 14,\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the U-axis\n     *    after rotating the axes.\n     */\n    uX: (ind: GD8Symmetry): GD8Symmetry => ux[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the U-axis\n     *    after rotating the axes.\n     */\n    uY: (ind: GD8Symmetry): GD8Symmetry => uy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The X-component of the V-axis\n     *    after rotating the axes.\n     */\n    vX: (ind: GD8Symmetry): GD8Symmetry => vx[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} ind - sprite rotation angle.\n     * @returns {PIXI.GD8Symmetry} The Y-component of the V-axis\n     *    after rotating the axes.\n     */\n    vY: (ind: GD8Symmetry): GD8Symmetry => vy[ind],\n\n    /**\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - symmetry whose opposite\n     *   is needed. Only rotations have opposite symmetries while\n     *   reflections don't.\n     * @returns {PIXI.GD8Symmetry} The opposite symmetry of `rotation`\n     */\n    inv: (rotation: GD8Symmetry): GD8Symmetry =>\n    {\n        if (rotation & 8)// true only if between 8 & 15 (reflections)\n        {\n            return rotation & 15;// or rotation % 16\n        }\n\n        return (-rotation) & 7;// or (8 - rotation) % 8\n    },\n\n    /**\n     * Composes the two D8 operations.\n     *\n     * Taking `^` as reflection:\n     *\n     * |       | E=0 | S=2 | W=4 | N=6 | E^=8 | S^=10 | W^=12 | N^=14 |\n     * |-------|-----|-----|-----|-----|------|-------|-------|-------|\n     * | E=0   | E   | S   | W   | N   | E^   | S^    | W^    | N^    |\n     * | S=2   | S   | W   | N   | E   | S^   | W^    | N^    | E^    |\n     * | W=4   | W   | N   | E   | S   | W^   | N^    | E^    | S^    |\n     * | N=6   | N   | E   | S   | W   | N^   | E^    | S^    | W^    |\n     * | E^=8  | E^  | N^  | W^  | S^  | E    | N     | W     | S     |\n     * | S^=10 | S^  | E^  | N^  | W^  | S    | E     | N     | W     |\n     * | W^=12 | W^  | S^  | E^  | N^  | W    | S     | E     | N     |\n     * | N^=14 | N^  | W^  | S^  | E^  | N    | W     | S     | E     |\n     *\n     * [This is a Cayley table]{@link https://en.wikipedia.org/wiki/Cayley_table}\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation, which\n     *   is the row in the above cayley table.\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation, which\n     *   is the column in the above cayley table.\n     * @returns {PIXI.GD8Symmetry} Composed operation\n     */\n    add: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][rotationFirst]\n    ),\n\n    /**\n     * Reverse of `add`.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotationSecond - Second operation\n     * @param {PIXI.GD8Symmetry} rotationFirst - First operation\n     * @returns {PIXI.GD8Symmetry} Result\n     */\n    sub: (rotationSecond: GD8Symmetry, rotationFirst: GD8Symmetry): GD8Symmetry => (\n        rotationCayley[rotationSecond][groupD8.inv(rotationFirst)]\n    ),\n\n    /**\n     * Adds 180 degrees to rotation, which is a commutative\n     * operation.\n     * @memberof PIXI.groupD8\n     * @param {number} rotation - The number to rotate.\n     * @returns {number} Rotated number\n     */\n    rotate180: (rotation: number): number => rotation ^ 4,\n\n    /**\n     * Checks if the rotation angle is vertical, i.e. south\n     * or north. It doesn't work for reflections.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.GD8Symmetry} rotation - The number to check.\n     * @returns {boolean} Whether or not the direction is vertical\n     */\n    isVertical: (rotation: GD8Symmetry): boolean => (rotation & 3) === 2, // rotation % 4 === 2\n\n    /**\n     * Approximates the vector `V(dx,dy)` into one of the\n     * eight directions provided by `groupD8`.\n     * @memberof PIXI.groupD8\n     * @param {number} dx - X-component of the vector\n     * @param {number} dy - Y-component of the vector\n     * @returns {PIXI.GD8Symmetry} Approximation of the vector into\n     *  one of the eight symmetries.\n     */\n    byDirection: (dx: number, dy: number): GD8Symmetry =>\n    {\n        if (Math.abs(dx) * 2 <= Math.abs(dy))\n        {\n            if (dy >= 0)\n            {\n                return groupD8.S;\n            }\n\n            return groupD8.N;\n        }\n        else if (Math.abs(dy) * 2 <= Math.abs(dx))\n        {\n            if (dx > 0)\n            {\n                return groupD8.E;\n            }\n\n            return groupD8.W;\n        }\n        else if (dy > 0)\n        {\n            if (dx > 0)\n            {\n                return groupD8.SE;\n            }\n\n            return groupD8.SW;\n        }\n        else if (dx > 0)\n        {\n            return groupD8.NE;\n        }\n\n        return groupD8.NW;\n    },\n\n    /**\n     * Helps sprite to compensate texture packer rotation.\n     * @memberof PIXI.groupD8\n     * @param {PIXI.Matrix} matrix - sprite world matrix\n     * @param {PIXI.GD8Symmetry} rotation - The rotation factor to use.\n     * @param {number} tx - sprite anchoring\n     * @param {number} ty - sprite anchoring\n     */\n    matrixAppendRotationInv: (matrix: Matrix, rotation: GD8Symmetry, tx = 0, ty = 0): void =>\n    {\n        // Packer used \"rotation\", we use \"inv(rotation)\"\n        const mat: Matrix = rotationMatrices[groupD8.inv(rotation)];\n\n        mat.tx = tx;\n        mat.ty = ty;\n        matrix.append(mat);\n    },\n};\n","/**\n * Collection of valid extension types.\n * @memberof PIXI\n * @property {string} Application - Application plugins\n * @property {string} RendererPlugin - Plugins for Renderer\n * @property {string} CanvasRendererPlugin - Plugins for CanvasRenderer\n * @property {string} Loader - Plugins to use with Loader\n * @property {string} LoadParser - Parsers for Assets loader.\n * @property {string} ResolveParser - Parsers for Assets resolvers.\n * @property {string} CacheParser - Parsers for Assets cache.\n */\nenum ExtensionType\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    Application = 'application',\n    RendererPlugin = 'renderer-webgl-plugin',\n    CanvasRendererPlugin = 'renderer-canvas-plugin',\n    Loader = 'loader',\n    LoadParser = 'load-parser',\n    ResolveParser = 'resolve-parser',\n    CacheParser = 'cache-parser',\n    DetectionParser = 'detection-parser',\n}\n\ninterface ExtensionMetadataDetails\n{\n    type: ExtensionType | ExtensionType[];\n    name?: string;\n}\n\ntype ExtensionMetadata = ExtensionType | ExtensionMetadataDetails;\n\n/**\n * Format when registering an extension. Generally, the extension\n * should have these values as `extension` static property,\n * but you can override name or type by providing an object.\n * @memberof PIXI\n */\ninterface ExtensionFormatLoose\n{\n    /** The extension type, can be multiple types */\n    type: ExtensionType | ExtensionType[];\n    /** Optional. Some plugins provide an API name/property, such as Renderer plugins */\n    name?: string;\n    /** Reference to the plugin object/class */\n    ref: any;\n}\n\n/**\n * Strict extension format that is used internally for registrations.\n * @memberof PIXI\n */\ninterface ExtensionFormat extends ExtensionFormatLoose\n{\n    /** The extension type, always expressed as multiple, even if a single */\n    type: ExtensionType[];\n}\n\ntype ExtensionHandler = (extension: ExtensionFormat) => void;\n\n/**\n * Convert input into extension format data.\n * @ignore\n */\nconst normalizeExtension = (ext: ExtensionFormatLoose | any): ExtensionFormat =>\n{\n    // Class/Object submission, use extension object\n    if (typeof ext === 'function' || (typeof ext === 'object' && ext.extension))\n    {\n        // #if _DEBUG\n        if (!ext.extension)\n        {\n            throw new Error('Extension class must have an extension object');\n        }\n        // #endif\n        const metadata: ExtensionMetadataDetails = (typeof ext.extension !== 'object')\n            ? { type: ext.extension }\n            : ext.extension;\n\n        ext = { ...metadata, ref: ext };\n    }\n    if (typeof ext === 'object')\n    {\n        ext = { ...ext };\n    }\n    else\n    {\n        throw new Error('Invalid extension type');\n    }\n\n    if (typeof ext.type === 'string')\n    {\n        ext.type = [ext.type];\n    }\n\n    return ext;\n};\n\n/**\n * Global registration of all PixiJS extensions. One-stop-shop for extensibility.\n * @memberof PIXI\n * @namespace extensions\n */\nconst extensions = {\n\n    /** @ignore */\n    _addHandlers: null as Record<ExtensionType, ExtensionHandler>,\n\n    /** @ignore */\n    _removeHandlers: null as Record<ExtensionType, ExtensionHandler>,\n\n    /** @ignore */\n    _queue: {} as Record<ExtensionType, ExtensionFormat[]>,\n\n    /**\n     * Remove extensions from PixiJS.\n     * @param extensions - Extensions to be removed.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    remove(...extensions: Array<ExtensionFormatLoose | any>)\n    {\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) => this._removeHandlers[type]?.(ext));\n        });\n\n        return this;\n    },\n\n    /**\n     * Register new extensions with PixiJS.\n     * @param extensions - The spread of extensions to add to PixiJS.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    add(...extensions: Array<ExtensionFormatLoose | any>)\n    {\n        // Handle any extensions either passed as class w/ data or as data\n        extensions.map(normalizeExtension).forEach((ext) =>\n        {\n            ext.type.forEach((type) =>\n            {\n                const handlers = this._addHandlers;\n                const queue = this._queue;\n\n                if (!handlers[type])\n                {\n                    queue[type] = queue[type] || [];\n                    queue[type].push(ext);\n                }\n                else\n                {\n                    handlers[type](ext);\n                }\n            });\n        });\n\n        return this;\n    },\n\n    /**\n     * Internal method to handle extensions by name.\n     * @param type - The extension type.\n     * @param onAdd  - Function for handling when extensions are added/registered passes {@link PIXI.ExtensionFormat}.\n     * @param onRemove  - Function for handling when extensions are removed/unregistered passes {@link PIXI.ExtensionFormat}.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handle(type: ExtensionType, onAdd: ExtensionHandler, onRemove: ExtensionHandler)\n    {\n        const addHandlers = this._addHandlers = this._addHandlers || {} as Record<ExtensionType, ExtensionHandler>;\n        const removeHandlers = this._removeHandlers = this._removeHandlers || {} as Record<ExtensionType, ExtensionHandler>;\n\n        // #if _DEBUG\n        if (addHandlers[type] || removeHandlers[type])\n        {\n            throw new Error(`Extension type ${type} already has a handler`);\n        }\n        // #endif\n\n        addHandlers[type] = onAdd;\n        removeHandlers[type] = onRemove;\n\n        // Process the queue\n        const queue = this._queue;\n\n        // Process any plugins that have been registered before the handler\n        if (queue[type])\n        {\n            queue[type].forEach((ext) => onAdd(ext));\n            delete queue[type];\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle a type, but using a map by `name` property.\n     * @param type - Type of extension to handle.\n     * @param map - The object map of named extensions.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByMap(type: ExtensionType, map: Record<string, any>)\n    {\n        return this.handle(type,\n            (extension) =>\n            {\n                map[extension.name] = extension.ref;\n            },\n            (extension) =>\n            {\n                delete map[extension.name];\n            }\n        );\n    },\n\n    /**\n     * Handle a type, but using a list of extensions.\n     * @param type - Type of extension to handle.\n     * @param list - The list of extensions.\n     * @returns {PIXI.extensions} For chaining.\n     */\n    handleByList(type: ExtensionType, list: any[])\n    {\n        return this.handle(\n            type,\n            (extension) =>\n            {\n                if (list.includes(extension.ref))\n                {\n                    return;\n                }\n\n                list.push(extension.ref);\n                // TODO: remove me later, only added for @pixi/loaders\n                if (type === ExtensionType.Loader)\n                {\n                    extension.ref.add?.();\n                }\n            },\n            (extension) =>\n            {\n                const index = list.indexOf(extension.ref);\n\n                if (index !== -1)\n                {\n                    list.splice(index, 1);\n                }\n            }\n        );\n    },\n};\n\nexport {\n    extensions,\n    ExtensionType,\n};\nexport type {\n    ExtensionHandler,\n    ExtensionMetadata,\n    ExtensionFormatLoose,\n    ExtensionFormat,\n};\n","import { ObservablePoint } from './ObservablePoint';\nimport { Matrix } from './Matrix';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface Transform extends GlobalMixins.Transform {}\n\n/**\n * Transform that takes care about its versions.\n * @memberof PIXI\n */\nexport class Transform\n{\n    /** A default (identity) transform. */\n    public static readonly IDENTITY = new Transform();\n\n    /** The world transformation matrix. */\n    public worldTransform: Matrix;\n\n    /** The local transformation matrix. */\n    public localTransform: Matrix;\n\n    /** The coordinate of the object relative to the local coordinates of the parent. */\n    public position: ObservablePoint;\n\n    /** The scale factor of the object. */\n    public scale: ObservablePoint;\n\n    /** The pivot point of the displayObject that it rotates around. */\n    public pivot: ObservablePoint;\n\n    /** The skew amount, on the x and y axis. */\n    public skew: ObservablePoint;\n\n    /** The locally unique ID of the parent's world transform used to calculate the current world transformation matrix. */\n    public _parentID: number;\n\n    /** The locally unique ID of the world transform. */\n    _worldID: number;\n\n    /** The rotation amount. */\n    protected _rotation: number;\n\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _cx: number;\n\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     */\n    protected _sx: number;\n\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _cy: number;\n\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     */\n    protected _sy: number;\n\n    /** The locally unique ID of the local transform. */\n    protected _localID: number;\n\n    /** The locally unique ID of the local transform used to calculate the current local transformation matrix. */\n    protected _currentLocalID: number;\n\n    constructor()\n    {\n        this.worldTransform = new Matrix();\n        this.localTransform = new Matrix();\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n        this._cx = 1;\n        this._sx = 0;\n        this._cy = 0;\n        this._sy = 1;\n        this._localID = 0;\n        this._currentLocalID = 0;\n\n        this._worldID = 0;\n        this._parentID = 0;\n    }\n\n    /** Called when a value changes. */\n    protected onChange(): void\n    {\n        this._localID++;\n    }\n\n    /** Called when the skew or the rotation changes. */\n    protected updateSkew(): void\n    {\n        this._cx = Math.cos(this._rotation + this.skew.y);\n        this._sx = Math.sin(this._rotation + this.skew.y);\n        this._cy = -Math.sin(this._rotation - this.skew.x); // cos, added PI/2\n        this._sy = Math.cos(this._rotation - this.skew.x); // sin, added PI/2\n\n        this._localID++;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/math:Transform `\n            + `position=(${this.position.x}, ${this.position.y}) `\n            + `rotation=${this.rotation} `\n            + `scale=(${this.scale.x}, ${this.scale.y}) `\n            + `skew=(${this.skew.x}, ${this.skew.y}) `\n            + `]`;\n    }\n    // #endif\n\n    /** Updates the local transformation matrix. */\n    updateLocalTransform(): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the local and the world transformation matrices.\n     * @param parentTransform - The parent transform\n     */\n    updateTransform(parentTransform: Transform): void\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            lt.a = this._cx * this.scale.x;\n            lt.b = this._sx * this.scale.x;\n            lt.c = this._cy * this.scale.y;\n            lt.d = this._sy * this.scale.y;\n\n            lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n            lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            const pt = parentTransform.worldTransform;\n            const wt = this.worldTransform;\n\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     * @param matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix: Matrix): void\n    {\n        matrix.decompose(this);\n        this._localID++;\n    }\n\n    /** The rotation of the object in radians. */\n    get rotation(): number\n    {\n        return this._rotation;\n    }\n\n    set rotation(value: number)\n    {\n        if (this._rotation !== value)\n        {\n            this._rotation = value;\n            this.updateSkew();\n        }\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @enum {number}\n * @property {number} [INTERACTION=50] Highest priority, used for {@link PIXI.InteractionManager}\n * @property {number} [HIGH=25] High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} [NORMAL=0] Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} [LOW=-25] Low priority used for {@link PIXI.Application} rendering.\n * @property {number} [UTILITY=-50] Lowest priority used for {@link PIXI.BasePrepare} utility.\n */\nexport enum UPDATE_PRIORITY\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    INTERACTION = 50,\n    HIGH = 25,\n    NORMAL = 0,\n    LOW = -25,\n    UTILITY = -50,\n}\n","/**\n * A Runner is a highly performant and simple alternative to signals. Best used in situations\n * where events are dispatched to many objects at high frequency (say every frame!)\n *\n *\n * like a signal..\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myObject = {\n *     loaded: new Runner('loaded')\n * }\n *\n * const listener = {\n *     loaded: function(){\n *         // thin\n *     }\n * }\n *\n * myObject.loaded.add(listener);\n *\n * myObject.loaded.emit();\n * ```\n *\n * Or for handling calling the same function on many items\n * ```\n * import { Runner } from '@pixi/runner';\n *\n * const myGame = {\n *     update: new Runner('update')\n * }\n *\n * const gameObject = {\n *     update: function(time){\n *         // update my gamey state\n *     }\n * }\n *\n * myGame.update.add(gameObject);\n *\n * myGame.update.emit(time);\n * ```\n * @memberof PIXI\n */\nexport class Runner\n{\n    public items: any[];\n    private _name: string;\n    private _aliasCount: number;\n\n    /**\n     * @param name - The function name that will be executed on the listeners added to this Runner.\n     */\n    constructor(name: string)\n    {\n        this.items = [];\n        this._name = name;\n        this._aliasCount = 0;\n    }\n\n    /* eslint-disable jsdoc/require-param, jsdoc/check-param-names */\n    /**\n     * Dispatch/Broadcast Runner to all listeners added to the queue.\n     * @param {...any} params - (optional) parameters to pass to each listener\n     */\n    /*  eslint-enable jsdoc/require-param, jsdoc/check-param-names */\n    public emit(a0?: unknown, a1?: unknown, a2?: unknown, a3?: unknown,\n        a4?: unknown, a5?: unknown, a6?: unknown, a7?: unknown): this\n    {\n        if (arguments.length > 8)\n        {\n            throw new Error('max arguments reached');\n        }\n\n        const { name, items } = this;\n\n        this._aliasCount++;\n\n        for (let i = 0, len = items.length; i < len; i++)\n        {\n            items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n        }\n\n        if (items === this.items)\n        {\n            this._aliasCount--;\n        }\n\n        return this;\n    }\n\n    private ensureNonAliasedItems(): void\n    {\n        if (this._aliasCount > 0 && this.items.length > 1)\n        {\n            this._aliasCount = 0;\n            this.items = this.items.slice(0);\n        }\n    }\n\n    /**\n     * Add a listener to the Runner\n     *\n     * Runners do not need to have scope or functions passed to them.\n     * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n     * as the name provided to the Runner when it was created.\n     *\n     * Eg A listener passed to this Runner will require a 'complete' function.\n     *\n     * ```\n     * import { Runner } from '@pixi/runner';\n     *\n     * const complete = new Runner('complete');\n     * ```\n     *\n     * The scope used will be the object itself.\n     * @param {any} item - The object that will be listening.\n     */\n    public add(item: unknown): this\n    {\n        if ((item as any)[this._name])\n        {\n            this.ensureNonAliasedItems();\n            this.remove(item);\n            this.items.push(item);\n        }\n\n        return this;\n    }\n\n    /**\n     * Remove a single listener from the dispatch queue.\n     * @param {any} item - The listener that you would like to remove.\n     */\n    public remove(item: unknown): this\n    {\n        const index = this.items.indexOf(item);\n\n        if (index !== -1)\n        {\n            this.ensureNonAliasedItems();\n            this.items.splice(index, 1);\n        }\n\n        return this;\n    }\n\n    /**\n     * Check to see if the listener is already in the Runner\n     * @param {any} item - The listener that you would like to check.\n     */\n    public contains(item: unknown): boolean\n    {\n        return this.items.indexOf(item) !== -1;\n    }\n\n    /** Remove all listeners from the Runner */\n    public removeAll(): this\n    {\n        this.ensureNonAliasedItems();\n        this.items.length = 0;\n\n        return this;\n    }\n\n    /** Remove all references, don't use after this. */\n    public destroy(): void\n    {\n        this.removeAll();\n        this.items = null;\n        this._name = null;\n    }\n\n    /**\n     * `true` if there are no this Runner contains no listeners\n     * @readonly\n     */\n    public get empty(): boolean\n    {\n        return this.items.length === 0;\n    }\n\n    /**\n     * The name of the runner.\n     * @readonly\n     */\n    public get name(): string\n    {\n        return this._name;\n    }\n}\n\nObject.defineProperties(Runner.prototype, {\n    /**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method dispatch\n     * @see PIXI.Runner#emit\n     */\n    dispatch: { value: Runner.prototype.emit },\n    /**\n     * Alias for `emit`\n     * @memberof PIXI.Runner#\n     * @method run\n     * @see PIXI.Runner#emit\n     */\n    run: { value: Runner.prototype.emit },\n});\n","import { settings } from '@pixi/settings';\n\n/**\n * Target frames per millisecond.\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */\nsettings.TARGET_FPMS = 0.06;\n\nexport { settings };\n","import type { TickerCallback } from './Ticker';\n\n/**\n * Internal class for handling the priority sorting of ticker handlers.\n * @private\n * @class\n * @memberof PIXI\n */\nexport class TickerListener<T = any>\n{\n    /** The current priority. */\n    public priority: number;\n    /** The next item in chain. */\n    public next: TickerListener = null;\n    /** The previous item in chain. */\n    public previous: TickerListener = null;\n\n    /** The handler function to execute. */\n    private fn: TickerCallback<T>;\n    /** The calling to execute. */\n    private context: T;\n    /** If this should only execute once. */\n    private once: boolean;\n    /** `true` if this listener has been destroyed already. */\n    private _destroyed = false;\n\n    /**\n     * Constructor\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param priority - The priority for emitting\n     * @param once - If the handler should fire once\n     */\n    constructor(fn: TickerCallback<T>, context: T = null, priority = 0, once = false)\n    {\n        this.fn = fn;\n        this.context = context;\n        this.priority = priority;\n        this.once = once;\n    }\n\n    /**\n     * Simple compare function to figure out if a function and context match.\n     * @private\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @returns `true` if the listener match the arguments\n     */\n    match(fn: TickerCallback<T>, context: any = null): boolean\n    {\n        return this.fn === fn && this.context === context;\n    }\n\n    /**\n     * Emit by calling the current function.\n     * @private\n     * @param deltaTime - time since the last emit.\n     * @returns Next ticker\n     */\n    emit(deltaTime: number): TickerListener\n    {\n        if (this.fn)\n        {\n            if (this.context)\n            {\n                this.fn.call(this.context, deltaTime);\n            }\n            else\n            {\n                (this as TickerListener<any>).fn(deltaTime);\n            }\n        }\n\n        const redirect = this.next;\n\n        if (this.once)\n        {\n            this.destroy(true);\n        }\n\n        // Soft-destroying should remove\n        // the next reference\n        if (this._destroyed)\n        {\n            this.next = null;\n        }\n\n        return redirect;\n    }\n\n    /**\n     * Connect to the list.\n     * @private\n     * @param previous - Input node, previous listener\n     */\n    connect(previous: TickerListener): void\n    {\n        this.previous = previous;\n        if (previous.next)\n        {\n            previous.next.previous = this;\n        }\n        this.next = previous.next;\n        previous.next = this;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @private\n     * @param hard - `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @returns The listener to redirect while emitting or removing.\n     */\n    destroy(hard = false): TickerListener\n    {\n        this._destroyed = true;\n        this.fn = null;\n        this.context = null;\n\n        // Disconnect, hook up next and previous\n        if (this.previous)\n        {\n            this.previous.next = this.next;\n        }\n\n        if (this.next)\n        {\n            this.next.previous = this.previous;\n        }\n\n        // Redirect to the next item\n        const redirect = this.next;\n\n        // Remove references\n        this.next = hard ? null : redirect;\n        this.previous = null;\n\n        return redirect;\n    }\n}\n","import { settings } from './settings';\nimport { UPDATE_PRIORITY } from './const';\nimport { TickerListener } from './TickerListener';\n\nexport type TickerCallback<T> = (this: T, dt: number) => any;\n\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n * @class\n * @memberof PIXI\n */\nexport class Ticker\n{\n    /** The private shared ticker instance */\n    private static _shared: Ticker;\n    /** The private system ticker instance  */\n    private static _system: Ticker;\n\n    /**\n     * Whether or not this ticker should invoke the method\n     * {@link PIXI.Ticker#start} automatically\n     * when a listener is added.\n     */\n    public autoStart = false;\n    /**\n     * Scalar time value from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     */\n    public deltaTime = 1;\n    /**\n     * Scaler time elapsed in milliseconds from last frame to this frame.\n     * This value is capped by setting {@link PIXI.Ticker#minFPS}\n     * and is scaled with {@link PIXI.Ticker#speed}.\n     * **Note:** The cap may be exceeded by scaling.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public deltaMS: number;\n    /**\n     * Time elapsed in milliseconds from last frame to this frame.\n     * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}\n     * is based, this value is neither capped nor scaled.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     * Defaults to target frame time\n     * @default 16.66\n     */\n    public elapsedMS: number;\n    /**\n     * The last time {@link PIXI.Ticker#update} was invoked.\n     * This value is also reset internally outside of invoking\n     * update, but only when a new animation frame is requested.\n     * If the platform supports DOMHighResTimeStamp,\n     * this value will have a precision of 1 µs.\n     */\n    public lastTime = -1;\n    /**\n     * Factor of current {@link PIXI.Ticker#deltaTime}.\n     * @example\n     * // Scales ticker.deltaTime to what would be\n     * // the equivalent of approximately 120 FPS\n     * ticker.speed = 2;\n     */\n    public speed = 1;\n    /**\n     * Whether or not this ticker has been started.\n     * `true` if {@link PIXI.Ticker#start} has been called.\n     * `false` if {@link PIXI.Ticker#stop} has been called.\n     * While `false`, this value may change to `true` in the\n     * event of {@link PIXI.Ticker#autoStart} being `true`\n     * and a listener is added.\n     */\n    public started = false;\n\n    /** The first listener. All new listeners added are chained on this. */\n    private _head: TickerListener;\n    /** Internal current frame request ID */\n    private _requestId: number = null;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the maximum allowed milliseconds between updates.\n     */\n    private _maxElapsedMS = 100;\n    /**\n     * Internal value managed by minFPS property setter and getter.\n     * This is the minimum allowed milliseconds between updates.\n     */\n    private _minElapsedMS = 0;\n    /** If enabled, deleting is disabled.*/\n    private _protected = false;\n    /** The last time keyframe was executed. Maintains a relatively fixed interval with the previous value. */\n    private _lastFrame = -1;\n    /**\n     * Internal tick method bound to ticker instance.\n     * This is because in early 2015, Function.bind\n     * is still 60% slower in high performance scenarios.\n     * Also separating frame requests from update method\n     * so listeners may be called at any time and with\n     * any animation API, just invoke ticker.update(time).\n     * @param time - Time since last tick.\n     */\n    private _tick: (time: number) => any;\n\n    constructor()\n    {\n        this._head = new TickerListener(null, null, Infinity);\n        this.deltaMS = 1 / settings.TARGET_FPMS;\n        this.elapsedMS = 1 / settings.TARGET_FPMS;\n\n        this._tick = (time: number): void =>\n        {\n            this._requestId = null;\n\n            if (this.started)\n            {\n                // Invoke listeners now\n                this.update(time);\n                // Listener side effects may have modified ticker state.\n                if (this.started && this._requestId === null && this._head.next)\n                {\n                    this._requestId = requestAnimationFrame(this._tick);\n                }\n            }\n        };\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If a frame has not already been requested, and if the internal\n     * emitter has listeners, a new frame is requested.\n     * @private\n     */\n    private _requestIfNeeded(): void\n    {\n        if (this._requestId === null && this._head.next)\n        {\n            // ensure callbacks get correct delta\n            this.lastTime = performance.now();\n            this._lastFrame = this.lastTime;\n            this._requestId = requestAnimationFrame(this._tick);\n        }\n    }\n\n    /**\n     * Conditionally cancels a pending animation frame.\n     * @private\n     */\n    private _cancelIfNeeded(): void\n    {\n        if (this._requestId !== null)\n        {\n            cancelAnimationFrame(this._requestId);\n            this._requestId = null;\n        }\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If the ticker has been started it checks if a frame has not already\n     * been requested, and if the internal emitter has listeners. If these\n     * conditions are met, a new frame is requested. If the ticker has not\n     * been started, but autoStart is `true`, then the ticker starts now,\n     * and continues with the previous conditions to request a new frame.\n     * @private\n     */\n    private _startIfPossible(): void\n    {\n        if (this.started)\n        {\n            this._requestIfNeeded();\n        }\n        else if (this.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Register a handler for tick events. Calls continuously unless\n     * it is removed or the ticker is stopped.\n     * @param fn - The listener function to be added for updates\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    add<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority));\n    }\n\n    /**\n     * Add a handler for the tick event which is only execute once.\n     * @param fn - The listener function to be added for one update\n     * @param context - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns This instance of a ticker\n     */\n    addOnce<T = any>(fn: TickerCallback<T>, context?: T, priority = UPDATE_PRIORITY.NORMAL): this\n    {\n        return this._addListener(new TickerListener(fn, context, priority, true));\n    }\n\n    /**\n     * Internally adds the event handler so that it can be sorted by priority.\n     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n     * before the rendering.\n     * @private\n     * @param listener - Current listener being added.\n     * @returns This instance of a ticker\n     */\n    private _addListener(listener: TickerListener): this\n    {\n        // For attaching to head\n        let current = this._head.next;\n        let previous = this._head;\n\n        // Add the first item\n        if (!current)\n        {\n            listener.connect(previous);\n        }\n        else\n        {\n            // Go from highest to lowest priority\n            while (current)\n            {\n                if (listener.priority > current.priority)\n                {\n                    listener.connect(previous);\n                    break;\n                }\n                previous = current;\n                current = current.next;\n            }\n\n            // Not yet connected\n            if (!listener.previous)\n            {\n                listener.connect(previous);\n            }\n        }\n\n        this._startIfPossible();\n\n        return this;\n    }\n\n    /**\n     * Removes any handlers matching the function and context parameters.\n     * If no handlers are left after removing, then it cancels the animation frame.\n     * @param fn - The listener function to be removed\n     * @param context - The listener context to be removed\n     * @returns This instance of a ticker\n     */\n    remove<T = any>(fn: TickerCallback<T>, context?: T): this\n    {\n        let listener = this._head.next;\n\n        while (listener)\n        {\n            // We found a match, lets remove it\n            // no break to delete all possible matches\n            // incase a listener was added 2+ times\n            if (listener.match(fn, context))\n            {\n                listener = listener.destroy();\n            }\n            else\n            {\n                listener = listener.next;\n            }\n        }\n\n        if (!this._head.next)\n        {\n            this._cancelIfNeeded();\n        }\n\n        return this;\n    }\n\n    /**\n     * The number of listeners on this ticker, calculated by walking through linked list\n     * @readonly\n     * @member {number}\n     */\n    get count(): number\n    {\n        if (!this._head)\n        {\n            return 0;\n        }\n\n        let count = 0;\n        let current = this._head;\n\n        while ((current = current.next))\n        {\n            count++;\n        }\n\n        return count;\n    }\n\n    /** Starts the ticker. If the ticker has listeners a new animation frame is requested at this point. */\n    start(): void\n    {\n        if (!this.started)\n        {\n            this.started = true;\n            this._requestIfNeeded();\n        }\n    }\n\n    /** Stops the ticker. If the ticker has requested an animation frame it is canceled at this point. */\n    stop(): void\n    {\n        if (this.started)\n        {\n            this.started = false;\n            this._cancelIfNeeded();\n        }\n    }\n\n    /** Destroy the ticker and don't use after this. Calling this method removes all references to internal events. */\n    destroy(): void\n    {\n        if (!this._protected)\n        {\n            this.stop();\n\n            let listener = this._head.next;\n\n            while (listener)\n            {\n                listener = listener.destroy(true);\n            }\n\n            this._head.destroy();\n            this._head = null;\n        }\n    }\n\n    /**\n     * Triggers an update. An update entails setting the\n     * current {@link PIXI.Ticker#elapsedMS},\n     * the current {@link PIXI.Ticker#deltaTime},\n     * invoking all listeners with current deltaTime,\n     * and then finally setting {@link PIXI.Ticker#lastTime}\n     * with the value of currentTime that was provided.\n     * This method will be called automatically by animation\n     * frame callbacks if the ticker instance has been started\n     * and listeners are added.\n     * @param {number} [currentTime=performance.now()] - the current time of execution\n     */\n    update(currentTime = performance.now()): void\n    {\n        let elapsedMS;\n\n        // If the difference in time is zero or negative, we ignore most of the work done here.\n        // If there is no valid difference, then should be no reason to let anyone know about it.\n        // A zero delta, is exactly that, nothing should update.\n        //\n        // The difference in time can be negative, and no this does not mean time traveling.\n        // This can be the result of a race condition between when an animation frame is requested\n        // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n        // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n        // can receive a time argument that can be less than the lastTime value that was set within\n        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n        //\n        // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n\n        if (currentTime > this.lastTime)\n        {\n            // Save uncapped elapsedMS for measurement\n            elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n\n            // cap the milliseconds elapsed used for deltaTime\n            if (elapsedMS > this._maxElapsedMS)\n            {\n                elapsedMS = this._maxElapsedMS;\n            }\n\n            elapsedMS *= this.speed;\n\n            // If not enough time has passed, exit the function.\n            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n            // adjustment to ensure a relatively stable interval.\n            if (this._minElapsedMS)\n            {\n                const delta = currentTime - this._lastFrame | 0;\n\n                if (delta < this._minElapsedMS)\n                {\n                    return;\n                }\n\n                this._lastFrame = currentTime - (delta % this._minElapsedMS);\n            }\n\n            this.deltaMS = elapsedMS;\n            this.deltaTime = this.deltaMS * settings.TARGET_FPMS;\n\n            // Cache a local reference, in-case ticker is destroyed\n            // during the emit, we can still check for head.next\n            const head = this._head;\n\n            // Invoke listeners added to internal emitter\n            let listener = head.next;\n\n            while (listener)\n            {\n                listener = listener.emit(this.deltaTime);\n            }\n\n            if (!head.next)\n            {\n                this._cancelIfNeeded();\n            }\n        }\n        else\n        {\n            this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n        }\n\n        this.lastTime = currentTime;\n    }\n\n    /**\n     * The frames per second at which this ticker is running.\n     * The default is approximately 60 in most modern browsers.\n     * **Note:** This does not factor in the value of\n     * {@link PIXI.Ticker#speed}, which is specific\n     * to scaling {@link PIXI.Ticker#deltaTime}.\n     * @member {number}\n     * @readonly\n     */\n    get FPS(): number\n    {\n        return 1000 / this.elapsedMS;\n    }\n\n    /**\n     * Manages the maximum amount of milliseconds allowed to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This value is used to cap {@link PIXI.Ticker#deltaTime},\n     * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n     * When setting this property it is clamped to a value between\n     * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n     * @member {number}\n     * @default 10\n     */\n    get minFPS(): number\n    {\n        return 1000 / this._maxElapsedMS;\n    }\n\n    set minFPS(fps: number)\n    {\n        // Minimum must be below the maxFPS\n        const minFPS = Math.min(this.maxFPS, fps);\n\n        // Must be at least 0, but below 1 / settings.TARGET_FPMS\n        const minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.TARGET_FPMS);\n\n        this._maxElapsedMS = 1 / minFPMS;\n    }\n\n    /**\n     * Manages the minimum amount of milliseconds required to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n     * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n     * Otherwise it will be at least `minFPS`\n     * @member {number}\n     * @default 0\n     */\n    get maxFPS(): number\n    {\n        if (this._minElapsedMS)\n        {\n            return Math.round(1000 / this._minElapsedMS);\n        }\n\n        return 0;\n    }\n\n    set maxFPS(fps: number)\n    {\n        if (fps === 0)\n        {\n            this._minElapsedMS = 0;\n        }\n        else\n        {\n            // Max must be at least the minFPS\n            const maxFPS = Math.max(this.minFPS, fps);\n\n            this._minElapsedMS = 1 / (maxFPS / 1000);\n        }\n    }\n\n    /**\n     * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n     * {@link PIXI.VideoResource} to update animation frames / video textures.\n     *\n     * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n     * @example\n     * let ticker = PIXI.Ticker.shared;\n     * // Set this to prevent starting this ticker when listeners are added.\n     * // By default this is true only for the PIXI.Ticker.shared instance.\n     * ticker.autoStart = false;\n     * // FYI, call this to ensure the ticker is stopped. It should be stopped\n     * // if you have not attempted to render anything yet.\n     * ticker.stop();\n     * // Call this when you are ready for a running shared ticker.\n     * ticker.start();\n     * @example\n     * // You may use the shared ticker to render...\n     * let renderer = PIXI.autoDetectRenderer();\n     * let stage = new PIXI.Container();\n     * document.body.appendChild(renderer.view);\n     * ticker.add(function (time) {\n     *     renderer.render(stage);\n     * });\n     * @example\n     * // Or you can just update it manually.\n     * ticker.autoStart = false;\n     * ticker.stop();\n     * function animate(time) {\n     *     ticker.update(time);\n     *     renderer.render(stage);\n     *     requestAnimationFrame(animate);\n     * }\n     * animate(performance.now());\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get shared(): Ticker\n    {\n        if (!Ticker._shared)\n        {\n            const shared = Ticker._shared = new Ticker();\n\n            shared.autoStart = true;\n            shared._protected = true;\n        }\n\n        return Ticker._shared;\n    }\n\n    /**\n     * The system ticker instance used by {@link PIXI.InteractionManager} and by\n     * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n     * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get system(): Ticker\n    {\n        if (!Ticker._system)\n        {\n            const system = Ticker._system = new Ticker();\n\n            system.autoStart = true;\n            system._protected = true;\n        }\n\n        return Ticker._system;\n    }\n}\n","import type { ExtensionMetadata } from '@pixi/extensions';\nimport { ExtensionType } from '@pixi/extensions';\nimport { UPDATE_PRIORITY } from './const';\nimport { Ticker } from './Ticker';\n\n/**\n * Middleware for for Application Ticker.\n * @example\n * import {TickerPlugin} from '@pixi/ticker';\n * import {Application} from '@pixi/app';\n * import {extensions} from '@pixi/extensions';\n * extensions.add(TickerPlugin);\n * @class\n * @memberof PIXI\n */\nexport class TickerPlugin\n{\n    /** @ignore */\n    static extension: ExtensionMetadata = ExtensionType.Application;\n\n    static start: () => void;\n    static stop: () => void;\n    static _ticker: Ticker;\n    static ticker: Ticker;\n\n    /**\n     * Initialize the plugin with scope of application instance\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options?: GlobalMixins.IApplicationOptions): void\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.stop = (): void =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         * @method\n         * @memberof PIXI.Application\n         * @instance\n         */\n        this.start = (): void =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         * @type {PIXI.Ticker}\n         * @name _ticker\n         * @memberof PIXI.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         * @type {PIXI.Ticker}\n         * @name ticker\n         * @memberof PIXI.Application#\n         * @default PIXI.Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     * @static\n     * @private\n     */\n    static destroy(): void\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n","import { settings } from '@pixi/settings';\nimport { ENV } from '@pixi/constants';\nimport { isMobile } from '@pixi/utils';\n\n/**\n * The maximum support for using WebGL. If a device does not\n * support WebGL version, for instance WebGL 2, it will still\n * attempt to fallback support to WebGL 1. If you want to\n * explicitly remove feature support to target a more stable\n * baseline, prefer a lower environment.\n *\n * Due to {@link https://bugs.chromium.org/p/chromium/issues/detail?id=934823|bug in chromium}\n * we disable webgl2 by default for all non-apple mobile devices.\n * @static\n * @name PREFER_ENV\n * @memberof PIXI.settings\n * @type {number}\n * @default PIXI.ENV.WEBGL2\n */\nsettings.PREFER_ENV = isMobile.any ? ENV.WEBGL : ENV.WEBGL2;\n\n/**\n * If set to `true`, *only* Textures and BaseTexture objects stored\n * in the caches ({@link PIXI.utils.TextureCache TextureCache} and\n * {@link PIXI.utils.BaseTextureCache BaseTextureCache}) can be\n * used when calling {@link PIXI.Texture.from Texture.from} or\n * {@link PIXI.BaseTexture.from BaseTexture.from}.\n * Otherwise, these `from` calls throw an exception. Using this property\n * can be useful if you want to enforce preloading all assets with\n * {@link PIXI.Loader Loader}.\n * @static\n * @name STRICT_TEXTURE_CACHE\n * @memberof PIXI.settings\n * @type {boolean}\n * @default false\n */\nsettings.STRICT_TEXTURE_CACHE = false;\n\nexport { settings };\n","import type { Resource } from './Resource';\n\nimport type { IImageResourceOptions } from './ImageResource';\nimport type { ISize } from '@pixi/math';\nimport type { ICubeResourceOptions } from './CubeResource';\nimport type { ISVGResourceOptions } from './SVGResource';\nimport type { IVideoResourceOptions } from './VideoResource';\n\n/*\n * Allow flexible options for resource plugins\n */\nexport type IResourcePluginOptions = { [key: string]: any };\n\n/*\n * All allowable options for autoDetectResource\n */\nexport type IAutoDetectOptions = ISize\n| ICubeResourceOptions\n| IImageResourceOptions\n| ISVGResourceOptions\n| IVideoResourceOptions\n| IResourcePluginOptions;\n\n/**\n * Shape of supported resource plugins\n * @memberof PIXI\n */\nexport interface IResourcePlugin<R, RO>\n{\n    test(source: unknown, extension: string): boolean;\n    new (source: any, options?: RO): R;\n}\n\n/**\n * Collection of installed resource types, class must extend {@link PIXI.Resource}.\n * @example\n * class CustomResource extends PIXI.Resource {\n *   // MUST have source, options constructor signature\n *   // for auto-detected resources to be created.\n *   constructor(source, options) {\n *     super();\n *   }\n *   upload(renderer, baseTexture, glTexture) {\n *     // upload with GL\n *     return true;\n *   }\n *   // used to auto-detect resource\n *   static test(source, extension) {\n *     return extension === 'xyz'|| source instanceof SomeClass;\n *   }\n * }\n * // Install the new resource type\n * PIXI.INSTALLED.push(CustomResource);\n * @memberof PIXI\n * @type {Array<PIXI.IResourcePlugin>}\n * @static\n * @readonly\n */\nexport const INSTALLED: Array<IResourcePlugin<any, any>> = [];\n\n/**\n * Create a resource element from a single source element. This\n * auto-detects which type of resource to create. All resources that\n * are auto-detectable must have a static `test` method and a constructor\n * with the arguments `(source, options?)`. Currently, the supported\n * resources for auto-detection include:\n *  - {@link PIXI.ImageResource}\n *  - {@link PIXI.CanvasResource}\n *  - {@link PIXI.VideoResource}\n *  - {@link PIXI.SVGResource}\n *  - {@link PIXI.BufferResource}\n * @static\n * @memberof PIXI\n * @function autoDetectResource\n * @param {string|*} source - Resource source, this can be the URL to the resource,\n *        a typed-array (for BufferResource), HTMLVideoElement, SVG data-uri\n *        or any other resource that can be auto-detected. If not resource is\n *        detected, it's assumed to be an ImageResource.\n * @param {object} [options] - Pass-through options to use for Resource\n * @param {number} [options.width] - Width of BufferResource or SVG rasterization\n * @param {number} [options.height] - Height of BufferResource or SVG rasterization\n * @param {boolean} [options.autoLoad=true] - Image, SVG and Video flag to start loading\n * @param {number} [options.scale=1] - SVG source scale. Overridden by width, height\n * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - Image option to create Bitmap object\n * @param {boolean} [options.crossorigin=true] - Image and Video option to set crossOrigin\n * @param {boolean} [options.autoPlay=true] - Video option to start playing video immediately\n * @param {number} [options.updateFPS=0] - Video option to update how many times a second the\n *        texture should be updated from the video. Leave at 0 to update at every render\n * @returns {PIXI.Resource} The created resource.\n */\nexport function autoDetectResource<R extends Resource, RO>(source: unknown, options?: RO): R\n{\n    if (!source)\n    {\n        return null;\n    }\n\n    let extension = '';\n\n    if (typeof source === 'string')\n    {\n        // search for file extension: period, 3-4 chars, then ?, # or EOL\n        const result = (/\\.(\\w{3,4})(?:$|\\?|#)/i).exec(source);\n\n        if (result)\n        {\n            extension = result[1].toLowerCase();\n        }\n    }\n\n    for (let i = INSTALLED.length - 1; i >= 0; --i)\n    {\n        const ResourcePlugin = INSTALLED[i] as IResourcePlugin<R, RO>;\n\n        if (ResourcePlugin.test && ResourcePlugin.test(source, extension))\n        {\n            return new ResourcePlugin(source, options);\n        }\n    }\n\n    throw new Error('Unrecognized source type to auto-detect Resource');\n}\n","import { Runner } from '@pixi/runner';\n\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\n/**\n * Base resource class for textures that manages validation and uploading, depending on its type.\n *\n * Uploading of a base texture to the GPU is required.\n * @memberof PIXI\n */\nexport abstract class Resource\n{\n    /** The url of the resource */\n    public src: string;\n\n    /**\n     * If resource has been destroyed.\n     * @readonly\n     * @default false\n     */\n    public destroyed: boolean;\n\n    /**\n     * `true` if resource is created by BaseTexture\n     * useful for doing cleanup with BaseTexture destroy\n     * and not cleaning up resources that were created\n     * externally.\n     */\n    public internal: boolean;\n\n    /** Internal width of the resource. */\n    protected _width: number;\n\n    /** Internal height of the resource. */\n    protected _height: number;\n\n    /**\n     * Mini-runner for handling resize events\n     * accepts 2 parameters: width, height\n     * @member {Runner}\n     * @private\n     */\n    protected onResize: Runner; // TODO: Should this be private? It doesn't seem to be used anywhere else.\n\n    /**\n     * Mini-runner for handling update events\n     * @member {Runner}\n     * @private\n     */\n    protected onUpdate: Runner;\n\n    /**\n     * Handle internal errors, such as loading errors\n     * accepts 1 param: error\n     * @member {Runner}\n     * @private\n     */\n    protected onError: Runner;\n\n    /**\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     */\n    constructor(width = 0, height = 0)\n    {\n        this._width = width;\n        this._height = height;\n\n        this.destroyed = false;\n        this.internal = false;\n\n        this.onResize = new Runner('setRealSize');\n        this.onUpdate = new Runner('update');\n        this.onError = new Runner('onError');\n    }\n\n    /**\n     * Bind to a parent BaseTexture\n     * @param baseTexture - Parent texture\n     */\n    bind(baseTexture: BaseTexture): void\n    {\n        this.onResize.add(baseTexture);\n        this.onUpdate.add(baseTexture);\n        this.onError.add(baseTexture);\n\n        // Call a resize immediate if we already\n        // have the width and height of the resource\n        if (this._width || this._height)\n        {\n            this.onResize.emit(this._width, this._height);\n        }\n    }\n\n    /**\n     * Unbind to a parent BaseTexture\n     * @param baseTexture - Parent texture\n     */\n    unbind(baseTexture: BaseTexture): void\n    {\n        this.onResize.remove(baseTexture);\n        this.onUpdate.remove(baseTexture);\n        this.onError.remove(baseTexture);\n    }\n\n    /**\n     * Trigger a resize event\n     * @param width - X dimension\n     * @param height - Y dimension\n     */\n    resize(width: number, height: number): void\n    {\n        if (width !== this._width || height !== this._height)\n        {\n            this._width = width;\n            this._height = height;\n            this.onResize.emit(width, height);\n        }\n    }\n\n    /**\n     * Has been validated\n     * @readonly\n     */\n    get valid(): boolean\n    {\n        return !!this._width && !!this._height;\n    }\n\n    /** Has been updated trigger event. */\n    update(): void\n    {\n        if (!this.destroyed)\n        {\n            this.onUpdate.emit();\n        }\n    }\n\n    /**\n     * This can be overridden to start preloading a resource\n     * or do any other prepare step.\n     * @protected\n     * @returns Handle the validate event\n     */\n    load(): Promise<Resource>\n    {\n        return Promise.resolve(this);\n    }\n\n    /**\n     * The width of the resource.\n     * @readonly\n     */\n    get width(): number\n    {\n        return this._width;\n    }\n\n    /**\n     * The height of the resource.\n     * @readonly\n     */\n    get height(): number\n    {\n        return this._height;\n    }\n\n    /**\n     * Uploads the texture or returns false if it cant for some reason. Override this.\n     * @param renderer - yeah, renderer!\n     * @param baseTexture - the texture\n     * @param glTexture - texture instance for this webgl context\n     * @returns - true is success\n     */\n    abstract upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean;\n\n    /**\n     * Set the style, optional to override\n     * @param _renderer - yeah, renderer!\n     * @param _baseTexture - the texture\n     * @param _glTexture - texture instance for this webgl context\n     * @returns - `true` is success\n     */\n    style(_renderer: Renderer, _baseTexture: BaseTexture, _glTexture: GLTexture): boolean\n    {\n        return false;\n    }\n\n    /** Clean up anything, this happens when destroying is ready. */\n    dispose(): void\n    {\n        // override\n    }\n\n    /**\n     * Call when destroying resource, unbind any BaseTexture object\n     * before calling this method, as reference counts are maintained\n     * internally.\n     */\n    destroy(): void\n    {\n        if (!this.destroyed)\n        {\n            this.destroyed = true;\n            this.dispose();\n            this.onError.removeAll();\n            this.onError = null;\n            this.onResize.removeAll();\n            this.onResize = null;\n            this.onUpdate.removeAll();\n            this.onUpdate = null;\n        }\n    }\n\n    /**\n     * Abstract, used to auto-detect resource type.\n     * @param {*} _source - The source object\n     * @param {string} _extension - The extension of source, if set\n     */\n    static test(_source: unknown, _extension?: string): boolean\n    {\n        return false;\n    }\n}\n","import { Resource } from './Resource';\nimport { ALPHA_MODES } from '@pixi/constants';\n\nimport type { ISize } from '@pixi/math';\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n/**\n * @interface SharedArrayBuffer\n */\n\n/**\n * Buffer resource with data of typed array.\n * @memberof PIXI\n */\nexport class BufferResource extends Resource\n{\n    /** Source array Cannot be {@code ClampedUint8Array} because it cant be uploaded to WebGL */\n    data: Float32Array | Uint8Array | Uint16Array | Int32Array | Uint32Array;\n\n    /**\n     * @param source - Source buffer\n     * @param options - Options\n     * @param {number} options.width - Width of the texture\n     * @param {number} options.height - Height of the texture\n     */\n    constructor(source: Float32Array | Uint8Array | Uint16Array | Int32Array | Uint32Array, options: ISize)\n    {\n        const { width, height } = options || {};\n\n        if (!width || !height)\n        {\n            throw new Error('BufferResource width or height invalid');\n        }\n\n        super(width, height);\n\n        this.data = source;\n    }\n\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture - glTexture\n     * @returns - true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        if (glTexture.width === width && glTexture.height === height)\n        {\n            gl.texSubImage2D(\n                baseTexture.target,\n                0,\n                0,\n                0,\n                width,\n                height,\n                baseTexture.format,\n                glTexture.type,\n                this.data\n            );\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(\n                baseTexture.target,\n                0,\n                glTexture.internalFormat,\n                width,\n                height,\n                0,\n                baseTexture.format,\n                glTexture.type,\n                this.data\n            );\n        }\n\n        return true;\n    }\n\n    /** Destroy and don't use after this. */\n    dispose(): void\n    {\n        this.data = null;\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if <canvas>\n     */\n    static test(source: unknown): source is Float32Array | Uint8Array | Uint32Array\n    {\n        return source instanceof Float32Array\n            || source instanceof Uint8Array\n            || source instanceof Uint32Array;\n    }\n}\n","import { BaseTextureCache, EventEmitter, isPow2, TextureCache, uid } from '@pixi/utils';\nimport { FORMATS, SCALE_MODES, TARGETS, TYPES, ALPHA_MODES } from '@pixi/constants';\nimport { Resource } from './resources/Resource';\nimport { BufferResource } from './resources/BufferResource';\nimport { autoDetectResource } from './resources/autoDetectResource';\nimport { settings } from '@pixi/settings';\n\nimport type { MSAA_QUALITY, MIPMAP_MODES, WRAP_MODES } from '@pixi/constants';\nimport type { IAutoDetectOptions } from './resources/autoDetectResource';\nimport type { GLTexture } from './GLTexture';\n\nconst defaultBufferOptions = {\n    scaleMode: SCALE_MODES.NEAREST,\n    format: FORMATS.RGBA,\n    alphaMode: ALPHA_MODES.NPM,\n};\n\nexport type ImageSource = HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | ImageBitmap;\n\nexport interface IBaseTextureOptions<RO = any>\n{\n    alphaMode?: ALPHA_MODES;\n    mipmap?: MIPMAP_MODES;\n    anisotropicLevel?: number;\n    scaleMode?: SCALE_MODES;\n    width?: number;\n    height?: number;\n    wrapMode?: WRAP_MODES;\n    format?: FORMATS;\n    type?: TYPES;\n    target?: TARGETS;\n    resolution?: number;\n    multisample?: MSAA_QUALITY;\n    resourceOptions?: RO;\n    pixiIdPrefix?: string;\n}\n\nexport interface BaseTexture extends GlobalMixins.BaseTexture, EventEmitter {}\n\n/**\n * A Texture stores the information that represents an image.\n * All textures have a base texture, which contains information about the source.\n * Therefore you can have many textures all using a single BaseTexture\n * @memberof PIXI\n * @typeParam R - The BaseTexture's Resource type.\n * @typeParam RO - The options for constructing resource.\n */\nexport class BaseTexture<R extends Resource = Resource, RO = IAutoDetectOptions> extends EventEmitter\n{\n    /**\n     * The width of the base texture set when the image has loaded\n     * @readonly\n     */\n    public width: number;\n\n    /**\n     * The height of the base texture set when the image has loaded\n     * @readonly\n     */\n    public height: number;\n\n    /**\n     * The resolution / device pixel ratio of the texture\n     * @readonly\n     * @default PIXI.settings.RESOLUTION\n     */\n    public resolution: number;\n\n    /**\n     * How to treat premultiplied alpha, see {@link PIXI.ALPHA_MODES}.\n     * @member {PIXI.ALPHA_MODES}\n     * @default PIXI.ALPHA_MODES.UNPACK\n     */\n    public alphaMode?: ALPHA_MODES;\n\n    /**\n     * Anisotropic filtering level of texture\n     * @member {number}\n     * @default PIXI.settings.ANISOTROPIC_LEVEL\n     */\n    public anisotropicLevel?: number;\n\n    /**\n     * The pixel format of the texture\n     * @default PIXI.FORMATS.RGBA\n     */\n    public format?: FORMATS;\n\n    /**\n     * The type of resource data\n     * @default PIXI.TYPES.UNSIGNED_BYTE\n     */\n    public type?: TYPES;\n\n    /**\n     * The target type\n     * @default PIXI.TARGETS.TEXTURE_2D\n     */\n    public target?: TARGETS;\n\n    /**\n     * Global unique identifier for this BaseTexture\n     * @protected\n     */\n    public readonly uid: number;\n\n    /**\n     * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\n     * @protected\n     */\n    touched: number;\n\n    /**\n     * Whether or not the texture is a power of two, try to use power of two textures as much\n     * as you can\n     * @readonly\n     * @default false\n     */\n    isPowerOfTwo: boolean;\n\n    /**\n     * The map of render context textures where this is bound\n     * @private\n     */\n    _glTextures: { [key: number]: GLTexture };\n\n    /**\n     * Used by TextureSystem to only update texture to the GPU when needed.\n     * Please call `update()` to increment it.\n     * @readonly\n     */\n    dirtyId: number;\n\n    /**\n     * Used by TextureSystem to only update texture style when needed.\n     * @protected\n     */\n    dirtyStyleId: number;\n\n    /**\n     * Currently default cache ID.\n     * @member {string}\n     */\n    public cacheId: string;\n\n    /**\n     * Generally speaking means when resource is loaded.\n     * @readonly\n     * @member {boolean}\n     */\n    public valid: boolean;\n\n    /**\n     * The collection of alternative cache ids, since some BaseTextures\n     * can have more than one ID, short name and longer full URL\n     * @member {Array<string>}\n     * @readonly\n     */\n    public textureCacheIds: Array<string>;\n\n    /**\n     * Flag if BaseTexture has been destroyed.\n     * @member {boolean}\n     * @readonly\n     */\n    public destroyed: boolean;\n\n    /**\n     * The resource used by this BaseTexture, there can only\n     * be one resource per BaseTexture, but textures can share\n     * resources.\n     * @member {PIXI.Resource}\n     * @readonly\n     */\n    public resource: R;\n\n    /**\n     * Number of the texture batch, used by multi-texture renderers\n     * @member {number}\n     */\n    _batchEnabled: number;\n\n    /**\n     * Location inside texture batch, used by multi-texture renderers\n     * @member {number}\n     */\n    _batchLocation: number;\n\n    /**\n     * Whether its a part of another texture, handled by ArrayResource or CubeResource\n     * @member {PIXI.BaseTexture}\n     */\n    parentTextureArray: BaseTexture;\n\n    private _mipmap?: MIPMAP_MODES;\n    private _scaleMode?: SCALE_MODES;\n    private _wrapMode?: WRAP_MODES;\n\n    /**\n     * @param {PIXI.Resource|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [resource=null] -\n     *        The current resource to use, for things that aren't Resource objects, will be converted\n     *        into a Resource.\n     * @param options - Collection of options\n     * @param {PIXI.MIPMAP_MODES} [options.mipmap=PIXI.settings.MIPMAP_TEXTURES] - If mipmapping is enabled for texture\n     * @param {number} [options.anisotropicLevel=PIXI.settings.ANISOTROPIC_LEVEL] - Anisotropic filtering level of texture\n     * @param {PIXI.WRAP_MODES} [options.wrapMode=PIXI.settings.WRAP_MODE] - Wrap mode for textures\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - Default scale mode, linear, nearest\n     * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type\n     * @param {PIXI.TYPES} [options.type=PIXI.TYPES.UNSIGNED_BYTE] - GL data type\n     * @param {PIXI.TARGETS} [options.target=PIXI.TARGETS.TEXTURE_2D] - GL texture target\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Pre multiply the image alpha\n     * @param {number} [options.width=0] - Width of the texture\n     * @param {number} [options.height=0] - Height of the texture\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - Resolution of the base texture\n     * @param {object} [options.resourceOptions] - Optional resource options,\n     *        see {@link PIXI.autoDetectResource autoDetectResource}\n     */\n    constructor(resource: R | ImageSource | string | any = null, options: IBaseTextureOptions<RO> = null)\n    {\n        super();\n\n        options = options || {};\n\n        const { alphaMode, mipmap, anisotropicLevel, scaleMode, width, height,\n            wrapMode, format, type, target, resolution, resourceOptions } = options;\n\n        // Convert the resource to a Resource object\n        if (resource && !(resource instanceof Resource))\n        {\n            resource = autoDetectResource<R, RO>(resource, resourceOptions);\n            resource.internal = true;\n        }\n\n        this.resolution = resolution || settings.RESOLUTION;\n        this.width = Math.round((width || 0) * this.resolution) / this.resolution;\n        this.height = Math.round((height || 0) * this.resolution) / this.resolution;\n        this._mipmap = mipmap !== undefined ? mipmap : settings.MIPMAP_TEXTURES;\n        this.anisotropicLevel = anisotropicLevel !== undefined ? anisotropicLevel : settings.ANISOTROPIC_LEVEL;\n        this._wrapMode = wrapMode || settings.WRAP_MODE;\n        this._scaleMode = scaleMode !== undefined ? scaleMode : settings.SCALE_MODE;\n        this.format = format || FORMATS.RGBA;\n        this.type = type || TYPES.UNSIGNED_BYTE;\n        this.target = target || TARGETS.TEXTURE_2D;\n        this.alphaMode = alphaMode !== undefined ? alphaMode : ALPHA_MODES.UNPACK;\n\n        this.uid = uid();\n        this.touched = 0;\n        this.isPowerOfTwo = false;\n        this._refreshPOT();\n\n        this._glTextures = {};\n        this.dirtyId = 0;\n        this.dirtyStyleId = 0;\n        this.cacheId = null;\n        this.valid = width > 0 && height > 0;\n        this.textureCacheIds = [];\n        this.destroyed = false;\n        this.resource = null;\n\n        this._batchEnabled = 0;\n        this._batchLocation = 0;\n        this.parentTextureArray = null;\n\n        /**\n         * Fired when a not-immediately-available source finishes loading.\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when a not-immediately-available source fails to load.\n         * @protected\n         * @event PIXI.BaseTexture#error\n         * @param {PIXI.BaseTexture} baseTexture - Resource errored.\n         * @param {ErrorEvent} event - Load error event.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         * @protected\n         * @event PIXI.BaseTexture#update\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.\n         */\n\n        /**\n         * Fired when BaseTexture is destroyed.\n         * @protected\n         * @event PIXI.BaseTexture#dispose\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.\n         */\n\n        // Set the resource\n        this.setResource(resource);\n    }\n\n    /**\n     * Pixel width of the source of this texture\n     * @readonly\n     */\n    get realWidth(): number\n    {\n        return Math.round(this.width * this.resolution);\n    }\n\n    /**\n     * Pixel height of the source of this texture\n     * @readonly\n     */\n    get realHeight(): number\n    {\n        return Math.round(this.height * this.resolution);\n    }\n\n    /**\n     * Mipmap mode of the texture, affects downscaled images\n     * @default PIXI.settings.MIPMAP_TEXTURES\n     */\n    get mipmap(): MIPMAP_MODES\n    {\n        return this._mipmap;\n    }\n    set mipmap(value: MIPMAP_MODES)\n    {\n        if (this._mipmap !== value)\n        {\n            this._mipmap = value;\n            this.dirtyStyleId++;\n        }\n    }\n\n    /**\n     * The scale mode to apply when scaling this texture\n     * @default PIXI.settings.SCALE_MODE\n     */\n    get scaleMode(): SCALE_MODES\n    {\n        return this._scaleMode;\n    }\n    set scaleMode(value: SCALE_MODES)\n    {\n        if (this._scaleMode !== value)\n        {\n            this._scaleMode = value;\n            this.dirtyStyleId++;\n        }\n    }\n\n    /**\n     * How the texture wraps\n     * @default PIXI.settings.WRAP_MODE\n     */\n    get wrapMode(): WRAP_MODES\n    {\n        return this._wrapMode;\n    }\n    set wrapMode(value: WRAP_MODES)\n    {\n        if (this._wrapMode !== value)\n        {\n            this._wrapMode = value;\n            this.dirtyStyleId++;\n        }\n    }\n\n    /**\n     * Changes style options of BaseTexture\n     * @param scaleMode - Pixi scalemode\n     * @param mipmap - enable mipmaps\n     * @returns - this\n     */\n    setStyle(scaleMode?: SCALE_MODES, mipmap?: MIPMAP_MODES): this\n    {\n        let dirty;\n\n        if (scaleMode !== undefined && scaleMode !== this.scaleMode)\n        {\n            this.scaleMode = scaleMode;\n            dirty = true;\n        }\n\n        if (mipmap !== undefined && mipmap !== this.mipmap)\n        {\n            this.mipmap = mipmap;\n            dirty = true;\n        }\n\n        if (dirty)\n        {\n            this.dirtyStyleId++;\n        }\n\n        return this;\n    }\n\n    /**\n     * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.\n     * @param desiredWidth - Desired visual width\n     * @param desiredHeight - Desired visual height\n     * @param resolution - Optionally set resolution\n     * @returns - this\n     */\n    setSize(desiredWidth: number, desiredHeight: number, resolution?: number): this\n    {\n        resolution = resolution || this.resolution;\n\n        return this.setRealSize(desiredWidth * resolution, desiredHeight * resolution, resolution);\n    }\n\n    /**\n     * Sets real size of baseTexture, preserves current resolution.\n     * @param realWidth - Full rendered width\n     * @param realHeight - Full rendered height\n     * @param resolution - Optionally set resolution\n     * @returns - this\n     */\n    setRealSize(realWidth: number, realHeight: number, resolution?: number): this\n    {\n        this.resolution = resolution || this.resolution;\n        this.width = Math.round(realWidth) / this.resolution;\n        this.height = Math.round(realHeight) / this.resolution;\n        this._refreshPOT();\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Refresh check for isPowerOfTwo texture based on size\n     * @private\n     */\n    protected _refreshPOT(): void\n    {\n        this.isPowerOfTwo = isPow2(this.realWidth) && isPow2(this.realHeight);\n    }\n\n    /**\n     * Changes resolution\n     * @param resolution - res\n     * @returns - this\n     */\n    setResolution(resolution: number): this\n    {\n        const oldResolution = this.resolution;\n\n        if (oldResolution === resolution)\n        {\n            return this;\n        }\n\n        this.resolution = resolution;\n\n        if (this.valid)\n        {\n            this.width = Math.round(this.width * oldResolution) / resolution;\n            this.height = Math.round(this.height * oldResolution) / resolution;\n            this.emit('update', this);\n        }\n\n        this._refreshPOT();\n\n        return this;\n    }\n\n    /**\n     * Sets the resource if it wasn't set. Throws error if resource already present\n     * @param resource - that is managing this BaseTexture\n     * @returns - this\n     */\n    setResource(resource: R): this\n    {\n        if (this.resource === resource)\n        {\n            return this;\n        }\n\n        if (this.resource)\n        {\n            throw new Error('Resource can be set only once');\n        }\n\n        resource.bind(this);\n\n        this.resource = resource;\n\n        return this;\n    }\n\n    /** Invalidates the object. Texture becomes valid if width and height are greater than zero. */\n    update(): void\n    {\n        if (!this.valid)\n        {\n            if (this.width > 0 && this.height > 0)\n            {\n                this.valid = true;\n                this.emit('loaded', this);\n                this.emit('update', this);\n            }\n        }\n        else\n        {\n            this.dirtyId++;\n            this.dirtyStyleId++;\n            this.emit('update', this);\n        }\n    }\n\n    /**\n     * Handle errors with resources.\n     * @private\n     * @param event - Error event emitted.\n     */\n    onError(event: ErrorEvent): void\n    {\n        this.emit('error', this, event);\n    }\n\n    /**\n     * Destroys this base texture.\n     * The method stops if resource doesn't want this texture to be destroyed.\n     * Removes texture from all caches.\n     */\n    destroy(): void\n    {\n        // remove and destroy the resource\n        if (this.resource)\n        {\n            this.resource.unbind(this);\n            // only destroy resourced created internally\n            if (this.resource.internal)\n            {\n                this.resource.destroy();\n            }\n            this.resource = null;\n        }\n\n        if (this.cacheId)\n        {\n            delete BaseTextureCache[this.cacheId];\n            delete TextureCache[this.cacheId];\n\n            this.cacheId = null;\n        }\n\n        // finally let the WebGL renderer know..\n        this.dispose();\n\n        BaseTexture.removeFromCache(this);\n        this.textureCacheIds = null;\n\n        this.destroyed = true;\n    }\n\n    /**\n     * Frees the texture from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose(): void\n    {\n        this.emit('dispose', this);\n    }\n\n    /** Utility function for BaseTexture|Texture cast. */\n    castToBaseTexture(): BaseTexture\n    {\n        return this;\n    }\n\n    /**\n     * Helper function that creates a base texture based on the source you provide.\n     * The source can be - image url, image element, canvas element. If the\n     * source is an image url or an image element and not in the base texture\n     * cache, it will be created and loaded.\n     * @static\n     * @param {string|string[]|HTMLImageElement|HTMLCanvasElement|SVGElement|HTMLVideoElement} source - The\n     *        source to create base texture from.\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n     * @returns {PIXI.BaseTexture} The new base texture.\n     */\n    static from<R extends Resource = Resource, RO = IAutoDetectOptions>(source: ImageSource | string | string[],\n        options?: IBaseTextureOptions<RO>, strict = settings.STRICT_TEXTURE_CACHE): BaseTexture<R>\n    {\n        const isFrame = typeof source === 'string';\n        let cacheId = null;\n\n        if (isFrame)\n        {\n            cacheId = source;\n        }\n        else\n        {\n            if (!(source as any)._pixiId)\n            {\n                const prefix = (options && options.pixiIdPrefix) || 'pixiid';\n\n                (source as any)._pixiId = `${prefix}_${uid()}`;\n            }\n\n            cacheId = (source as any)._pixiId;\n        }\n\n        let baseTexture = BaseTextureCache[cacheId] as BaseTexture<R>;\n\n        // Strict-mode rejects invalid cacheIds\n        if (isFrame && strict && !baseTexture)\n        {\n            throw new Error(`The cacheId \"${cacheId}\" does not exist in BaseTextureCache.`);\n        }\n\n        if (!baseTexture)\n        {\n            baseTexture = new BaseTexture<R>(source, options);\n            baseTexture.cacheId = cacheId;\n            BaseTexture.addToCache(baseTexture, cacheId);\n        }\n\n        return baseTexture;\n    }\n\n    /**\n     * Create a new BaseTexture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     *        Default properties are different from the constructor's defaults.\n     * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.NPM] - Image alpha, not premultiplied by default\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.SCALE_MODES.NEAREST] - Scale mode, pixelating by default\n     * @returns - The resulting new BaseTexture\n     */\n    static fromBuffer(buffer: Float32Array | Uint8Array,\n        width: number, height: number, options?: IBaseTextureOptions): BaseTexture<BufferResource>\n    {\n        buffer = buffer || new Float32Array(width * height * 4);\n\n        const resource = new BufferResource(buffer, { width, height });\n        const type = buffer instanceof Float32Array ? TYPES.FLOAT : TYPES.UNSIGNED_BYTE;\n\n        return new BaseTexture(resource, Object.assign({}, defaultBufferOptions, options || { width, height, type }));\n    }\n\n    /**\n     * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n     * @param {string} id - The id that the BaseTexture will be stored against.\n     */\n    static addToCache(baseTexture: BaseTexture, id: string): void\n    {\n        if (id)\n        {\n            if (baseTexture.textureCacheIds.indexOf(id) === -1)\n            {\n                baseTexture.textureCacheIds.push(id);\n            }\n\n            if (BaseTextureCache[id])\n            {\n                // eslint-disable-next-line no-console\n                console.warn(`BaseTexture added to the cache with an id [${id}] that already had an entry`);\n            }\n\n            BaseTextureCache[id] = baseTexture;\n        }\n    }\n\n    /**\n     * Remove a BaseTexture from the global BaseTextureCache.\n     * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n     * @returns {PIXI.BaseTexture|null} The BaseTexture that was removed.\n     */\n    static removeFromCache(baseTexture: string | BaseTexture): BaseTexture | null\n    {\n        if (typeof baseTexture === 'string')\n        {\n            const baseTextureFromCache = BaseTextureCache[baseTexture];\n\n            if (baseTextureFromCache)\n            {\n                const index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n\n                if (index > -1)\n                {\n                    baseTextureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete BaseTextureCache[baseTexture];\n\n                return baseTextureFromCache;\n            }\n        }\n        else if (baseTexture && baseTexture.textureCacheIds)\n        {\n            for (let i = 0; i < baseTexture.textureCacheIds.length; ++i)\n            {\n                delete BaseTextureCache[baseTexture.textureCacheIds[i]];\n            }\n\n            baseTexture.textureCacheIds.length = 0;\n\n            return baseTexture;\n        }\n\n        return null;\n    }\n\n    /** Global number of the texture batch, used by multi-texture renderers. */\n    static _globalBatch = 0;\n}\n","import { Resource } from './Resource';\nimport { BaseTexture } from '../BaseTexture';\nimport type { ISize } from '@pixi/math';\nimport type { IAutoDetectOptions } from './autoDetectResource';\nimport { autoDetectResource } from './autoDetectResource';\n\n/**\n * Resource that can manage several resource (items) inside.\n * All resources need to have the same pixel size.\n * Parent class for CubeResource and ArrayResource\n * @memberof PIXI\n */\nexport abstract class AbstractMultiResource extends Resource\n{\n    /** Number of elements in array. */\n    readonly length: number;\n\n    /**\n     * Collection of partial baseTextures that correspond to resources.\n     * @readonly\n     */\n    items: Array<BaseTexture>;\n\n    /**\n     * Dirty IDs for each part.\n     * @readonly\n     */\n    itemDirtyIds: Array<number>;\n\n    /**\n     * Promise when loading.\n     * @default null\n     */\n    private _load: Promise<this>;\n\n    /** Bound baseTexture, there can only be one. */\n    baseTexture: BaseTexture;\n\n    /**\n     * @param length\n     * @param options - Options to for Resource constructor\n     * @param {number} [options.width] - Width of the resource\n     * @param {number} [options.height] - Height of the resource\n     */\n    constructor(length: number, options?: ISize)\n    {\n        const { width, height } = options || {};\n\n        super(width, height);\n\n        this.items = [];\n        this.itemDirtyIds = [];\n\n        for (let i = 0; i < length; i++)\n        {\n            const partTexture = new BaseTexture();\n\n            this.items.push(partTexture);\n            // -2 - first run of texture array upload\n            // -1 - texture item was allocated\n            // >=0 - texture item uploaded , in sync with items[i].dirtyId\n            this.itemDirtyIds.push(-2);\n        }\n\n        this.length = length;\n        this._load = null;\n        this.baseTexture = null;\n    }\n\n    /**\n     * Used from ArrayResource and CubeResource constructors.\n     * @param resources - Can be resources, image elements, canvas, etc. ,\n     *  length should be same as constructor length\n     * @param options - Detect options for resources\n     */\n    protected initFromArray(resources: Array<any>, options?: IAutoDetectOptions): void\n    {\n        for (let i = 0; i < this.length; i++)\n        {\n            if (!resources[i])\n            {\n                continue;\n            }\n            if (resources[i].castToBaseTexture)\n            {\n                this.addBaseTextureAt(resources[i].castToBaseTexture(), i);\n            }\n            else if (resources[i] instanceof Resource)\n            {\n                this.addResourceAt(resources[i], i);\n            }\n            else\n            {\n                this.addResourceAt(autoDetectResource(resources[i], options), i);\n            }\n        }\n    }\n\n    /** Destroy this BaseImageResource. */\n    dispose(): void\n    {\n        for (let i = 0, len = this.length; i < len; i++)\n        {\n            this.items[i].destroy();\n        }\n        this.items = null;\n        this.itemDirtyIds = null;\n        this._load = null;\n    }\n\n    /**\n     * Set a baseTexture by ID\n     * @param baseTexture\n     * @param index - Zero-based index of resource to set\n     * @returns - Instance for chaining\n     */\n    abstract addBaseTextureAt(baseTexture: BaseTexture, index: number): this;\n\n    /**\n     * Set a resource by ID\n     * @param resource\n     * @param index - Zero-based index of resource to set\n     * @returns - Instance for chaining\n     */\n    addResourceAt(resource: Resource, index: number): this\n    {\n        if (!this.items[index])\n        {\n            throw new Error(`Index ${index} is out of bounds`);\n        }\n\n        // Inherit the first resource dimensions\n        if (resource.valid && !this.valid)\n        {\n            this.resize(resource.width, resource.height);\n        }\n\n        this.items[index].setResource(resource);\n\n        return this;\n    }\n\n    /**\n     * Set the parent base texture.\n     * @param baseTexture\n     */\n    bind(baseTexture: BaseTexture): void\n    {\n        if (this.baseTexture !== null)\n        {\n            throw new Error('Only one base texture per TextureArray is allowed');\n        }\n        super.bind(baseTexture);\n\n        for (let i = 0; i < this.length; i++)\n        {\n            this.items[i].parentTextureArray = baseTexture;\n            this.items[i].on('update', baseTexture.update, baseTexture);\n        }\n    }\n\n    /**\n     * Unset the parent base texture.\n     * @param baseTexture\n     */\n    unbind(baseTexture: BaseTexture): void\n    {\n        super.unbind(baseTexture);\n\n        for (let i = 0; i < this.length; i++)\n        {\n            this.items[i].parentTextureArray = null;\n            this.items[i].off('update', baseTexture.update, baseTexture);\n        }\n    }\n\n    /**\n     * Load all the resources simultaneously\n     * @returns - When load is resolved\n     */\n    load(): Promise<this>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        const resources = this.items.map((item) => item.resource).filter((item) => item);\n\n        // TODO: also implement load part-by-part strategy\n        const promises = resources.map((item) => item.load());\n\n        this._load = Promise.all(promises)\n            .then(() =>\n            {\n                const { realWidth, realHeight } = this.items[0];\n\n                this.resize(realWidth, realHeight);\n\n                return Promise.resolve(this);\n            }\n            );\n\n        return this._load;\n    }\n}\n","import { AbstractMultiResource } from './AbstractMultiResource';\nimport { TARGETS } from '@pixi/constants';\nimport type { BaseTexture } from '../BaseTexture';\n\nimport type { BaseImageResource } from './BaseImageResource';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\nimport type { ISize } from '@pixi/math';\n\n/**\n * A resource that contains a number of sources.\n * @memberof PIXI\n */\nexport class ArrayResource extends AbstractMultiResource\n{\n    /**\n     * @param source - Number of items in array or the collection\n     *        of image URLs to use. Can also be resources, image elements, canvas, etc.\n     * @param options - Options to apply to {@link PIXI.autoDetectResource}\n     * @param {number} [options.width] - Width of the resource\n     * @param {number} [options.height] - Height of the resource\n     */\n    constructor(source: number | Array<any>, options?: ISize)\n    {\n        const { width, height } = options || {};\n\n        let urls;\n        let length: number;\n\n        if (Array.isArray(source))\n        {\n            urls = source;\n            length = source.length;\n        }\n        else\n        {\n            length = source;\n        }\n\n        super(length, { width, height });\n\n        if (urls)\n        {\n            this.initFromArray(urls, options);\n        }\n    }\n\n    /**\n     * Set a baseTexture by ID,\n     * ArrayResource just takes resource from it, nothing more\n     * @param baseTexture\n     * @param index - Zero-based index of resource to set\n     * @returns - Instance for chaining\n     */\n    addBaseTextureAt(baseTexture: BaseTexture, index: number): this\n    {\n        if (baseTexture.resource)\n        {\n            this.addResourceAt(baseTexture.resource, index);\n        }\n        else\n        {\n            throw new Error('ArrayResource does not support RenderTexture');\n        }\n\n        return this;\n    }\n\n    /**\n     * Add binding\n     * @param baseTexture\n     */\n    bind(baseTexture: BaseTexture): void\n    {\n        super.bind(baseTexture);\n\n        baseTexture.target = TARGETS.TEXTURE_2D_ARRAY;\n    }\n\n    /**\n     * Upload the resources to the GPU.\n     * @param renderer\n     * @param texture\n     * @param glTexture\n     * @returns - whether texture was uploaded\n     */\n    upload(renderer: Renderer, texture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const { length, itemDirtyIds, items } = this;\n        const { gl } = renderer;\n\n        if (glTexture.dirtyId < 0)\n        {\n            gl.texImage3D(\n                gl.TEXTURE_2D_ARRAY,\n                0,\n                glTexture.internalFormat,\n                this._width,\n                this._height,\n                length,\n                0,\n                texture.format,\n                glTexture.type,\n                null\n            );\n        }\n\n        for (let i = 0; i < length; i++)\n        {\n            const item = items[i];\n\n            if (itemDirtyIds[i] < item.dirtyId)\n            {\n                itemDirtyIds[i] = item.dirtyId;\n                if (item.valid)\n                {\n                    gl.texSubImage3D(\n                        gl.TEXTURE_2D_ARRAY,\n                        0,\n                        0, // xoffset\n                        0, // yoffset\n                        i, // zoffset\n                        item.resource.width,\n                        item.resource.height,\n                        1,\n                        texture.format,\n                        glTexture.type,\n                        (item.resource as BaseImageResource).source\n                    );\n                }\n            }\n        }\n\n        return true;\n    }\n}\n","import { Resource } from './Resource';\nimport { determineCrossOrigin } from '@pixi/utils';\nimport { ALPHA_MODES } from '@pixi/constants';\n\nimport type { BaseTexture, ImageSource } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\n/**\n * Base for all the image/canvas resources.\n * @memberof PIXI\n */\nexport class BaseImageResource extends Resource\n{\n    /**\n     * The source element.\n     * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement}\n     * @readonly\n     */\n    public source: ImageSource;\n\n    /**\n     * If set to `true`, will force `texImage2D` over `texSubImage2D` for uploading.\n     * Certain types of media (e.g. video) using `texImage2D` is more performant.\n     * @default false\n     * @private\n     */\n    public noSubImage: boolean;\n\n    /**\n     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} source\n     */\n    constructor(source: ImageSource)\n    {\n        const sourceAny = source as any;\n        const width = sourceAny.naturalWidth || sourceAny.videoWidth || sourceAny.width;\n        const height = sourceAny.naturalHeight || sourceAny.videoHeight || sourceAny.height;\n\n        super(width, height);\n\n        this.source = source;\n        this.noSubImage = false;\n    }\n\n    /**\n     * Set cross origin based detecting the url and the crossorigin\n     * @param element - Element to apply crossOrigin\n     * @param url - URL to check\n     * @param crossorigin - Cross origin value to use\n     */\n    static crossOrigin(element: HTMLImageElement | HTMLVideoElement, url: string, crossorigin?: boolean | string): void\n    {\n        if (crossorigin === undefined && url.indexOf('data:') !== 0)\n        {\n            element.crossOrigin = determineCrossOrigin(url);\n        }\n        else if (crossorigin !== false)\n        {\n            element.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';\n        }\n    }\n\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture\n     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] - (optional)\n     * @returns - true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture, source?: ImageSource): boolean\n    {\n        const gl = renderer.gl;\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        source = source || this.source;\n\n        if (source instanceof HTMLImageElement)\n        {\n            if (!source.complete || source.naturalWidth === 0)\n            {\n                return false;\n            }\n        }\n        else if (source instanceof HTMLVideoElement)\n        {\n            if (source.readyState <= 1)\n            {\n                return false;\n            }\n        }\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        if (!this.noSubImage\n            && baseTexture.target === gl.TEXTURE_2D\n            && glTexture.width === width\n            && glTexture.height === height)\n        {\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format, glTexture.type, source);\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(baseTexture.target, 0, glTexture.internalFormat, baseTexture.format, glTexture.type, source);\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if source width/height was changed, resize can cause extra baseTexture update.\n     * Triggers one update in any case.\n     */\n    update(): void\n    {\n        if (this.destroyed)\n        {\n            return;\n        }\n\n        const source = this.source as any;\n\n        const width = source.naturalWidth || source.videoWidth || source.width;\n        const height = source.naturalHeight || source.videoHeight || source.height;\n\n        this.resize(width, height);\n\n        super.update();\n    }\n\n    /** Destroy this {@link BaseImageResource} */\n    dispose(): void\n    {\n        this.source = null;\n    }\n}\n","import { BaseImageResource } from './BaseImageResource';\n\n/**\n * @interface OffscreenCanvas\n */\n\n/**\n * Resource type for HTMLCanvasElement.\n * @memberof PIXI\n */\nexport class CanvasResource extends BaseImageResource\n{\n    /**\n     * @param source - Canvas element to use\n     */\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(source: HTMLCanvasElement)\n    {\n        super(source);\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if source is HTMLCanvasElement or OffscreenCanvas\n     */\n    static test(source: unknown): source is OffscreenCanvas | HTMLCanvasElement\n    {\n        const { OffscreenCanvas } = globalThis;\n\n        // Check for browsers that don't yet support OffscreenCanvas\n        if (OffscreenCanvas && source instanceof OffscreenCanvas)\n        {\n            return true;\n        }\n\n        return globalThis.HTMLCanvasElement && source instanceof HTMLCanvasElement;\n    }\n}\n","import { AbstractMultiResource } from './AbstractMultiResource';\nimport { TARGETS } from '@pixi/constants';\n\nimport type { Resource } from './Resource';\nimport type { ISize } from '@pixi/math';\nimport type { ArrayFixed } from '@pixi/utils';\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\n/** Constructor options for CubeResource */\nexport interface ICubeResourceOptions extends ISize\n{\n    /** Whether to auto-load resources */\n    autoLoad?: boolean;\n\n    /** In case BaseTextures are supplied, whether to copy them or use. */\n    linkBaseTexture?: boolean;\n}\n\n/**\n * Resource for a CubeTexture which contains six resources.\n * @memberof PIXI\n */\nexport class CubeResource extends AbstractMultiResource\n{\n    items: ArrayFixed<BaseTexture, 6>;\n\n    /**\n     * In case BaseTextures are supplied, whether to use same resource or bind baseTexture itself.\n     * @protected\n     */\n    linkBaseTexture: boolean;\n\n    /**\n     * @param {Array<string|PIXI.Resource>} [source] - Collection of URLs or resources\n     *        to use as the sides of the cube.\n     * @param options - ImageResource options\n     * @param {number} [options.width] - Width of resource\n     * @param {number} [options.height] - Height of resource\n     * @param {number} [options.autoLoad=true] - Whether to auto-load resources\n     * @param {number} [options.linkBaseTexture=true] - In case BaseTextures are supplied,\n     *   whether to copy them or use\n     */\n    constructor(source?: ArrayFixed<string | Resource, 6>, options?: ICubeResourceOptions)\n    {\n        const { width, height, autoLoad, linkBaseTexture } = options || {};\n\n        if (source && source.length !== CubeResource.SIDES)\n        {\n            throw new Error(`Invalid length. Got ${source.length}, expected 6`);\n        }\n\n        super(6, { width, height });\n\n        for (let i = 0; i < CubeResource.SIDES; i++)\n        {\n            this.items[i].target = TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + i;\n        }\n\n        this.linkBaseTexture = linkBaseTexture !== false;\n\n        if (source)\n        {\n            this.initFromArray(source, options);\n        }\n\n        if (autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    /**\n     * Add binding.\n     * @param baseTexture - parent base texture\n     */\n    bind(baseTexture: BaseTexture): void\n    {\n        super.bind(baseTexture);\n\n        baseTexture.target = TARGETS.TEXTURE_CUBE_MAP;\n    }\n\n    addBaseTextureAt(baseTexture: BaseTexture, index: number, linkBaseTexture?: boolean): this\n    {\n        if (linkBaseTexture === undefined)\n        {\n            linkBaseTexture = this.linkBaseTexture;\n        }\n\n        if (!this.items[index])\n        {\n            throw new Error(`Index ${index} is out of bounds`);\n        }\n\n        if (!this.linkBaseTexture\n            || baseTexture.parentTextureArray\n            || Object.keys(baseTexture._glTextures).length > 0)\n        {\n            // copy mode\n            if (baseTexture.resource)\n            {\n                this.addResourceAt(baseTexture.resource, index);\n            }\n            else\n            {\n                throw new Error(`CubeResource does not support copying of renderTexture.`);\n            }\n        }\n        else\n        {\n            // link mode, the difficult one!\n            baseTexture.target = TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + index;\n            baseTexture.parentTextureArray = this.baseTexture;\n\n            this.items[index] = baseTexture;\n        }\n\n        if (baseTexture.valid && !this.valid)\n        {\n            this.resize(baseTexture.realWidth, baseTexture.realHeight);\n        }\n\n        this.items[index] = baseTexture;\n\n        return this;\n    }\n\n    /**\n     * Upload the resource\n     * @param renderer\n     * @param _baseTexture\n     * @param glTexture\n     * @returns {boolean} true is success\n     */\n    upload(renderer: Renderer, _baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const dirty = this.itemDirtyIds;\n\n        for (let i = 0; i < CubeResource.SIDES; i++)\n        {\n            const side = this.items[i];\n\n            if (dirty[i] < side.dirtyId || glTexture.dirtyId < _baseTexture.dirtyId)\n            {\n                if (side.valid && side.resource)\n                {\n                    side.resource.upload(renderer, side, glTexture);\n                    dirty[i] = side.dirtyId;\n                }\n                else if (dirty[i] < -1)\n                {\n                    // either item is not valid yet, either its a renderTexture\n                    // allocate the memory\n                    renderer.gl.texImage2D(side.target, 0,\n                        glTexture.internalFormat,\n                        _baseTexture.realWidth,\n                        _baseTexture.realHeight,\n                        0,\n                        _baseTexture.format,\n                        glTexture.type,\n                        null);\n                    dirty[i] = -1;\n                }\n            }\n        }\n\n        return true;\n    }\n\n    /** Number of texture sides to store for CubeResources. */\n    static SIDES = 6;\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if source is an array of 6 elements\n     */\n    static test(source: unknown): source is ArrayFixed<string | Resource, 6>\n    {\n        return Array.isArray(source) && source.length === CubeResource.SIDES;\n    }\n}\n","import { BaseImageResource } from './BaseImageResource';\nimport { settings } from '@pixi/settings';\nimport { ALPHA_MODES } from '@pixi/constants';\n\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\nexport interface IImageResourceOptions\n{\n    /** Start loading process */\n    autoLoad?: boolean;\n\n    /** Whether its required to create a bitmap before upload. */\n    createBitmap?: boolean;\n\n    /** Load image using cross origin. */\n    crossorigin?: boolean | string;\n\n    /** Premultiply image alpha in bitmap. */\n    alphaMode?: ALPHA_MODES;\n}\n\n/**\n * Resource type for HTMLImageElement.\n * @memberof PIXI\n */\nexport class ImageResource extends BaseImageResource\n{\n    /** URL of the image source */\n    url: string;\n\n    /**\n     * If the image should be disposed after upload\n     * @default false\n     */\n    preserveBitmap: boolean;\n\n    /**\n     * If capable, convert the image using createImageBitmap API.\n     * @default PIXI.settings.CREATE_IMAGE_BITMAP\n     */\n    createBitmap: boolean;\n\n    /**\n     * Controls texture alphaMode field\n     * Copies from options\n     * Default is `null`, copies option from baseTexture\n     * @readonly\n     */\n    alphaMode: ALPHA_MODES;\n\n    /**\n     * The ImageBitmap element created for a {@code HTMLImageElement}.\n     * @default null\n     */\n    bitmap: ImageBitmap;\n\n    /**\n     * Promise when loading.\n     * @default null\n     */\n    private _load: Promise<ImageResource>;\n\n    /** When process is completed */\n    private _process: Promise<ImageResource>;\n\n    /**\n     * @param source - image source or URL\n     * @param options\n     * @param {boolean} [options.autoLoad=true] - start loading process\n     * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - whether its required to create\n     *        a bitmap before upload\n     * @param {boolean} [options.crossorigin=true] - Load image using cross origin\n     * @param {PIXI.ALPHA_MODES} [options.alphaMode=PIXI.ALPHA_MODES.UNPACK] - Premultiply image alpha in bitmap\n     */\n    constructor(source: HTMLImageElement | string, options?: IImageResourceOptions)\n    {\n        options = options || {};\n\n        if (!(source instanceof HTMLImageElement))\n        {\n            const imageElement = new Image();\n\n            BaseImageResource.crossOrigin(imageElement, source, options.crossorigin);\n\n            imageElement.src = source;\n            source = imageElement;\n        }\n\n        super(source);\n\n        // FireFox 68, and possibly other versions, seems like setting the HTMLImageElement#width and #height\n        // to non-zero values before its loading completes if images are in a cache.\n        // Because of this, need to set the `_width` and the `_height` to zero to avoid uploading incomplete images.\n        // Please refer to the issue #5968 (https://github.com/pixijs/pixi.js/issues/5968).\n        if (!source.complete && !!this._width && !!this._height)\n        {\n            this._width = 0;\n            this._height = 0;\n        }\n\n        this.url = source.src;\n\n        this._process = null;\n\n        this.preserveBitmap = false;\n        this.createBitmap = (options.createBitmap !== undefined\n            ? options.createBitmap : settings.CREATE_IMAGE_BITMAP) && !!globalThis.createImageBitmap;\n        this.alphaMode = typeof options.alphaMode === 'number' ? options.alphaMode : null;\n        this.bitmap = null;\n\n        this._load = null;\n\n        if (options.autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    /**\n     * Returns a promise when image will be loaded and processed.\n     * @param createBitmap - whether process image into bitmap\n     */\n    load(createBitmap?: boolean): Promise<ImageResource>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        if (createBitmap !== undefined)\n        {\n            this.createBitmap = createBitmap;\n        }\n\n        this._load = new Promise((resolve, reject): void =>\n        {\n            const source = this.source as HTMLImageElement;\n\n            this.url = source.src;\n\n            const completed = (): void =>\n            {\n                if (this.destroyed)\n                {\n                    return;\n                }\n                source.onload = null;\n                source.onerror = null;\n\n                this.resize(source.width, source.height);\n                this._load = null;\n\n                if (this.createBitmap)\n                {\n                    resolve(this.process());\n                }\n                else\n                {\n                    resolve(this);\n                }\n            };\n\n            if (source.complete && source.src)\n            {\n                completed();\n            }\n            else\n            {\n                source.onload = completed;\n                source.onerror = (event): void =>\n                {\n                    // Avoids Promise freezing when resource broken\n                    reject(event);\n                    this.onError.emit(event);\n                };\n            }\n        });\n\n        return this._load;\n    }\n\n    /**\n     * Called when we need to convert image into BitmapImage.\n     * Can be called multiple times, real promise is cached inside.\n     * @returns - Cached promise to fill that bitmap\n     */\n    process(): Promise<ImageResource>\n    {\n        const source = this.source as HTMLImageElement;\n\n        if (this._process !== null)\n        {\n            return this._process;\n        }\n        if (this.bitmap !== null || !globalThis.createImageBitmap)\n        {\n            return Promise.resolve(this);\n        }\n\n        const createImageBitmap = globalThis.createImageBitmap as any;\n        const cors = !source.crossOrigin || source.crossOrigin === 'anonymous';\n\n        this._process = fetch(source.src,\n            {\n                mode: cors ? 'cors' : 'no-cors'\n            })\n            .then((r) => r.blob())\n            .then((blob) => createImageBitmap(blob,\n                0, 0, source.width, source.height,\n                {\n                    premultiplyAlpha: this.alphaMode === null || this.alphaMode === ALPHA_MODES.UNPACK\n                        ? 'premultiply' : 'none',\n                }))\n            .then((bitmap: ImageBitmap) =>\n            {\n                if (this.destroyed)\n                {\n                    return Promise.reject();\n                }\n                this.bitmap = bitmap;\n                this.update();\n                this._process = null;\n\n                return Promise.resolve(this);\n            });\n\n        return this._process;\n    }\n\n    /**\n     * Upload the image resource to GPU.\n     * @param renderer - Renderer to upload to\n     * @param baseTexture - BaseTexture for this resource\n     * @param glTexture - GLTexture to use\n     * @returns {boolean} true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        if (typeof this.alphaMode === 'number')\n        {\n            // bitmap stores unpack premultiply flag, we dont have to notify texImage2D about it\n\n            baseTexture.alphaMode = this.alphaMode;\n        }\n\n        if (!this.createBitmap)\n        {\n            return super.upload(renderer, baseTexture, glTexture);\n        }\n        if (!this.bitmap)\n        {\n            // yeah, ignore the output\n            this.process();\n            if (!this.bitmap)\n            {\n                return false;\n            }\n        }\n\n        super.upload(renderer, baseTexture, glTexture, this.bitmap);\n\n        if (!this.preserveBitmap)\n        {\n            // checks if there are other renderers that possibly need this bitmap\n\n            let flag = true;\n\n            const glTextures = baseTexture._glTextures;\n\n            for (const key in glTextures)\n            {\n                const otherTex = glTextures[key];\n\n                if (otherTex !== glTexture && otherTex.dirtyId !== baseTexture.dirtyId)\n                {\n                    flag = false;\n                    break;\n                }\n            }\n\n            if (flag)\n            {\n                if (this.bitmap.close)\n                {\n                    this.bitmap.close();\n                }\n\n                this.bitmap = null;\n            }\n        }\n\n        return true;\n    }\n\n    /** Destroys this resource. */\n    dispose(): void\n    {\n        (this.source as HTMLImageElement).onload = null;\n        (this.source as HTMLImageElement).onerror = null;\n\n        super.dispose();\n\n        if (this.bitmap)\n        {\n            this.bitmap.close();\n            this.bitmap = null;\n        }\n        this._process = null;\n        this._load = null;\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if source is string or HTMLImageElement\n     */\n    static test(source: unknown): source is string | HTMLImageElement\n    {\n        return typeof source === 'string' || source instanceof HTMLImageElement;\n    }\n}\n","import { uid } from '@pixi/utils';\nimport { BaseImageResource } from './BaseImageResource';\nimport { settings } from '@pixi/settings';\n\nimport type { ISize } from '@pixi/math';\n\nexport interface ISVGResourceOptions\n{\n    source?: string;\n    scale?: number;\n    width?: number;\n    height?: number;\n    autoLoad?: boolean;\n    crossorigin?: boolean | string;\n}\n/**\n * Resource type for SVG elements and graphics.\n * @memberof PIXI\n */\nexport class SVGResource extends BaseImageResource\n{\n    /** Base64 encoded SVG element or URL for SVG file. */\n    public readonly svg: string;\n\n    /** The source scale to apply when rasterizing on load. */\n    public readonly scale: number;\n\n    /** A width override for rasterization on load. */\n    public readonly _overrideWidth: number;\n\n    /** A height override for rasterization on load. */\n    public readonly _overrideHeight: number;\n\n    /** Call when completely loaded. */\n    private _resolve: () => void;\n\n    /** Promise when loading */\n    private _load: Promise<SVGResource>;\n\n    /** Cross origin value to use */\n    private _crossorigin?: boolean | string;\n\n    /**\n     * @param sourceBase64 - Base64 encoded SVG element or URL for SVG file.\n     * @param {object} [options] - Options to use\n     * @param {number} [options.scale=1] - Scale to apply to SVG. Overridden by...\n     * @param {number} [options.width] - Rasterize SVG this wide. Aspect ratio preserved if height not specified.\n     * @param {number} [options.height] - Rasterize SVG this high. Aspect ratio preserved if width not specified.\n     * @param {boolean} [options.autoLoad=true] - Start loading right away.\n     */\n    constructor(sourceBase64: string, options?: ISVGResourceOptions)\n    {\n        options = options || {};\n\n        super(settings.ADAPTER.createCanvas());\n        this._width = 0;\n        this._height = 0;\n\n        this.svg = sourceBase64;\n        this.scale = options.scale || 1;\n        this._overrideWidth = options.width;\n        this._overrideHeight = options.height;\n\n        this._resolve = null;\n        this._crossorigin = options.crossorigin;\n        this._load = null;\n\n        if (options.autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    load(): Promise<SVGResource>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        this._load = new Promise((resolve): void =>\n        {\n            // Save this until after load is finished\n            this._resolve = (): void =>\n            {\n                this.resize(this.source.width, this.source.height);\n                resolve(this);\n            };\n\n            // Convert SVG inline string to data-uri\n            if (SVGResource.SVG_XML.test(this.svg.trim()))\n            {\n                if (!btoa)\n                {\n                    throw new Error('Your browser doesn\\'t support base64 conversions.');\n                }\n                (this as any).svg = `data:image/svg+xml;base64,${btoa(unescape(encodeURIComponent(this.svg)))}`;\n            }\n\n            this._loadSvg();\n        });\n\n        return this._load;\n    }\n\n    /** Loads an SVG image from `imageUrl` or `data URL`. */\n    private _loadSvg(): void\n    {\n        const tempImage = new Image();\n\n        BaseImageResource.crossOrigin(tempImage, this.svg, this._crossorigin);\n        tempImage.src = this.svg;\n\n        tempImage.onerror = (event): void =>\n        {\n            if (!this._resolve)\n            {\n                return;\n            }\n\n            tempImage.onerror = null;\n            this.onError.emit(event);\n        };\n\n        tempImage.onload = (): void =>\n        {\n            if (!this._resolve)\n            {\n                return;\n            }\n\n            const svgWidth = tempImage.width;\n            const svgHeight = tempImage.height;\n\n            if (!svgWidth || !svgHeight)\n            {\n                throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');\n            }\n\n            // Set render size\n            let width = svgWidth * this.scale;\n            let height = svgHeight * this.scale;\n\n            if (this._overrideWidth || this._overrideHeight)\n            {\n                width = this._overrideWidth || this._overrideHeight / svgHeight * svgWidth;\n                height = this._overrideHeight || this._overrideWidth / svgWidth * svgHeight;\n            }\n            width = Math.round(width);\n            height = Math.round(height);\n\n            // Create a canvas element\n            const canvas = this.source as HTMLCanvasElement;\n\n            canvas.width = width;\n            canvas.height = height;\n            (canvas as any)._pixiId = `canvas_${uid()}`;\n\n            // Draw the Svg to the canvas\n            canvas\n                .getContext('2d')\n                .drawImage(tempImage, 0, 0, svgWidth, svgHeight, 0, 0, width, height);\n\n            this._resolve();\n            this._resolve = null;\n        };\n    }\n\n    /**\n     * Get size from an svg string using a regular expression.\n     * @param svgString - a serialized svg element\n     * @returns - image extension\n     */\n    static getSize(svgString?: string): ISize\n    {\n        const sizeMatch = SVGResource.SVG_SIZE.exec(svgString);\n        const size: any = {};\n\n        if (sizeMatch)\n        {\n            size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3]));\n            size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]));\n        }\n\n        return size;\n    }\n\n    /** Destroys this texture. */\n    dispose(): void\n    {\n        super.dispose();\n        this._resolve = null;\n        this._crossorigin = null;\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @param {string} extension - The extension of source, if set\n     * @returns {boolean} - If the source is a SVG source or data file\n     */\n    static test(source: unknown, extension?: string): boolean\n    {\n        // url file extension is SVG\n        return extension === 'svg'\n            // source is SVG data-uri\n            || (typeof source === 'string' && source.startsWith('data:image/svg+xml'))\n            // source is SVG inline\n            || (typeof source === 'string' && SVGResource.SVG_XML.test(source));\n    }\n\n    /**\n     * Regular expression for SVG XML document.\n     * @example &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?&gt;&lt;!-- image/svg --&gt;&lt;svg\n     * @readonly\n     */\n    static SVG_XML = /^(<\\?xml[^?]+\\?>)?\\s*(<!--[^(-->)]*-->)?\\s*\\<svg/m;\n\n    /**\n     * Regular expression for SVG size.\n     * @example &lt;svg width=\"100\" height=\"100\"&gt;&lt;/svg&gt;\n     * @readonly\n     */\n    static SVG_SIZE = /<svg[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*>/i; // eslint-disable-line max-len\n}\n","import { BaseImageResource } from './BaseImageResource';\nimport { Ticker } from '@pixi/ticker';\n\nimport type { Dict } from '@pixi/utils';\n\nexport interface IVideoResourceOptions\n{\n    autoLoad?: boolean;\n    autoPlay?: boolean;\n    updateFPS?: number;\n    crossorigin?: boolean | string;\n}\n\nexport interface IVideoResourceOptionsElement\n{\n    src: string;\n    mime: string;\n}\n\n/**\n * Resource type for {@code HTMLVideoElement}.\n * @memberof PIXI\n */\nexport class VideoResource extends BaseImageResource\n{\n    /** Override the source to be the video element. */\n    public source: HTMLVideoElement;\n\n    /**\n     * `true` to use PIXI.Ticker.shared to auto update the base texture.\n     * @default true\n     */\n    protected _autoUpdate: boolean;\n\n    /**\n     * `true` if the instance is currently connected to PIXI.Ticker.shared to auto update the base texture.\n     * @default false\n     */\n    protected _isConnectedToTicker: boolean;\n    protected _updateFPS: number;\n    protected _msToNextUpdate: number;\n\n    /**\n     * When set to true will automatically play videos used by this texture once\n     * they are loaded. If false, it will not modify the playing state.\n     * @default true\n     */\n    protected autoPlay: boolean;\n\n    /**\n     * Promise when loading.\n     * @default null\n     */\n    private _load: Promise<VideoResource>;\n\n    /** Callback when completed with load. */\n    private _resolve: (value?: VideoResource | PromiseLike<VideoResource>) => void;\n\n    /**\n     * @param {HTMLVideoElement|object|string|Array<string|object>} source - Video element to use.\n     * @param {object} [options] - Options to use\n     * @param {boolean} [options.autoLoad=true] - Start loading the video immediately\n     * @param {boolean} [options.autoPlay=true] - Start playing video immediately\n     * @param {number} [options.updateFPS=0] - How many times a second to update the texture from the video.\n     * Leave at 0 to update at every render.\n     * @param {boolean} [options.crossorigin=true] - Load image using cross origin\n     */\n    constructor(\n        source?: HTMLVideoElement | Array<string | IVideoResourceOptionsElement> | string, options?: IVideoResourceOptions\n    )\n    {\n        options = options || {};\n\n        if (!(source instanceof HTMLVideoElement))\n        {\n            const videoElement = document.createElement('video');\n\n            // workaround for https://github.com/pixijs/pixi.js/issues/5996\n            videoElement.setAttribute('preload', 'auto');\n            videoElement.setAttribute('webkit-playsinline', '');\n            videoElement.setAttribute('playsinline', '');\n\n            if (typeof source === 'string')\n            {\n                source = [source];\n            }\n\n            const firstSrc = (source[0] as IVideoResourceOptionsElement).src || source[0] as string;\n\n            BaseImageResource.crossOrigin(videoElement, firstSrc, options.crossorigin);\n\n            // array of objects or strings\n            for (let i = 0; i < source.length; ++i)\n            {\n                const sourceElement = document.createElement('source');\n\n                let { src, mime } = source[i] as IVideoResourceOptionsElement;\n\n                src = src || source[i] as string;\n\n                const baseSrc = src.split('?').shift().toLowerCase();\n                const ext = baseSrc.slice(baseSrc.lastIndexOf('.') + 1);\n\n                mime = mime || VideoResource.MIME_TYPES[ext] || `video/${ext}`;\n\n                sourceElement.src = src;\n                sourceElement.type = mime;\n\n                videoElement.appendChild(sourceElement);\n            }\n\n            // Override the source\n            source = videoElement;\n        }\n\n        super(source);\n\n        this.noSubImage = true;\n\n        this._autoUpdate = true;\n        this._isConnectedToTicker = false;\n\n        this._updateFPS = options.updateFPS || 0;\n        this._msToNextUpdate = 0;\n        this.autoPlay = options.autoPlay !== false;\n\n        this._load = null;\n        this._resolve = null;\n\n        // Bind for listeners\n        this._onCanPlay = this._onCanPlay.bind(this);\n        this._onError = this._onError.bind(this);\n\n        if (options.autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    /**\n     * Trigger updating of the texture.\n     * @param _deltaTime - time delta since last tick\n     */\n    update(_deltaTime = 0): void\n    {\n        if (!this.destroyed)\n        {\n            // account for if video has had its playbackRate changed\n            const elapsedMS = Ticker.shared.elapsedMS * (this.source as HTMLVideoElement).playbackRate;\n\n            this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);\n            if (!this._updateFPS || this._msToNextUpdate <= 0)\n            {\n                super.update(/* deltaTime*/);\n                this._msToNextUpdate = this._updateFPS ? Math.floor(1000 / this._updateFPS) : 0;\n            }\n        }\n    }\n\n    /**\n     * Start preloading the video resource.\n     * @returns {Promise<void>} Handle the validate event\n     */\n    load(): Promise<VideoResource>\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        const source = this.source as HTMLVideoElement;\n\n        if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA)\n            && source.width && source.height)\n        {\n            (source as any).complete = true;\n        }\n\n        source.addEventListener('play', this._onPlayStart.bind(this));\n        source.addEventListener('pause', this._onPlayStop.bind(this));\n\n        if (!this._isSourceReady())\n        {\n            source.addEventListener('canplay', this._onCanPlay);\n            source.addEventListener('canplaythrough', this._onCanPlay);\n            source.addEventListener('error', this._onError, true);\n        }\n        else\n        {\n            this._onCanPlay();\n        }\n\n        this._load = new Promise((resolve): void =>\n        {\n            if (this.valid)\n            {\n                resolve(this);\n            }\n            else\n            {\n                this._resolve = resolve;\n\n                source.load();\n            }\n        });\n\n        return this._load;\n    }\n\n    /**\n     * Handle video error events.\n     * @param event\n     */\n    private _onError(event: ErrorEvent): void\n    {\n        (this.source as HTMLVideoElement).removeEventListener('error', this._onError, true);\n        this.onError.emit(event);\n    }\n\n    /**\n     * Returns true if the underlying source is playing.\n     * @returns - True if playing.\n     */\n    private _isSourcePlaying(): boolean\n    {\n        const source = this.source as HTMLVideoElement;\n\n        return (!source.paused && !source.ended && this._isSourceReady());\n    }\n\n    /**\n     * Returns true if the underlying source is ready for playing.\n     * @returns - True if ready.\n     */\n    private _isSourceReady(): boolean\n    {\n        const source = this.source as HTMLVideoElement;\n\n        return source.readyState > 2;\n    }\n\n    /** Runs the update loop when the video is ready to play. */\n    private _onPlayStart(): void\n    {\n        // Just in case the video has not received its can play even yet..\n        if (!this.valid)\n        {\n            this._onCanPlay();\n        }\n\n        if (this.autoUpdate && !this._isConnectedToTicker)\n        {\n            Ticker.shared.add(this.update, this);\n            this._isConnectedToTicker = true;\n        }\n    }\n\n    /** Fired when a pause event is triggered, stops the update loop. */\n    private _onPlayStop(): void\n    {\n        if (this._isConnectedToTicker)\n        {\n            Ticker.shared.remove(this.update, this);\n            this._isConnectedToTicker = false;\n        }\n    }\n\n    /** Fired when the video is loaded and ready to play. */\n    private _onCanPlay(): void\n    {\n        const source = this.source as HTMLVideoElement;\n\n        source.removeEventListener('canplay', this._onCanPlay);\n        source.removeEventListener('canplaythrough', this._onCanPlay);\n\n        const valid = this.valid;\n\n        this.resize(source.videoWidth, source.videoHeight);\n\n        // prevent multiple loaded dispatches..\n        if (!valid && this._resolve)\n        {\n            this._resolve(this);\n            this._resolve = null;\n        }\n\n        if (this._isSourcePlaying())\n        {\n            this._onPlayStart();\n        }\n        else if (this.autoPlay)\n        {\n            source.play();\n        }\n    }\n\n    /** Destroys this texture. */\n    dispose(): void\n    {\n        if (this._isConnectedToTicker)\n        {\n            Ticker.shared.remove(this.update, this);\n            this._isConnectedToTicker = false;\n        }\n\n        const source = this.source as HTMLVideoElement;\n\n        if (source)\n        {\n            source.removeEventListener('error', this._onError, true);\n            source.pause();\n            source.src = '';\n            source.load();\n        }\n        super.dispose();\n    }\n\n    /** Should the base texture automatically update itself, set to true by default. */\n    get autoUpdate(): boolean\n    {\n        return this._autoUpdate;\n    }\n\n    set autoUpdate(value: boolean)\n    {\n        if (value !== this._autoUpdate)\n        {\n            this._autoUpdate = value;\n\n            if (!this._autoUpdate && this._isConnectedToTicker)\n            {\n                Ticker.shared.remove(this.update, this);\n                this._isConnectedToTicker = false;\n            }\n            else if (this._autoUpdate && !this._isConnectedToTicker && this._isSourcePlaying())\n            {\n                Ticker.shared.add(this.update, this);\n                this._isConnectedToTicker = true;\n            }\n        }\n    }\n\n    /**\n     * How many times a second to update the texture from the video. Leave at 0 to update at every render.\n     * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\n     */\n    get updateFPS(): number\n    {\n        return this._updateFPS;\n    }\n\n    set updateFPS(value: number)\n    {\n        if (value !== this._updateFPS)\n        {\n            this._updateFPS = value;\n        }\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @param {string} extension - The extension of source, if set\n     * @returns {boolean} `true` if video source\n     */\n    static test(source: unknown, extension?: string): source is HTMLVideoElement\n    {\n        return (globalThis.HTMLVideoElement && source instanceof HTMLVideoElement)\n            || VideoResource.TYPES.indexOf(extension) > -1;\n    }\n\n    /**\n     * List of common video file extensions supported by VideoResource.\n     * @readonly\n     */\n    static TYPES: Array<string> = ['mp4', 'm4v', 'webm', 'ogg', 'ogv', 'h264', 'avi', 'mov'];\n\n    /**\n     * Map of video MIME types that can't be directly derived from file extensions.\n     * @readonly\n     */\n    static MIME_TYPES: Dict<string> = {\n        ogv: 'video/ogg',\n        mov: 'video/quicktime',\n        m4v: 'video/mp4',\n    };\n}\n","import { BaseImageResource } from './BaseImageResource';\n\n/**\n * Resource type for ImageBitmap.\n * @memberof PIXI\n */\nexport class ImageBitmapResource extends BaseImageResource\n{\n    /**\n     * @param source - Image element to use\n     */\n    // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n    constructor(source: ImageBitmap)\n    {\n        super(source);\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     * @param {*} source - The source object\n     * @returns {boolean} `true` if source is an ImageBitmap\n     */\n    static test(source: unknown): source is ImageBitmap\n    {\n        return !!globalThis.createImageBitmap && typeof ImageBitmap !== 'undefined' && source instanceof ImageBitmap;\n    }\n}\n","import { INSTALLED } from './autoDetectResource';\nimport { ArrayResource } from './ArrayResource';\nimport { BufferResource } from './BufferResource';\nimport { CanvasResource } from './CanvasResource';\nimport { CubeResource } from './CubeResource';\nimport { ImageResource } from './ImageResource';\nimport { SVGResource } from './SVGResource';\nimport { VideoResource } from './VideoResource';\nimport { ImageBitmapResource } from './ImageBitmapResource';\n\nexport * from './Resource';\nexport * from './BaseImageResource';\n\nINSTALLED.push(\n    ImageResource,\n    ImageBitmapResource,\n    CanvasResource,\n    VideoResource,\n    SVGResource,\n    BufferResource,\n    CubeResource,\n    ArrayResource\n);\n\nexport * from './autoDetectResource';\nexport * from './AbstractMultiResource';\nexport * from './ArrayResource';\nexport * from './BufferResource';\nexport * from './CanvasResource';\nexport * from './CubeResource';\nexport * from './ImageResource';\nexport * from './SVGResource';\nexport * from './VideoResource';\nexport * from './ImageBitmapResource';\n","import { ALPHA_MODES } from '@pixi/constants';\nimport { BufferResource } from './BufferResource';\n\nimport type { BaseTexture } from '../BaseTexture';\nimport type { Renderer } from '../../Renderer';\nimport type { GLTexture } from '../GLTexture';\n\n/**\n * Resource type for DepthTexture.\n * @memberof PIXI\n */\nexport class DepthResource extends BufferResource\n{\n    /**\n     * Upload the texture to the GPU.\n     * @param renderer - Upload to the renderer\n     * @param baseTexture - Reference to parent texture\n     * @param glTexture - glTexture\n     * @returns - true is success\n     */\n    upload(renderer: Renderer, baseTexture: BaseTexture, glTexture: GLTexture): boolean\n    {\n        const gl = renderer.gl;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.alphaMode === ALPHA_MODES.UNPACK);\n\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        if (glTexture.width === width && glTexture.height === height)\n        {\n            gl.texSubImage2D(\n                baseTexture.target,\n                0,\n                0,\n                0,\n                width,\n                height,\n                baseTexture.format,\n                glTexture.type,\n                this.data,\n            );\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(\n                baseTexture.target,\n                0,\n                glTexture.internalFormat,\n                width,\n                height,\n                0,\n                baseTexture.format,\n                glTexture.type,\n                this.data,\n            );\n        }\n\n        return true;\n    }\n}\n","import { Runner } from '@pixi/runner';\nimport { BaseTexture } from '../textures/BaseTexture';\nimport { DepthResource } from '../textures/resources/DepthResource';\nimport { FORMATS, MIPMAP_MODES, SCALE_MODES, TYPES, MSAA_QUALITY } from '@pixi/constants';\n\nimport type { GLFramebuffer } from './GLFramebuffer';\n\n/**\n * A framebuffer can be used to render contents off of the screen. {@link PIXI.BaseRenderTexture} uses\n * one internally to render into itself. You can attach a depth or stencil buffer to a framebuffer.\n *\n * On WebGL 2 machines, shaders can output to multiple textures simultaneously with GLSL 300 ES.\n * @memberof PIXI\n */\nexport class Framebuffer\n{\n    /** Width of framebuffer in pixels. */\n    public width: number;\n\n    /** Height of framebuffer in pixels. */\n    public height: number;\n\n    /**\n     * Desired number of samples for antialiasing. 0 means AA should not be used.\n     *\n     * Experimental WebGL2 feature, allows to use antialiasing in individual renderTextures.\n     * Antialiasing is the same as for main buffer with renderer `antialias:true` options.\n     * Seriously affects GPU memory consumption and GPU performance.\n     *\n     *```js\n     * renderTexture.framebuffer.multisample = PIXI.MSAA_QUALITY.HIGH;\n     * //...\n     * renderer.render(myContainer, {renderTexture});\n     * renderer.framebuffer.blit(); // copies data from MSAA framebuffer to texture\n     *  ```\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    public multisample: MSAA_QUALITY;\n\n    stencil: boolean;\n    depth: boolean;\n    dirtyId: number;\n    dirtyFormat: number;\n    dirtySize: number;\n    depthTexture: BaseTexture;\n    colorTextures: Array<BaseTexture>;\n    glFramebuffers: {[key: string]: GLFramebuffer};\n    disposeRunner: Runner;\n\n    /**\n     * @param width - Width of the frame buffer\n     * @param height - Height of the frame buffer\n     */\n    constructor(width: number, height: number)\n    {\n        this.width = Math.round(width || 100);\n        this.height = Math.round(height || 100);\n\n        this.stencil = false;\n        this.depth = false;\n\n        this.dirtyId = 0;\n        this.dirtyFormat = 0;\n        this.dirtySize = 0;\n\n        this.depthTexture = null;\n        this.colorTextures = [];\n\n        this.glFramebuffers = {};\n\n        this.disposeRunner = new Runner('disposeFramebuffer');\n        this.multisample = MSAA_QUALITY.NONE;\n    }\n\n    /**\n     * Reference to the colorTexture.\n     * @readonly\n     */\n    get colorTexture(): BaseTexture\n    {\n        return this.colorTextures[0];\n    }\n\n    /**\n     * Add texture to the colorTexture array.\n     * @param index - Index of the array to add the texture to\n     * @param texture - Texture to add to the array\n     */\n    addColorTexture(index = 0, texture?: BaseTexture): this\n    {\n        // TODO add some validation to the texture - same width / height etc?\n        this.colorTextures[index] = texture || new BaseTexture(null, {\n            scaleMode: SCALE_MODES.NEAREST,\n            resolution: 1,\n            mipmap: MIPMAP_MODES.OFF,\n            width: this.width,\n            height: this.height,\n        });\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Add a depth texture to the frame buffer.\n     * @param texture - Texture to add.\n     */\n    addDepthTexture(texture?: BaseTexture): this\n    {\n        /* eslint-disable max-len */\n        this.depthTexture = texture || new BaseTexture(new DepthResource(null, { width: this.width, height: this.height }), {\n            scaleMode: SCALE_MODES.NEAREST,\n            resolution: 1,\n            width: this.width,\n            height: this.height,\n            mipmap: MIPMAP_MODES.OFF,\n            format: FORMATS.DEPTH_COMPONENT,\n            type: TYPES.UNSIGNED_SHORT,\n        });\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /** Enable depth on the frame buffer. */\n    enableDepth(): this\n    {\n        this.depth = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /** Enable stencil on the frame buffer. */\n    enableStencil(): this\n    {\n        this.stencil = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Resize the frame buffer\n     * @param width - Width of the frame buffer to resize to\n     * @param height - Height of the frame buffer to resize to\n     */\n    resize(width: number, height: number): void\n    {\n        width = Math.round(width);\n        height = Math.round(height);\n\n        if (width === this.width && height === this.height) return;\n\n        this.width = width;\n        this.height = height;\n\n        this.dirtyId++;\n        this.dirtySize++;\n\n        for (let i = 0; i < this.colorTextures.length; i++)\n        {\n            const texture = this.colorTextures[i];\n            const resolution = texture.resolution;\n\n            // take into account the fact the texture may have a different resolution..\n            texture.setSize(width / resolution, height / resolution);\n        }\n\n        if (this.depthTexture)\n        {\n            const resolution = this.depthTexture.resolution;\n\n            this.depthTexture.setSize(width / resolution, height / resolution);\n        }\n    }\n\n    /** Disposes WebGL resources that are connected to this geometry. */\n    dispose(): void\n    {\n        this.disposeRunner.emit(this, false);\n    }\n\n    /** Destroys and removes the depth texture added to this framebuffer. */\n    destroyDepthTexture(): void\n    {\n        if (this.depthTexture)\n        {\n            this.depthTexture.destroy();\n            this.depthTexture = null;\n\n            ++this.dirtyId;\n            ++this.dirtyFormat;\n        }\n    }\n}\n","import { BaseTexture } from '../textures/BaseTexture';\nimport { Framebuffer } from '../framebuffer/Framebuffer';\nimport { MIPMAP_MODES, MSAA_QUALITY } from '@pixi/constants';\n\nimport type { IBaseTextureOptions } from '../textures/BaseTexture';\nimport type { MaskData } from '../mask/MaskData';\n\nexport interface BaseRenderTexture extends GlobalMixins.BaseRenderTexture, BaseTexture {}\n\n/**\n * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position\n * and rotation of the given Display Objects is ignored. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer();\n * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 800, height: 600 });\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, {renderTexture});\n * ```\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 100, height: 100 });\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n *\n * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture\n * ```\n * @memberof PIXI\n */\nexport class BaseRenderTexture extends BaseTexture\n{\n    public clearColor: number[];\n    public framebuffer: Framebuffer;\n\n    /** The data structure for the stencil masks. */\n    maskStack: Array<MaskData>;\n\n    /** The data structure for the filters. */\n    filterStack: Array<any>;\n\n    /**\n     * @param options\n     * @param {number} [options.width=100] - The width of the base render texture.\n     * @param {number} [options.height=100] - The height of the base render texture.\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES}\n     *   for possible values.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio\n     *   of the texture being generated.\n     * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer.\n     */\n    constructor(options: IBaseTextureOptions = {})\n    {\n        if (typeof options === 'number')\n        {\n            /* eslint-disable prefer-rest-params */\n            // Backward compatibility of signature\n            const width = arguments[0];\n            const height = arguments[1];\n            const scaleMode = arguments[2];\n            const resolution = arguments[3];\n\n            options = { width, height, scaleMode, resolution };\n            /* eslint-enable prefer-rest-params */\n        }\n\n        options.width = options.width || 100;\n        options.height = options.height || 100;\n        options.multisample = options.multisample !== undefined ? options.multisample : MSAA_QUALITY.NONE;\n\n        super(null, options);\n\n        // Set defaults\n        this.mipmap = MIPMAP_MODES.OFF;\n        this.valid = true;\n\n        this.clearColor = [0, 0, 0, 0];\n\n        this.framebuffer = new Framebuffer(this.realWidth, this.realHeight)\n            .addColorTexture(0, this);\n        this.framebuffer.multisample = options.multisample;\n\n        // TODO - could this be added the systems?\n        this.maskStack = [];\n        this.filterStack = [{}];\n    }\n\n    /**\n     * Resizes the BaseRenderTexture.\n     * @param desiredWidth - The desired width to resize to.\n     * @param desiredHeight - The desired height to resize to.\n     */\n    resize(desiredWidth: number, desiredHeight: number): void\n    {\n        this.framebuffer.resize(desiredWidth * this.resolution, desiredHeight * this.resolution);\n        this.setRealSize(this.framebuffer.width, this.framebuffer.height);\n    }\n\n    /**\n     * Frees the texture and framebuffer from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose(): void\n    {\n        this.framebuffer.dispose();\n\n        super.dispose();\n    }\n\n    /** Destroys this texture. */\n    destroy(): void\n    {\n        super.destroy();\n\n        this.framebuffer.destroyDepthTexture();\n        this.framebuffer = null;\n    }\n}\n","import { groupD8 } from '@pixi/math';\n\nimport type { Rectangle, ISize } from '@pixi/math';\n\n/**\n * Stores a texture's frame in UV coordinates, in\n * which everything lies in the rectangle `[(0,0), (1,0),\n * (1,1), (0,1)]`.\n *\n * | Corner       | Coordinates |\n * |--------------|-------------|\n * | Top-Left     | `(x0,y0)`   |\n * | Top-Right    | `(x1,y1)`   |\n * | Bottom-Right | `(x2,y2)`   |\n * | Bottom-Left  | `(x3,y3)`   |\n * @protected\n * @memberof PIXI\n */\nexport class TextureUvs\n{\n    /** X-component of top-left corner `(x0,y0)`. */\n    public x0: number;\n\n    /** Y-component of top-left corner `(x0,y0)`. */\n    public y0: number;\n\n    /** X-component of top-right corner `(x1,y1)`. */\n    public x1: number;\n\n    /** Y-component of top-right corner `(x1,y1)`. */\n    public y1: number;\n\n    /** X-component of bottom-right corner `(x2,y2)`. */\n    public x2: number;\n\n    /** Y-component of bottom-right corner `(x2,y2)`. */\n    public y2: number;\n\n    /** X-component of bottom-left corner `(x3,y3)`. */\n    public x3: number;\n\n    /** Y-component of bottom-right corner `(x3,y3)`. */\n    public y3: number;\n    public uvsFloat32: Float32Array;\n\n    constructor()\n    {\n        this.x0 = 0;\n        this.y0 = 0;\n        this.x1 = 1;\n        this.y1 = 0;\n        this.x2 = 1;\n        this.y2 = 1;\n        this.x3 = 0;\n        this.y3 = 1;\n\n        this.uvsFloat32 = new Float32Array(8);\n    }\n\n    /**\n     * Sets the texture Uvs based on the given frame information.\n     * @protected\n     * @param frame - The frame of the texture\n     * @param baseFrame - The base frame of the texture\n     * @param rotate - Rotation of frame, see {@link PIXI.groupD8}\n     */\n    set(frame: Rectangle, baseFrame: ISize, rotate: number): void\n    {\n        const tw = baseFrame.width;\n        const th = baseFrame.height;\n\n        if (rotate)\n        {\n            // width and height div 2 div baseFrame size\n            const w2 = frame.width / 2 / tw;\n            const h2 = frame.height / 2 / th;\n\n            // coordinates of center\n            const cX = (frame.x / tw) + w2;\n            const cY = (frame.y / th) + h2;\n\n            rotate = groupD8.add(rotate, groupD8.NW); // NW is top-left corner\n            this.x0 = cX + (w2 * groupD8.uX(rotate));\n            this.y0 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2); // rotate 90 degrees clockwise\n            this.x1 = cX + (w2 * groupD8.uX(rotate));\n            this.y1 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2);\n            this.x2 = cX + (w2 * groupD8.uX(rotate));\n            this.y2 = cY + (h2 * groupD8.uY(rotate));\n\n            rotate = groupD8.add(rotate, 2);\n            this.x3 = cX + (w2 * groupD8.uX(rotate));\n            this.y3 = cY + (h2 * groupD8.uY(rotate));\n        }\n        else\n        {\n            this.x0 = frame.x / tw;\n            this.y0 = frame.y / th;\n\n            this.x1 = (frame.x + frame.width) / tw;\n            this.y1 = frame.y / th;\n\n            this.x2 = (frame.x + frame.width) / tw;\n            this.y2 = (frame.y + frame.height) / th;\n\n            this.x3 = frame.x / tw;\n            this.y3 = (frame.y + frame.height) / th;\n        }\n\n        this.uvsFloat32[0] = this.x0;\n        this.uvsFloat32[1] = this.y0;\n        this.uvsFloat32[2] = this.x1;\n        this.uvsFloat32[3] = this.y1;\n        this.uvsFloat32[4] = this.x2;\n        this.uvsFloat32[5] = this.y2;\n        this.uvsFloat32[6] = this.x3;\n        this.uvsFloat32[7] = this.y3;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/core:TextureUvs `\n            + `x0=${this.x0} y0=${this.y0} `\n            + `x1=${this.x1} y1=${this.y1} x2=${this.x2} `\n            + `y2=${this.y2} x3=${this.x3} y3=${this.y3}`\n            + `]`;\n    }\n    // #endif\n}\n","import { BaseTexture } from './BaseTexture';\nimport { ImageResource } from './resources/ImageResource';\nimport type { CanvasResource } from './resources/CanvasResource';\nimport { TextureUvs } from './TextureUvs';\nimport { settings } from '@pixi/settings';\nimport { Rectangle, Point } from '@pixi/math';\nimport { uid, TextureCache, getResolutionOfUrl, EventEmitter } from '@pixi/utils';\n\nimport type { Resource } from './resources/Resource';\nimport type { BufferResource } from './resources/BufferResource';\nimport type { IPointData, ISize } from '@pixi/math';\nimport type { IBaseTextureOptions, ImageSource } from './BaseTexture';\nimport type { TextureMatrix } from './TextureMatrix';\n\nconst DEFAULT_UVS = new TextureUvs();\n\nexport type TextureSource = string | BaseTexture | ImageSource;\n\nexport interface Texture extends GlobalMixins.Texture, EventEmitter {}\n\n/**\n * Used to remove listeners from WHITE and EMPTY Textures\n * @ignore\n */\nfunction removeAllHandlers(tex: any): void\n{\n    tex.destroy = function _emptyDestroy(): void { /* empty */ };\n    tex.on = function _emptyOn(): void { /* empty */ };\n    tex.once = function _emptyOnce(): void { /* empty */ };\n    tex.emit = function _emptyEmit(): void { /* empty */ };\n}\n\n/**\n * A texture stores the information that represents an image or part of an image.\n *\n * It cannot be added to the display list directly; instead use it as the texture for a Sprite.\n * If no frame is provided for a texture, then the whole image is used.\n *\n * You can directly create a texture from an image and then reuse it multiple times like this :\n *\n * ```js\n * let texture = PIXI.Texture.from('assets/image.png');\n * let sprite1 = new PIXI.Sprite(texture);\n * let sprite2 = new PIXI.Sprite(texture);\n * ```\n *\n * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:\n * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.\n *\n * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\n * You can check for this by checking the sprite's _textureID property.\n * ```js\n * var texture = PIXI.Texture.from('assets/image.svg');\n * var sprite1 = new PIXI.Sprite(texture);\n * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file\n * ```\n * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.\n * @memberof PIXI\n * @typeParam R - The BaseTexture's Resource type.\n */\nexport class Texture<R extends Resource = Resource> extends EventEmitter\n{\n    /** The base texture that this texture uses. */\n    public baseTexture: BaseTexture<R>;\n\n    /** This is the area of original texture, before it was put in atlas. */\n    public orig: Rectangle;\n\n    /**\n     * This is the trimmed area of original texture, before it was put in atlas\n     * Please call `updateUvs()` after you change coordinates of `trim` manually.\n     */\n    public trim: Rectangle;\n\n    /** This will let the renderer know if the texture is valid. If it's not then it cannot be rendered. */\n    public valid: boolean;\n\n    /**\n     * Does this Texture have any frame data assigned to it?\n     *\n     * This mode is enabled automatically if no frame was passed inside constructor.\n     *\n     * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n     *\n     * Beware, after loading or resize of baseTexture event can fired two times!\n     * If you want more control, subscribe on baseTexture itself.\n     *\n     * ```js\n     * texture.on('update', () => {});\n     * ```\n     *\n     * Any assignment of `frame` switches off `noFrame` mode.\n     */\n    public noFrame: boolean;\n\n    /**\n     * Anchor point that is used as default if sprite is created with this texture.\n     * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.\n     * @default {0,0}\n     */\n    public defaultAnchor: Point;\n\n    /** Default TextureMatrix instance for this texture. By default, that object is not created because its heavy. */\n    public uvMatrix: TextureMatrix;\n    protected _rotate: number;\n\n    /**\n     * Update ID is observed by sprites and TextureMatrix instances.\n     * Call updateUvs() to increment it.\n     * @protected\n     */\n    _updateID: number;\n\n    /**\n     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n     */\n    _frame: Rectangle;\n\n    /**\n     * The WebGL UV data cache. Can be used as quad UV.\n     * @protected\n     */\n    _uvs: TextureUvs;\n\n    /**\n     * The ids under which this Texture has been added to the texture cache. This is\n     * automatically set as long as Texture.addToCache is used, but may not be set if a\n     * Texture is added directly to the TextureCache array.\n     */\n    textureCacheIds: Array<string>;\n\n    /**\n     * @param baseTexture - The base texture source to create the texture from\n     * @param frame - The rectangle frame of the texture to show\n     * @param orig - The area of original texture\n     * @param trim - Trimmed rectangle of original texture\n     * @param rotate - indicates how the texture was rotated by texture packer. See {@link PIXI.groupD8}\n     * @param anchor - Default anchor point used for sprite placement / rotation\n     */\n    constructor(baseTexture: BaseTexture<R>, frame?: Rectangle,\n        orig?: Rectangle, trim?: Rectangle, rotate?: number, anchor?: IPointData)\n    {\n        super();\n\n        this.noFrame = false;\n\n        if (!frame)\n        {\n            this.noFrame = true;\n            frame = new Rectangle(0, 0, 1, 1);\n        }\n\n        if (baseTexture instanceof Texture)\n        {\n            baseTexture = baseTexture.baseTexture;\n        }\n\n        this.baseTexture = baseTexture;\n        this._frame = frame;\n        this.trim = trim;\n        this.valid = false;\n        this._uvs = DEFAULT_UVS;\n        this.uvMatrix = null;\n        this.orig = orig || frame;// new Rectangle(0, 0, 1, 1);\n\n        this._rotate = Number(rotate || 0);\n\n        if (rotate as any === true)\n        {\n            // this is old texturepacker legacy, some games/libraries are passing \"true\" for rotated textures\n            this._rotate = 2;\n        }\n        else if (this._rotate % 2 !== 0)\n        {\n            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');\n        }\n\n        this.defaultAnchor = anchor ? new Point(anchor.x, anchor.y) : new Point(0, 0);\n\n        this._updateID = 0;\n\n        this.textureCacheIds = [];\n\n        if (!baseTexture.valid)\n        {\n            baseTexture.once('loaded', this.onBaseTextureUpdated, this);\n        }\n        else if (this.noFrame)\n        {\n            // if there is no frame we should monitor for any base texture changes..\n            if (baseTexture.valid)\n            {\n                this.onBaseTextureUpdated(baseTexture);\n            }\n        }\n        else\n        {\n            this.frame = frame;\n        }\n\n        if (this.noFrame)\n        {\n            baseTexture.on('update', this.onBaseTextureUpdated, this);\n        }\n    }\n\n    /**\n     * Updates this texture on the gpu.\n     *\n     * Calls the TextureResource update.\n     *\n     * If you adjusted `frame` manually, please call `updateUvs()` instead.\n     */\n    update(): void\n    {\n        if (this.baseTexture.resource)\n        {\n            this.baseTexture.resource.update();\n        }\n    }\n\n    /**\n     * Called when the base texture is updated\n     * @protected\n     * @param baseTexture - The base texture.\n     */\n    onBaseTextureUpdated(baseTexture: BaseTexture): void\n    {\n        if (this.noFrame)\n        {\n            if (!this.baseTexture.valid)\n            {\n                return;\n            }\n\n            this._frame.width = baseTexture.width;\n            this._frame.height = baseTexture.height;\n            this.valid = true;\n            this.updateUvs();\n        }\n        else\n        {\n            // TODO this code looks confusing.. boo to abusing getters and setters!\n            // if user gave us frame that has bigger size than resized texture it can be a problem\n            this.frame = this._frame;\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Destroys this texture\n     * @param [destroyBase=false] - Whether to destroy the base texture as well\n     */\n    destroy(destroyBase?: boolean): void\n    {\n        if (this.baseTexture)\n        {\n            if (destroyBase)\n            {\n                const { resource } = this.baseTexture as unknown as BaseTexture<ImageResource>;\n\n                // delete the texture if it exists in the texture cache..\n                // this only needs to be removed if the base texture is actually destroyed too..\n                if (resource && resource.url && TextureCache[resource.url])\n                {\n                    Texture.removeFromCache(resource.url);\n                }\n\n                this.baseTexture.destroy();\n            }\n\n            this.baseTexture.off('loaded', this.onBaseTextureUpdated, this);\n            this.baseTexture.off('update', this.onBaseTextureUpdated, this);\n\n            this.baseTexture = null;\n        }\n\n        this._frame = null;\n        this._uvs = null;\n        this.trim = null;\n        this.orig = null;\n\n        this.valid = false;\n\n        Texture.removeFromCache(this);\n        this.textureCacheIds = null;\n    }\n\n    /**\n     * Creates a new texture object that acts the same as this one.\n     * @returns - The new texture\n     */\n    clone(): Texture\n    {\n        const clonedFrame = this._frame.clone();\n        const clonedOrig = this._frame === this.orig ? clonedFrame : this.orig.clone();\n        const clonedTexture = new Texture(this.baseTexture,\n            !this.noFrame && clonedFrame,\n            clonedOrig,\n            this.trim && this.trim.clone(),\n            this.rotate,\n            this.defaultAnchor\n        );\n\n        if (this.noFrame)\n        {\n            clonedTexture._frame = clonedFrame;\n        }\n\n        return clonedTexture;\n    }\n\n    /**\n     * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.\n     * Call it after changing the frame\n     */\n    updateUvs(): void\n    {\n        if (this._uvs === DEFAULT_UVS)\n        {\n            this._uvs = new TextureUvs();\n        }\n\n        this._uvs.set(this._frame, this.baseTexture, this.rotate);\n\n        this._updateID++;\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     * @param {string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture} source -\n     *        Source or array of sources to create texture from\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @param {string} [options.pixiIdPrefix=pixiid] - If a source has no id, this is the prefix of the generated id\n     * @param {boolean} [strict] - Enforce strict-mode, see {@link PIXI.settings.STRICT_TEXTURE_CACHE}.\n     * @returns {PIXI.Texture} The newly created texture\n     */\n    static from<R extends Resource = Resource, RO = any>(source: TextureSource | TextureSource[],\n        options: IBaseTextureOptions<RO> = {},\n        strict = settings.STRICT_TEXTURE_CACHE): Texture<R>\n    {\n        const isFrame = typeof source === 'string';\n        let cacheId = null;\n\n        if (isFrame)\n        {\n            cacheId = source;\n        }\n        else if (source instanceof BaseTexture)\n        {\n            if (!source.cacheId)\n            {\n                const prefix = (options && options.pixiIdPrefix) || 'pixiid';\n\n                source.cacheId = `${prefix}-${uid()}`;\n                BaseTexture.addToCache(source, source.cacheId);\n            }\n\n            cacheId = source.cacheId;\n        }\n        else\n        {\n            if (!(source as any)._pixiId)\n            {\n                const prefix = (options && options.pixiIdPrefix) || 'pixiid';\n\n                (source as any)._pixiId = `${prefix}_${uid()}`;\n            }\n\n            cacheId = (source as any)._pixiId;\n        }\n\n        let texture = TextureCache[cacheId] as Texture<R>;\n\n        // Strict-mode rejects invalid cacheIds\n        if (isFrame && strict && !texture)\n        {\n            throw new Error(`The cacheId \"${cacheId}\" does not exist in TextureCache.`);\n        }\n\n        if (!texture && !(source instanceof BaseTexture))\n        {\n            if (!options.resolution)\n            {\n                options.resolution = getResolutionOfUrl(source as string);\n            }\n\n            texture = new Texture<R>(new BaseTexture<R>(source, options));\n            texture.baseTexture.cacheId = cacheId;\n\n            BaseTexture.addToCache(texture.baseTexture, cacheId);\n            Texture.addToCache(texture, cacheId);\n        }\n        else if (!texture && (source instanceof BaseTexture))\n        {\n            texture = new Texture<R>(source as BaseTexture<R>);\n\n            Texture.addToCache(texture, cacheId);\n        }\n\n        // lets assume its a base texture!\n        return texture;\n    }\n\n    /**\n     * Useful for loading textures via URLs. Use instead of `Texture.from` because\n     * it does a better job of handling failed URLs more effectively. This also ignores\n     * `PIXI.settings.STRICT_TEXTURE_CACHE`. Works for Videos, SVGs, Images.\n     * @param url - The remote URL or array of URLs to load.\n     * @param options - Optional options to include\n     * @returns - A Promise that resolves to a Texture.\n     */\n    static fromURL<R extends Resource = Resource, RO = any>(\n        url: string | string[], options?: IBaseTextureOptions<RO>): Promise<Texture<R>>\n    {\n        const resourceOptions = Object.assign({ autoLoad: false }, options?.resourceOptions);\n        const texture = Texture.from<R>(url, Object.assign({ resourceOptions }, options), false);\n        const resource = texture.baseTexture.resource;\n\n        // The texture was already loaded\n        if (texture.baseTexture.valid)\n        {\n            return Promise.resolve(texture);\n        }\n\n        // Manually load the texture, this should allow users to handle load errors\n        return resource.load().then(() => Promise.resolve(texture));\n    }\n\n    /**\n     * Create a new Texture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     * @param {Float32Array|Uint8Array} buffer - The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param width - Width of the resource\n     * @param height - Height of the resource\n     * @param options - See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns - The resulting new BaseTexture\n     */\n    static fromBuffer(buffer: Float32Array | Uint8Array,\n        width: number, height: number, options?: IBaseTextureOptions<ISize>): Texture<BufferResource>\n    {\n        return new Texture(BaseTexture.fromBuffer(buffer, width, height, options));\n    }\n\n    /**\n     * Create a texture from a source and add to the cache.\n     * @param {HTMLImageElement|HTMLCanvasElement|string} source - The input source.\n     * @param imageUrl - File name of texture, for cache and resolving resolution.\n     * @param name - Human readable name for the texture cache. If no name is\n     *        specified, only `imageUrl` will be used as the cache ID.\n     * @param options\n     * @returns - Output texture\n     */\n    static fromLoader<R extends Resource = Resource>(source: HTMLImageElement | HTMLCanvasElement | string,\n        imageUrl: string, name?: string, options?: IBaseTextureOptions): Promise<Texture<R>>\n    {\n        const baseTexture = new BaseTexture<R>(source, Object.assign({\n            scaleMode: settings.SCALE_MODE,\n            resolution: getResolutionOfUrl(imageUrl),\n        }, options));\n\n        const { resource } = baseTexture;\n\n        if (resource instanceof ImageResource)\n        {\n            resource.url = imageUrl;\n        }\n\n        const texture = new Texture<R>(baseTexture);\n\n        // No name, use imageUrl instead\n        if (!name)\n        {\n            name = imageUrl;\n        }\n\n        // lets also add the frame to pixi's global cache for 'fromLoader' function\n        BaseTexture.addToCache(texture.baseTexture, name);\n        Texture.addToCache(texture, name);\n\n        // also add references by url if they are different.\n        if (name !== imageUrl)\n        {\n            BaseTexture.addToCache(texture.baseTexture, imageUrl);\n            Texture.addToCache(texture, imageUrl);\n        }\n\n        // Generally images are valid right away\n        if (texture.baseTexture.valid)\n        {\n            return Promise.resolve(texture);\n        }\n\n        // SVG assets need to be parsed async, let's wait\n        return new Promise((resolve) =>\n        {\n            texture.baseTexture.once('loaded', () => resolve(texture));\n        });\n    }\n\n    /**\n     * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.\n     * @param texture - The Texture to add to the cache.\n     * @param id - The id that the Texture will be stored against.\n     */\n    static addToCache(texture: Texture, id: string): void\n    {\n        if (id)\n        {\n            if (texture.textureCacheIds.indexOf(id) === -1)\n            {\n                texture.textureCacheIds.push(id);\n            }\n\n            if (TextureCache[id])\n            {\n                // eslint-disable-next-line no-console\n                console.warn(`Texture added to the cache with an id [${id}] that already had an entry`);\n            }\n\n            TextureCache[id] = texture;\n        }\n    }\n\n    /**\n     * Remove a Texture from the global TextureCache.\n     * @param texture - id of a Texture to be removed, or a Texture instance itself\n     * @returns - The Texture that was removed\n     */\n    static removeFromCache(texture: string | Texture): Texture | null\n    {\n        if (typeof texture === 'string')\n        {\n            const textureFromCache = TextureCache[texture];\n\n            if (textureFromCache)\n            {\n                const index = textureFromCache.textureCacheIds.indexOf(texture);\n\n                if (index > -1)\n                {\n                    textureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete TextureCache[texture];\n\n                return textureFromCache;\n            }\n        }\n        else if (texture && texture.textureCacheIds)\n        {\n            for (let i = 0; i < texture.textureCacheIds.length; ++i)\n            {\n                // Check that texture matches the one being passed in before deleting it from the cache.\n                if (TextureCache[texture.textureCacheIds[i]] === texture)\n                {\n                    delete TextureCache[texture.textureCacheIds[i]];\n                }\n            }\n\n            texture.textureCacheIds.length = 0;\n\n            return texture;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns resolution of baseTexture\n     * @readonly\n     */\n    get resolution(): number\n    {\n        return this.baseTexture.resolution;\n    }\n\n    /**\n     * The frame specifies the region of the base texture that this texture uses.\n     * Please call `updateUvs()` after you change coordinates of `frame` manually.\n     */\n    get frame(): Rectangle\n    {\n        return this._frame;\n    }\n\n    set frame(frame: Rectangle)\n    {\n        this._frame = frame;\n\n        this.noFrame = false;\n\n        const { x, y, width, height } = frame;\n        const xNotFit = x + width > this.baseTexture.width;\n        const yNotFit = y + height > this.baseTexture.height;\n\n        if (xNotFit || yNotFit)\n        {\n            const relationship = xNotFit && yNotFit ? 'and' : 'or';\n            const errorX = `X: ${x} + ${width} = ${x + width} > ${this.baseTexture.width}`;\n            const errorY = `Y: ${y} + ${height} = ${y + height} > ${this.baseTexture.height}`;\n\n            throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: '\n                + `${errorX} ${relationship} ${errorY}`);\n        }\n\n        this.valid = width && height && this.baseTexture.valid;\n\n        if (!this.trim && !this.rotate)\n        {\n            this.orig = frame;\n        }\n\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /**\n     * Indicates whether the texture is rotated inside the atlas\n     * set to 2 to compensate for texture packer rotation\n     * set to 6 to compensate for spine packer rotation\n     * can be used to rotate or mirror sprites\n     * See {@link PIXI.groupD8} for explanation\n     */\n    get rotate(): number\n    {\n        return this._rotate;\n    }\n\n    set rotate(rotate: number)\n    {\n        this._rotate = rotate;\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /** The width of the Texture in pixels. */\n    get width(): number\n    {\n        return this.orig.width;\n    }\n\n    /** The height of the Texture in pixels. */\n    get height(): number\n    {\n        return this.orig.height;\n    }\n\n    /** Utility function for BaseTexture|Texture cast. */\n    castToBaseTexture(): BaseTexture\n    {\n        return this.baseTexture;\n    }\n\n    private static _EMPTY: Texture<Resource>;\n    private static _WHITE: Texture<CanvasResource>;\n\n    /** An empty texture, used often to not have to create multiple empty textures. Can not be destroyed. */\n    public static get EMPTY(): Texture<Resource>\n    {\n        if (!Texture._EMPTY)\n        {\n            Texture._EMPTY = new Texture(new BaseTexture());\n            removeAllHandlers(Texture._EMPTY);\n            removeAllHandlers(Texture._EMPTY.baseTexture);\n        }\n\n        return Texture._EMPTY;\n    }\n\n    /** A white texture of 16x16 size, used for graphics and other things Can not be destroyed. */\n    public static get WHITE(): Texture<CanvasResource>\n    {\n        if (!Texture._WHITE)\n        {\n            const canvas = settings.ADAPTER.createCanvas(16, 16);\n            const context = canvas.getContext('2d');\n\n            canvas.width = 16;\n            canvas.height = 16;\n            context.fillStyle = 'white';\n            context.fillRect(0, 0, 16, 16);\n\n            Texture._WHITE = new Texture(BaseTexture.from(canvas));\n            removeAllHandlers(Texture._WHITE);\n            removeAllHandlers(Texture._WHITE.baseTexture);\n        }\n\n        return Texture._WHITE;\n    }\n}\n\n","import { BaseRenderTexture } from './BaseRenderTexture';\nimport { Texture } from '../textures/Texture';\n\nimport type { Rectangle } from '@pixi/math';\nimport type { Framebuffer } from '../framebuffer/Framebuffer';\nimport type { IBaseTextureOptions } from '../textures/BaseTexture';\nimport type { MSAA_QUALITY, SCALE_MODES } from '@pixi/constants';\nimport { deprecation } from '@pixi/utils';\n\n/**\n * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * __Hint-2__: The actual memory allocation will happen on first render.\n * You shouldn't create renderTextures each frame just to delete them after, try to reuse them.\n *\n * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer();\n * let renderTexture = PIXI.RenderTexture.create({ width: 800, height: 600 });\n * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, {renderTexture});\n * ```\n * Note that you should not create a new renderer, but reuse the same one as the rest of the application.\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let renderTexture = new PIXI.RenderTexture.create({ width: 100, height: 100 });\n *\n * renderer.render(sprite, {renderTexture});  // Renders to center of RenderTexture\n * ```\n * @memberof PIXI\n */\nexport class RenderTexture extends Texture\n{\n    public baseTexture: BaseRenderTexture;\n\n    /**\n     * Stores `sourceFrame` when this texture is inside current filter stack.\n     *\n     * You can read it inside filters.\n     * @readonly\n     */\n    public filterFrame: Rectangle | null;\n\n    /**\n     * The key for pooled texture of FilterSystem.\n     * @see PIXI.RenderTexturePool\n     */\n    public filterPoolKey: string | number | null;\n\n    /**\n     * @param baseRenderTexture - The base texture object that this texture uses.\n     * @param frame - The rectangle frame of the texture to show.\n     */\n    constructor(baseRenderTexture: BaseRenderTexture, frame?: Rectangle)\n    {\n        super(baseRenderTexture, frame);\n\n        this.valid = true;\n\n        this.filterFrame = null;\n        this.filterPoolKey = null;\n\n        this.updateUvs();\n    }\n\n    /**\n     * Shortcut to `this.baseTexture.framebuffer`, saves baseTexture cast.\n     * @readonly\n     */\n    get framebuffer(): Framebuffer\n    {\n        return this.baseTexture.framebuffer;\n    }\n\n    /**\n     * Shortcut to `this.framebuffer.multisample`.\n     * @default PIXI.MSAA_QUALITY.NONE\n     */\n    get multisample(): MSAA_QUALITY\n    {\n        return this.framebuffer.multisample;\n    }\n\n    set multisample(value: MSAA_QUALITY)\n    {\n        this.framebuffer.multisample = value;\n    }\n\n    /**\n     * Resizes the RenderTexture.\n     * @param desiredWidth - The desired width to resize to.\n     * @param desiredHeight - The desired height to resize to.\n     * @param resizeBaseTexture - Should the baseTexture.width and height values be resized as well?\n     */\n    resize(desiredWidth: number, desiredHeight: number, resizeBaseTexture = true): void\n    {\n        const resolution = this.baseTexture.resolution;\n        const width = Math.round(desiredWidth * resolution) / resolution;\n        const height = Math.round(desiredHeight * resolution) / resolution;\n\n        // TODO - could be not required..\n        this.valid = (width > 0 && height > 0);\n\n        this._frame.width = this.orig.width = width;\n        this._frame.height = this.orig.height = height;\n\n        if (resizeBaseTexture)\n        {\n            this.baseTexture.resize(width, height);\n        }\n\n        this.updateUvs();\n    }\n\n    /**\n     * Changes the resolution of baseTexture, but does not change framebuffer size.\n     * @param resolution - The new resolution to apply to RenderTexture\n     */\n    setResolution(resolution: number): void\n    {\n        const { baseTexture } = this;\n\n        if (baseTexture.resolution === resolution)\n        {\n            return;\n        }\n\n        baseTexture.setResolution(resolution);\n        this.resize(baseTexture.width, baseTexture.height, false);\n    }\n\n    /**\n     * Use the object-based construction instead.\n     * @deprecated since 6.0.0\n     * @param {number} [width]\n     * @param {number} [height]\n     * @param {PIXI.SCALE_MODES} [scaleMode=PIXI.settings.SCALE_MODE]\n     * @param {number} [resolution=PIXI.settings.FILTER_RESOLUTION]\n     */\n    static create(width: number, height: number, scaleMode?: SCALE_MODES, resolution?: number): RenderTexture;\n\n    /**\n     * A short hand way of creating a render texture.\n     * @param options - Options\n     * @param {number} [options.width=100] - The width of the render texture\n     * @param {number} [options.height=100] - The height of the render texture\n     * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES}\n     *    for possible values\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution / device pixel ratio of the texture\n     *    being generated\n     * @param {PIXI.MSAA_QUALITY} [options.multisample=PIXI.MSAA_QUALITY.NONE] - The number of samples of the frame buffer\n     * @returns The new render texture\n     */\n    static create(options?: IBaseTextureOptions): RenderTexture;\n    static create(options?: IBaseTextureOptions | number, ...rest: any[]): RenderTexture\n    {\n        // @deprecated fallback, old-style: create(width, height, scaleMode, resolution)\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            deprecation('6.0.0', 'Arguments (width, height, scaleMode, resolution) have been deprecated.');\n            // #endif\n\n            /* eslint-disable prefer-rest-params */\n            options = {\n                width: options,\n                height: rest[0],\n                scaleMode: rest[1],\n                resolution: rest[2],\n            };\n            /* eslint-enable prefer-rest-params */\n        }\n\n        return new RenderTexture(new BaseRenderTexture(options));\n    }\n}\n","import { RenderTexture } from './RenderTexture';\nimport { BaseRenderTexture } from './BaseRenderTexture';\nimport { nextPow2 } from '@pixi/utils';\nimport { MSAA_QUALITY } from '@pixi/constants';\n\nimport type { IBaseTextureOptions } from '../textures/BaseTexture';\nimport type { ISize } from '@pixi/math';\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n * @memberof PIXI\n */\nexport class RenderTexturePool\n{\n    public textureOptions: IBaseTextureOptions;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n    texturePool: {[x in string | number]: RenderTexture[]};\n    private _pixelsWidth: number;\n    private _pixelsHeight: number;\n\n    /**\n     * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n     * @param {PIXI.SCALE_MODES} [textureOptions.scaleMode] - See {@link PIXI.SCALE_MODES} for possible values.\n     */\n    constructor(textureOptions?: IBaseTextureOptions)\n    {\n        this.texturePool = {};\n        this.textureOptions = textureOptions || {};\n        this.enableFullScreen = false;\n\n        this._pixelsWidth = 0;\n        this._pixelsHeight = 0;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param realWidth - Width of texture in pixels.\n     * @param realHeight - Height of texture in pixels.\n     * @param multisample - Number of samples of the framebuffer.\n     */\n    createTexture(realWidth: number, realHeight: number, multisample = MSAA_QUALITY.NONE): RenderTexture\n    {\n        const baseRenderTexture = new BaseRenderTexture(Object.assign({\n            width: realWidth,\n            height: realHeight,\n            resolution: 1,\n            multisample,\n        }, this.textureOptions));\n\n        return new RenderTexture(baseRenderTexture);\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture.\n     * @param minHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @param multisample - Number of samples of the render texture.\n     * @returns The new render texture.\n     */\n    getOptimalTexture(minWidth: number, minHeight: number, resolution = 1, multisample = MSAA_QUALITY.NONE): RenderTexture\n    {\n        let key;\n\n        minWidth = Math.ceil((minWidth * resolution) - 1e-6);\n        minHeight = Math.ceil((minHeight * resolution) - 1e-6);\n\n        if (!this.enableFullScreen || minWidth !== this._pixelsWidth || minHeight !== this._pixelsHeight)\n        {\n            minWidth = nextPow2(minWidth);\n            minHeight = nextPow2(minHeight);\n            key = (((minWidth & 0xFFFF) << 16) | (minHeight & 0xFFFF)) >>> 0;\n\n            if (multisample > 1)\n            {\n                key += multisample * 0x100000000;\n            }\n        }\n        else\n        {\n            key = multisample > 1 ? -multisample : -1;\n        }\n\n        if (!this.texturePool[key])\n        {\n            this.texturePool[key] = [];\n        }\n\n        let renderTexture = this.texturePool[key].pop();\n\n        if (!renderTexture)\n        {\n            renderTexture = this.createTexture(minWidth, minHeight, multisample);\n        }\n\n        renderTexture.filterPoolKey = key;\n        renderTexture.setResolution(resolution);\n\n        return renderTexture;\n    }\n\n    /**\n     * Gets extra texture of the same size as input renderTexture\n     *\n     * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`\n     * @param input - renderTexture from which size and resolution will be copied\n     * @param resolution - override resolution of the renderTexture\n     *  It overrides, it does not multiply\n     * @param multisample - number of samples of the renderTexture\n     */\n    getFilterTexture(input: RenderTexture, resolution?: number, multisample?: MSAA_QUALITY): RenderTexture\n    {\n        const filterTexture = this.getOptimalTexture(input.width, input.height, resolution || input.resolution,\n            multisample || MSAA_QUALITY.NONE);\n\n        filterTexture.filterFrame = input.filterFrame;\n\n        return filterTexture;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param renderTexture - The renderTexture to free\n     */\n    returnTexture(renderTexture: RenderTexture): void\n    {\n        const key = renderTexture.filterPoolKey;\n\n        renderTexture.filterFrame = null;\n        this.texturePool[key].push(renderTexture);\n    }\n\n    /**\n     * Alias for returnTexture, to be compliant with FilterSystem interface.\n     * @param renderTexture - The renderTexture to free\n     */\n    returnFilterTexture(renderTexture: RenderTexture): void\n    {\n        this.returnTexture(renderTexture);\n    }\n\n    /**\n     * Clears the pool.\n     * @param destroyTextures - Destroy all stored textures.\n     */\n    clear(destroyTextures?: boolean): void\n    {\n        destroyTextures = destroyTextures !== false;\n        if (destroyTextures)\n        {\n            for (const i in this.texturePool)\n            {\n                const textures = this.texturePool[i];\n\n                if (textures)\n                {\n                    for (let j = 0; j < textures.length; j++)\n                    {\n                        textures[j].destroy(true);\n                    }\n                }\n            }\n        }\n\n        this.texturePool = {};\n    }\n\n    /**\n     * If screen size was changed, drops all screen-sized textures,\n     * sets new screen size, sets `enableFullScreen` to true\n     *\n     * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`\n     * @param size - Initial size of screen.\n     */\n    setScreenSize(size: ISize): void\n    {\n        if (size.width === this._pixelsWidth\n            && size.height === this._pixelsHeight)\n        {\n            return;\n        }\n\n        this.enableFullScreen = size.width > 0 && size.height > 0;\n\n        for (const i in this.texturePool)\n        {\n            if (!(Number(i) < 0))\n            {\n                continue;\n            }\n\n            const textures = this.texturePool[i];\n\n            if (textures)\n            {\n                for (let j = 0; j < textures.length; j++)\n                {\n                    textures[j].destroy(true);\n                }\n            }\n\n            this.texturePool[i] = [];\n        }\n\n        this._pixelsWidth = size.width;\n        this._pixelsHeight = size.height;\n    }\n\n    /**\n     * Key that is used to store fullscreen renderTextures in a pool\n     * @constant\n     */\n    static SCREEN_KEY = -1;\n}\n","import { TYPES } from '@pixi/constants';\n\n/* eslint-disable max-len */\n\n/**\n * Holds the information for a single attribute structure required to render geometry.\n *\n * This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}\n * This can include anything from positions, uvs, normals, colors etc.\n * @memberof PIXI\n */\nexport class Attribute\n{\n    public buffer: number;\n    public size: number;\n    public normalized: boolean;\n    public type: TYPES;\n    public stride: number;\n    public start: number;\n    public instance: boolean;\n\n    /**\n     * @param buffer - the id of the buffer that this attribute will look for\n     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2.\n     * @param normalized - should the data be normalized.\n     * @param {PIXI.TYPES} [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @param [start=0] - How far into the array to start reading values (used for interleaving data)\n     * @param [instance=false] - Whether the geometry is instanced.\n     */\n    constructor(buffer: number, size = 0, normalized = false, type = TYPES.FLOAT, stride?: number, start?: number, instance?: boolean)\n    {\n        this.buffer = buffer;\n        this.size = size;\n        this.normalized = normalized;\n        this.type = type;\n        this.stride = stride;\n        this.start = start;\n        this.instance = instance;\n    }\n\n    /** Destroys the Attribute. */\n    destroy(): void\n    {\n        this.buffer = null;\n    }\n\n    /**\n     * Helper function that creates an Attribute based on the information provided\n     * @param buffer - the id of the buffer that this attribute will look for\n     * @param [size=0] - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n     * @param [normalized=false] - should the data be normalized.\n     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {@link PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @returns - A new {@link PIXI.Attribute} based on the information provided\n     */\n    static from(buffer: number, size?: number, normalized?: boolean, type?: TYPES, stride?: number): Attribute\n    {\n        return new Attribute(buffer, size, normalized, type, stride);\n    }\n}\n","import { BUFFER_TYPE } from '@pixi/constants';\nimport { Runner } from '@pixi/runner';\nimport type { GLBuffer } from './GLBuffer';\n\nlet UID = 0;\n/* eslint-disable max-len */\n\n/**\n * Marks places in PixiJS where you can pass Float32Array, UInt32Array, any typed arrays, and ArrayBuffer\n *\n * Same as ArrayBuffer in typescript lib, defined here just for documentation\n */\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface IArrayBuffer extends ArrayBuffer\n{\n}\n\n/**\n * PixiJS classes use this type instead of ArrayBuffer and typed arrays\n * to support expressions like `geometry.buffers[0].data[0] = position.x`.\n *\n * Gives access to indexing and `length` field\n * * @popelyshev: If data is actually ArrayBuffer and throws Exception on indexing - its user problem :)\n */\nexport interface ITypedArray extends IArrayBuffer\n{\n    readonly length: number;\n    [index: number]: number;\n    readonly BYTES_PER_ELEMENT: number;\n}\n\n/**\n * A wrapper for data so that it can be used and uploaded by WebGL\n * @memberof PIXI\n */\nexport class Buffer\n{\n    /**\n     * The data in the buffer, as a typed array\n     * @type {PIXI.IArrayBuffer}\n     */\n    public data: ITypedArray;\n\n    /**\n     * The type of buffer this is, one of:\n     * + ELEMENT_ARRAY_BUFFER - used as an index buffer\n     * + ARRAY_BUFFER - used as an attribute buffer\n     * + UNIFORM_BUFFER - used as a uniform buffer (if available)\n     */\n    public type: BUFFER_TYPE;\n\n    public static: boolean;\n    public id: number;\n    disposeRunner: Runner;\n\n    /**\n     * A map of renderer IDs to webgl buffer\n     * @private\n     * @type {Object<number, GLBuffer>}\n     */\n    _glBuffers: {[key: number]: GLBuffer};\n    _updateID: number;\n\n    /**\n     * @param {PIXI.IArrayBuffer} data - the data to store in the buffer.\n     * @param _static - `true` for static buffer\n     * @param index - `true` for index buffer\n     */\n    constructor(data?: IArrayBuffer, _static = true, index = false)\n    {\n        this.data = (data || new Float32Array(1)) as ITypedArray;\n\n        this._glBuffers = {};\n        this._updateID = 0;\n\n        this.index = index;\n        this.static = _static;\n        this.id = UID++;\n\n        this.disposeRunner = new Runner('disposeBuffer');\n    }\n\n    // TODO could explore flagging only a partial upload?\n    /**\n     * Flags this buffer as requiring an upload to the GPU.\n     * @param {PIXI.IArrayBuffer|number[]} [data] - the data to update in the buffer.\n     */\n    update(data?: IArrayBuffer | Array<number>): void\n    {\n        if (data instanceof Array)\n        {\n            data = new Float32Array(data);\n        }\n        this.data = (data as ITypedArray) || this.data;\n        this._updateID++;\n    }\n\n    /** Disposes WebGL resources that are connected to this geometry. */\n    dispose(): void\n    {\n        this.disposeRunner.emit(this, false);\n    }\n\n    /** Destroys the buffer. */\n    destroy(): void\n    {\n        this.dispose();\n\n        this.data = null;\n    }\n\n    /**\n     * Flags whether this is an index buffer.\n     *\n     * Index buffers are of type `ELEMENT_ARRAY_BUFFER`. Note that setting this property to false will make\n     * the buffer of type `ARRAY_BUFFER`.\n     *\n     * For backwards compatibility.\n     */\n    set index(value: boolean)\n    {\n        this.type = value ? BUFFER_TYPE.ELEMENT_ARRAY_BUFFER : BUFFER_TYPE.ARRAY_BUFFER;\n    }\n\n    get index(): boolean\n    {\n        return this.type === BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n    }\n\n    /**\n     * Helper function that creates a buffer based on an array or TypedArray\n     * @param {ArrayBufferView | number[]} data - the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.\n     * @returns - A new Buffer based on the data provided.\n     */\n    static from(data: IArrayBuffer | number[]): Buffer\n    {\n        if (data instanceof Array)\n        {\n            data = new Float32Array(data);\n        }\n\n        return new Buffer(data);\n    }\n}\n","import { getBufferType } from '@pixi/utils';\n\nimport type { ITypedArray } from '../Buffer';\nimport type { Dict } from '@pixi/utils';\n\n/* eslint-disable object-shorthand */\nconst map: Dict<any> = {\n    Float32Array: Float32Array,\n    Uint32Array: Uint32Array,\n    Int32Array: Int32Array,\n    Uint8Array: Uint8Array,\n};\n\nexport function interleaveTypedArrays(arrays: Array<ITypedArray>, sizes: Array<number>): Float32Array\n{\n    let outSize = 0;\n    let stride = 0;\n    const views: Dict<any> = {};\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        stride += sizes[i];\n        outSize += arrays[i].length;\n    }\n\n    const buffer = new ArrayBuffer(outSize * 4);\n\n    let out = null;\n    let littleOffset = 0;\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        const size = sizes[i];\n        const array = arrays[i];\n\n        const type = getBufferType(array);\n\n        if (!views[type])\n        {\n            views[type] = new map[type](buffer);\n        }\n\n        out = views[type];\n\n        for (let j = 0; j < array.length; j++)\n        {\n            const indexStart = ((j / size | 0) * stride) + littleOffset;\n            const index = j % size;\n\n            out[indexStart + index] = array[j];\n        }\n\n        littleOffset += size;\n    }\n\n    return new Float32Array(buffer);\n}\n","import { Attribute } from './Attribute';\nimport { Buffer } from './Buffer';\nimport { interleaveTypedArrays } from './utils/interleaveTypedArrays';\nimport { getBufferType } from '@pixi/utils';\nimport { Runner } from '@pixi/runner';\n\nimport type { TYPES } from '@pixi/constants';\nimport { BUFFER_TYPE } from '@pixi/constants';\nimport type { IArrayBuffer } from './Buffer';\nimport type { Dict } from '@pixi/utils';\n\nconst byteSizeMap: {[key: number]: number} = { 5126: 4, 5123: 2, 5121: 1 };\nlet UID = 0;\n\n/* eslint-disable object-shorthand */\nconst map: Dict<any> = {\n    Float32Array: Float32Array,\n    Uint32Array: Uint32Array,\n    Int32Array: Int32Array,\n    Uint8Array: Uint8Array,\n    Uint16Array: Uint16Array,\n};\n\n/* eslint-disable max-len */\n\n/**\n * The Geometry represents a model. It consists of two components:\n * - GeometryStyle - The structure of the model such as the attributes layout\n * - GeometryData - the data of the model - this consists of buffers.\n * This can include anything from positions, uvs, normals, colors etc.\n *\n * Geometry can be defined without passing in a style or data if required (thats how I prefer!)\n *\n * ```js\n * let geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1],2)\n * geometry.addIndex([0,1,2,1,3,2])\n * ```\n * @memberof PIXI\n */\nexport class Geometry\n{\n    public buffers: Array<Buffer>;\n    public indexBuffer: Buffer;\n    public attributes: {[key: string]: Attribute};\n    public id: number;\n\n    /** Whether the geometry is instanced. */\n    public instanced: boolean;\n\n    /**\n     * Number of instances in this geometry, pass it to `GeometrySystem.draw()`.\n     * @default 1\n     */\n    public instanceCount: number;\n\n    /**\n     * A map of renderer IDs to webgl VAOs\n     * @type {object}\n     */\n    glVertexArrayObjects: {[key: number]: {[key: string]: WebGLVertexArrayObject}};\n    disposeRunner: Runner;\n\n    /** Count of existing (not destroyed) meshes that reference this geometry. */\n    refCount: number;\n\n    /**\n     * @param buffers - An array of buffers. optional.\n     * @param attributes - Of the geometry, optional structure of the attributes layout\n     */\n    constructor(buffers: Array<Buffer> = [], attributes: {[key: string]: Attribute} = {})\n    {\n        this.buffers = buffers;\n\n        this.indexBuffer = null;\n\n        this.attributes = attributes;\n\n        this.glVertexArrayObjects = {};\n\n        this.id = UID++;\n\n        this.instanced = false;\n        this.instanceCount = 1;\n\n        this.disposeRunner = new Runner('disposeGeometry');\n        this.refCount = 0;\n    }\n\n    /**\n     *\n     * Adds an attribute to the geometry\n     * Note: `stride` and `start` should be `undefined` if you dont know them, not 0!\n     * @param id - the name of the attribute (matching up to a shader)\n     * @param {PIXI.Buffer|number[]} buffer - the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.\n     * @param size - the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n     * @param normalized - should the data be normalized.\n     * @param [type=PIXI.TYPES.FLOAT] - what type of number is the attribute. Check {PIXI.TYPES} to see the ones available\n     * @param [stride=0] - How far apart, in bytes, the start of each value is. (used for interleaving data)\n     * @param [start=0] - How far into the array to start reading values (used for interleaving data)\n     * @param instance - Instancing flag\n     * @returns - Returns self, useful for chaining.\n     */\n    addAttribute(id: string, buffer: Buffer | Float32Array | Uint32Array | Array<number>, size = 0, normalized = false,\n        type?: TYPES, stride?: number, start?: number, instance = false): this\n    {\n        if (!buffer)\n        {\n            throw new Error('You must pass a buffer when creating an attribute');\n        }\n\n        // check if this is a buffer!\n        if (!(buffer instanceof Buffer))\n        {\n            // its an array!\n            if (buffer instanceof Array)\n            {\n                buffer = new Float32Array(buffer);\n            }\n\n            buffer = new Buffer(buffer);\n        }\n\n        const ids = id.split('|');\n\n        if (ids.length > 1)\n        {\n            for (let i = 0; i < ids.length; i++)\n            {\n                this.addAttribute(ids[i], buffer, size, normalized, type);\n            }\n\n            return this;\n        }\n\n        let bufferIndex = this.buffers.indexOf(buffer);\n\n        if (bufferIndex === -1)\n        {\n            this.buffers.push(buffer);\n            bufferIndex = this.buffers.length - 1;\n        }\n\n        this.attributes[id] = new Attribute(bufferIndex, size, normalized, type, stride, start, instance);\n\n        // assuming that if there is instanced data then this will be drawn with instancing!\n        this.instanced = this.instanced || instance;\n\n        return this;\n    }\n\n    /**\n     * Returns the requested attribute.\n     * @param id - The name of the attribute required\n     * @returns - The attribute requested.\n     */\n    getAttribute(id: string): Attribute\n    {\n        return this.attributes[id];\n    }\n\n    /**\n     * Returns the requested buffer.\n     * @param id - The name of the buffer required.\n     * @returns - The buffer requested.\n     */\n    getBuffer(id: string): Buffer\n    {\n        return this.buffers[this.getAttribute(id).buffer];\n    }\n\n    /**\n     *\n     * Adds an index buffer to the geometry\n     * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.\n     * @param {PIXI.Buffer|number[]} [buffer] - The buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.\n     * @returns - Returns self, useful for chaining.\n     */\n    addIndex(buffer?: Buffer | IArrayBuffer | number[]): Geometry\n    {\n        if (!(buffer instanceof Buffer))\n        {\n            // its an array!\n            if (buffer instanceof Array)\n            {\n                buffer = new Uint16Array(buffer);\n            }\n\n            buffer = new Buffer(buffer);\n        }\n\n        buffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n\n        this.indexBuffer = buffer;\n\n        if (this.buffers.indexOf(buffer) === -1)\n        {\n            this.buffers.push(buffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * Returns the index buffer\n     * @returns - The index buffer.\n     */\n    getIndex(): Buffer\n    {\n        return this.indexBuffer;\n    }\n\n    /**\n     * This function modifies the structure so that all current attributes become interleaved into a single buffer\n     * This can be useful if your model remains static as it offers a little performance boost\n     * @returns - Returns self, useful for chaining.\n     */\n    interleave(): Geometry\n    {\n        // a simple check to see if buffers are already interleaved..\n        if (this.buffers.length === 1 || (this.buffers.length === 2 && this.indexBuffer)) return this;\n\n        // assume already that no buffers are interleaved\n        const arrays = [];\n        const sizes = [];\n        const interleavedBuffer = new Buffer();\n        let i;\n\n        for (i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n\n            const buffer = this.buffers[attribute.buffer];\n\n            arrays.push(buffer.data);\n\n            sizes.push((attribute.size * byteSizeMap[attribute.type]) / 4);\n\n            attribute.buffer = 0;\n        }\n\n        interleavedBuffer.data = interleaveTypedArrays(arrays, sizes);\n\n        for (i = 0; i < this.buffers.length; i++)\n        {\n            if (this.buffers[i] !== this.indexBuffer)\n            {\n                this.buffers[i].destroy();\n            }\n        }\n\n        this.buffers = [interleavedBuffer];\n\n        if (this.indexBuffer)\n        {\n            this.buffers.push(this.indexBuffer);\n        }\n\n        return this;\n    }\n\n    /** Get the size of the geometries, in vertices. */\n    getSize(): number\n    {\n        for (const i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n            const buffer = this.buffers[attribute.buffer];\n\n            return (buffer.data as any).length / ((attribute.stride / 4) || attribute.size);\n        }\n\n        return 0;\n    }\n\n    /** Disposes WebGL resources that are connected to this geometry. */\n    dispose(): void\n    {\n        this.disposeRunner.emit(this, false);\n    }\n\n    /** Destroys the geometry. */\n    destroy(): void\n    {\n        this.dispose();\n\n        this.buffers = null;\n        this.indexBuffer = null;\n        this.attributes = null;\n    }\n\n    /**\n     * Returns a clone of the geometry.\n     * @returns - A new clone of this geometry.\n     */\n    clone(): Geometry\n    {\n        const geometry = new Geometry();\n\n        for (let i = 0; i < this.buffers.length; i++)\n        {\n            geometry.buffers[i] = new Buffer(this.buffers[i].data.slice(0));\n        }\n\n        for (const i in this.attributes)\n        {\n            const attrib = this.attributes[i];\n\n            geometry.attributes[i] = new Attribute(\n                attrib.buffer,\n                attrib.size,\n                attrib.normalized,\n                attrib.type,\n                attrib.stride,\n                attrib.start,\n                attrib.instance\n            );\n        }\n\n        if (this.indexBuffer)\n        {\n            geometry.indexBuffer = geometry.buffers[this.buffers.indexOf(this.indexBuffer)];\n            geometry.indexBuffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n        }\n\n        return geometry;\n    }\n\n    /**\n     * Merges an array of geometries into a new single one.\n     *\n     * Geometry attribute styles must match for this operation to work.\n     * @param geometries - array of geometries to merge\n     * @returns - Shiny new geometry!\n     */\n    static merge(geometries: Array<Geometry>): Geometry\n    {\n        // todo add a geometry check!\n        // also a size check.. cant be too big!]\n\n        const geometryOut = new Geometry();\n\n        const arrays = [];\n        const sizes: Array<number> = [];\n        const offsets = [];\n\n        let geometry;\n\n        // pass one.. get sizes..\n        for (let i = 0; i < geometries.length; i++)\n        {\n            geometry = geometries[i];\n\n            for (let j = 0; j < geometry.buffers.length; j++)\n            {\n                sizes[j] = sizes[j] || 0;\n                sizes[j] += geometry.buffers[j].data.length;\n                offsets[j] = 0;\n            }\n        }\n\n        // build the correct size arrays..\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            // TODO types!\n            arrays[i] = new map[getBufferType(geometry.buffers[i].data)](sizes[i]);\n            geometryOut.buffers[i] = new Buffer(arrays[i]);\n        }\n\n        // pass to set data..\n        for (let i = 0; i < geometries.length; i++)\n        {\n            geometry = geometries[i];\n\n            for (let j = 0; j < geometry.buffers.length; j++)\n            {\n                arrays[j].set(geometry.buffers[j].data, offsets[j]);\n                offsets[j] += geometry.buffers[j].data.length;\n            }\n        }\n\n        geometryOut.attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            geometryOut.indexBuffer = geometryOut.buffers[geometry.buffers.indexOf(geometry.indexBuffer)];\n            geometryOut.indexBuffer.type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n\n            let offset = 0;\n            let stride = 0;\n            let offset2 = 0;\n            let bufferIndexToCount = 0;\n\n            // get a buffer\n            for (let i = 0; i < geometry.buffers.length; i++)\n            {\n                if (geometry.buffers[i] !== geometry.indexBuffer)\n                {\n                    bufferIndexToCount = i;\n                    break;\n                }\n            }\n\n            // figure out the stride of one buffer..\n            for (const i in geometry.attributes)\n            {\n                const attribute = geometry.attributes[i];\n\n                if ((attribute.buffer | 0) === bufferIndexToCount)\n                {\n                    stride += ((attribute.size * byteSizeMap[attribute.type]) / 4);\n                }\n            }\n\n            // time to off set all indexes..\n            for (let i = 0; i < geometries.length; i++)\n            {\n                const indexBufferData = geometries[i].indexBuffer.data;\n\n                for (let j = 0; j < indexBufferData.length; j++)\n                {\n                    geometryOut.indexBuffer.data[j + offset2] += offset;\n                }\n\n                offset += geometries[i].buffers[bufferIndexToCount].data.length / (stride);\n                offset2 += indexBufferData.length;\n            }\n        }\n\n        return geometryOut;\n    }\n}\n","import { Geometry } from '../geometry/Geometry';\n\n/**\n * Helper class to create a quad\n * @memberof PIXI\n */\nexport class Quad extends Geometry\n{\n    constructor()\n    {\n        super();\n\n        this.addAttribute('aVertexPosition', new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ]))\n            .addIndex([0, 1, 3, 2]);\n    }\n}\n","import { Geometry } from '../geometry/Geometry';\nimport { Buffer } from '../geometry/Buffer';\n\nimport type { Rectangle } from '@pixi/math';\n\n/**\n * Helper class to create a quad with uvs like in v4\n * @memberof PIXI\n */\nexport class QuadUv extends Geometry\n{\n    vertexBuffer: Buffer;\n    uvBuffer: Buffer;\n\n    /** An array of vertices. */\n    vertices: Float32Array;\n\n    /** The Uvs of the quad. */\n    uvs: Float32Array;\n\n    constructor()\n    {\n        super();\n\n        this.vertices = new Float32Array([\n            -1, -1,\n            1, -1,\n            1, 1,\n            -1, 1,\n        ]);\n\n        this.uvs = new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ]);\n\n        this.vertexBuffer = new Buffer(this.vertices);\n        this.uvBuffer = new Buffer(this.uvs);\n\n        this.addAttribute('aVertexPosition', this.vertexBuffer)\n            .addAttribute('aTextureCoord', this.uvBuffer)\n            .addIndex([0, 1, 2, 0, 2, 3]);\n    }\n\n    /**\n     * Maps two Rectangle to the quad.\n     * @param targetTextureFrame - The first rectangle\n     * @param destinationFrame - The second rectangle\n     * @returns - Returns itself.\n     */\n    map(targetTextureFrame: Rectangle, destinationFrame: Rectangle): this\n    {\n        let x = 0; // destinationFrame.x / targetTextureFrame.width;\n        let y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n        this.uvs[0] = x;\n        this.uvs[1] = y;\n\n        this.uvs[2] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[3] = y;\n\n        this.uvs[4] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[5] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        this.uvs[6] = x;\n        this.uvs[7] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        x = destinationFrame.x;\n        y = destinationFrame.y;\n\n        this.vertices[0] = x;\n        this.vertices[1] = y;\n\n        this.vertices[2] = x + destinationFrame.width;\n        this.vertices[3] = y;\n\n        this.vertices[4] = x + destinationFrame.width;\n        this.vertices[5] = y + destinationFrame.height;\n\n        this.vertices[6] = x;\n        this.vertices[7] = y + destinationFrame.height;\n\n        this.invalidate();\n\n        return this;\n    }\n\n    /**\n     * Legacy upload method, just marks buffers dirty.\n     * @returns - Returns itself.\n     */\n    invalidate(): this\n    {\n        this.vertexBuffer._updateID++;\n        this.uvBuffer._updateID++;\n\n        return this;\n    }\n}\n","import { BUFFER_TYPE } from '@pixi/constants';\nimport type { Dict } from '@pixi/utils';\nimport { Buffer } from '../geometry/Buffer';\nimport type { UniformsSyncCallback } from './utils';\n\nlet UID = 0;\n\n/**\n * Uniform group holds uniform map and some ID's for work\n *\n * `UniformGroup` has two modes:\n *\n * 1: Normal mode\n * Normal mode will upload the uniforms with individual function calls as required\n *\n * 2: Uniform buffer mode\n * This mode will treat the uniforms as a uniform buffer. You can pass in either a buffer that you manually handle, or\n * or a generic object that PixiJS will automatically map to a buffer for you.\n * For maximum benefits, make Ubo UniformGroups static, and only update them each frame.\n *\n * Rules of UBOs:\n * - UBOs only work with WebGL2, so make sure you have a fallback!\n * - Only floats are supported (including vec[2,3,4], mat[2,3,4])\n * - Samplers cannot be used in ubo's (a GPU limitation)\n * - You must ensure that the object you pass in exactly matches in the shader ubo structure.\n * Otherwise, weirdness will ensue!\n * - The name of the ubo object added to the group must match exactly the name of the ubo in the shader.\n *\n * ```\n * // ubo in shader:\n * uniform myCoolData { // declaring a ubo..\n * mat4 uCoolMatrix;\n * float uFloatyMcFloatFace\n *\n *\n * // a new uniform buffer object..\n * const myCoolData = new UniformBufferGroup({\n *   uCoolMatrix: new Matrix(),\n *   uFloatyMcFloatFace: 23,\n * }}\n *\n * // build a shader...\n * const shader = Shader.from(srcVert, srcFrag, {\n *   myCoolData // name matches the ubo name in the shader. will be processed accordingly.\n * })\n *\n *  ```\n * @memberof PIXI\n */\nexport class UniformGroup<LAYOUT = Dict<any>>\n{\n    /**\n     * Uniform values\n     * @member {object}\n     */\n    public readonly uniforms: LAYOUT;\n\n    /**\n     * Its a group and not a single uniforms.\n     * @default true\n     */\n    public readonly group: boolean;\n\n    /**\n     * unique id\n     * @protected\n     */\n    public id: number;\n    syncUniforms: Dict<UniformsSyncCallback>;\n\n    /**\n     * Dirty version\n     * @protected\n     */\n    dirtyId: number;\n\n    /** Flag for if uniforms wont be changed after creation. */\n    static: boolean;\n\n    /** Flags whether this group is treated like a uniform buffer object. */\n    ubo: boolean;\n    buffer?: Buffer;\n    autoManage: boolean;\n\n    /**\n     * @param {object | Buffer} [uniforms] - Custom uniforms to use to augment the built-in ones. Or a pixi buffer.\n     * @param isStatic - Uniforms wont be changed after creation.\n     * @param isUbo - If true, will treat this uniform group as a uniform buffer object.\n     */\n    constructor(uniforms: LAYOUT | Buffer, isStatic?: boolean, isUbo?: boolean)\n    {\n        this.group = true;\n\n        // lets generate this when the shader ?\n        this.syncUniforms = {};\n        this.dirtyId = 0;\n        this.id = UID++;\n        this.static = !!isStatic;\n        this.ubo = !!isUbo;\n\n        if (uniforms instanceof Buffer)\n        {\n            this.buffer = uniforms;\n            this.buffer.type = BUFFER_TYPE.UNIFORM_BUFFER;\n            this.autoManage = false;\n            this.ubo = true;\n        }\n        else\n        {\n            this.uniforms = uniforms;\n\n            if (this.ubo)\n            {\n                this.buffer = new Buffer(new Float32Array(1));\n                this.buffer.type = BUFFER_TYPE.UNIFORM_BUFFER;\n                this.autoManage = true;\n            }\n        }\n    }\n\n    update(): void\n    {\n        this.dirtyId++;\n\n        if (!this.autoManage && this.buffer)\n        {\n            this.buffer.update();\n        }\n    }\n\n    add(name: string, uniforms: Dict<any>, _static?: boolean): void\n    {\n        if (!this.ubo)\n        {\n            (this.uniforms as any)[name] = new UniformGroup(uniforms, _static);\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            throw new Error('[UniformGroup] uniform groups in ubo mode cannot be modified, or have uniform groups nested in them');\n        }\n    }\n\n    static from(uniforms: Dict<any> | Buffer, _static?: boolean, _ubo?: boolean): UniformGroup\n    {\n        return new UniformGroup(uniforms, _static, _ubo);\n    }\n\n    /**\n     * A short hand function for creating a static UBO UniformGroup.\n     * @param uniforms - the ubo item\n     * @param _static - should this be updated each time it is used? defaults to true here!\n     */\n    static uboFrom(uniforms: Dict<any> | Buffer, _static?: boolean): UniformGroup\n    {\n        return new UniformGroup(uniforms, _static ?? true, true);\n    }\n}\n","import type { Matrix } from '@pixi/math';\nimport { Rectangle } from '@pixi/math';\nimport { MSAA_QUALITY } from '@pixi/constants';\n\nimport type { Filter } from './Filter';\nimport type { IFilterTarget } from './IFilterTarget';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\n\n/**\n * System plugin to the renderer to manage filter states.\n * @ignore\n */\nexport class FilterState\n{\n    renderTexture: RenderTexture;\n\n    /**\n     * Target of the filters\n     * We store for case when custom filter wants to know the element it was applied on\n     * @member {PIXI.DisplayObject}\n     */\n    target: IFilterTarget;\n\n    /**\n     * Compatibility with PixiJS v4 filters\n     * @default false\n     */\n    legacy: boolean;\n\n    /**\n     * Resolution of filters\n     * @default 1\n     */\n    resolution: number;\n\n    /**\n     * Number of samples\n     * @default MSAA_QUALITY.NONE\n     */\n    multisample: MSAA_QUALITY;\n\n    /** Source frame. */\n    sourceFrame: Rectangle;\n\n    /** Destination frame. */\n    destinationFrame: Rectangle;\n\n    /** Original render-target source frame. */\n    bindingSourceFrame: Rectangle;\n\n    /** Original render-target destination frame. */\n    bindingDestinationFrame: Rectangle;\n\n    /** Collection of filters. */\n    filters: Array<Filter>;\n\n    /** Projection system transform saved by link. */\n    transform: Matrix;\n\n    constructor()\n    {\n        this.renderTexture = null;\n\n        this.target = null;\n        this.legacy = false;\n        this.resolution = 1;\n        this.multisample = MSAA_QUALITY.NONE;\n\n        // next three fields are created only for root\n        // re-assigned for everything else\n\n        this.sourceFrame = new Rectangle();\n        this.destinationFrame = new Rectangle();\n        this.bindingSourceFrame = new Rectangle();\n        this.bindingDestinationFrame = new Rectangle();\n        this.filters = [];\n        this.transform = null;\n    }\n\n    /** Clears the state */\n    clear(): void\n    {\n        this.target = null;\n        this.filters = null;\n        this.renderTexture = null;\n    }\n}\n","import { RenderTexturePool } from '../renderTexture/RenderTexturePool';\nimport { Quad } from '../utils/Quad';\nimport { QuadUv } from '../utils/QuadUv';\nimport { Rectangle, Matrix, Point } from '@pixi/math';\nimport { UniformGroup } from '../shader/UniformGroup';\nimport { DRAW_MODES, CLEAR_MODES, MSAA_QUALITY } from '@pixi/constants';\nimport { FilterState } from './FilterState';\n\nimport type { ISystem } from '../ISystem';\nimport type { Filter } from './Filter';\nimport type { IFilterTarget } from './IFilterTarget';\nimport type { ISpriteMaskTarget } from './spriteMask/SpriteMaskFilter';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\nimport type { Renderer } from '../Renderer';\n\nconst tempPoints = [new Point(), new Point(), new Point(), new Point()];\nconst tempMatrix = new Matrix();\n\n/**\n * System plugin to the renderer to manage filters.\n *\n * ## Pipeline\n *\n * The FilterSystem executes the filtering pipeline by rendering the display-object into a texture, applying its\n * [filters]{@link PIXI.Filter} in series, and the last filter outputs into the final render-target.\n *\n * The filter-frame is the rectangle in world space being filtered, and those contents are mapped into\n * `(0, 0, filterFrame.width, filterFrame.height)` into the filter render-texture. The filter-frame is also called\n * the source-frame, as it is used to bind the filter render-textures. The last filter outputs to the `filterFrame`\n * in the final render-target.\n *\n * ## Usage\n *\n * {@link PIXI.Container#renderAdvanced} is an example of how to use the filter system. It is a 3 step process:\n *\n * **push**: Use {@link PIXI.FilterSystem#push} to push the set of filters to be applied on a filter-target.\n * **render**: Render the contents to be filtered using the renderer. The filter-system will only capture the contents\n *      inside the bounds of the filter-target. NOTE: Using {@link PIXI.Renderer#render} is\n *      illegal during an existing render cycle, and it may reset the filter system.\n * **pop**: Use {@link PIXI.FilterSystem#pop} to pop & execute the filters you initially pushed. It will apply them\n *      serially and output to the bounds of the filter-target.\n * @memberof PIXI\n */\nexport class FilterSystem implements ISystem\n{\n    /**\n     * List of filters for the FilterSystem\n     * @member {object[]}\n     */\n    public readonly defaultFilterStack: Array<FilterState>;\n\n    /** A pool for storing filter states, save us creating new ones each tick. */\n    public statePool: Array<FilterState>;\n\n    /** Stores a bunch of POT textures used for filtering. */\n    public texturePool: RenderTexturePool;\n\n    /** Whether to clear output renderTexture in AUTO/BLIT mode. See {@link PIXI.CLEAR_MODES}. */\n    public forceClear: boolean;\n\n    /**\n     * Old padding behavior is to use the max amount instead of sum padding.\n     * Use this flag if you need the old behavior.\n     * @default false\n     */\n    public useMaxPadding: boolean;\n\n    /** A very simple geometry used when drawing a filter effect to the screen. */\n    protected quad: Quad;\n\n    /** Quad UVs */\n    protected quadUv: QuadUv;\n\n    /**\n     * Active state\n     * @member {object}\n     */\n    protected activeState: FilterState;\n\n    /**\n     * This uniform group is attached to filter uniforms when used.\n     * @property {PIXI.Rectangle} outputFrame -\n     * @property {Float32Array} inputSize -\n     * @property {Float32Array} inputPixel -\n     * @property {Float32Array} inputClamp -\n     * @property {number} resolution -\n     * @property {Float32Array} filterArea -\n     * @property {Float32Array} filterClamp -\n     */\n    protected globalUniforms: UniformGroup;\n\n    /** Temporary rect for math. */\n    private tempRect: Rectangle;\n    public renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.defaultFilterStack = [{}] as any;\n\n        this.texturePool = new RenderTexturePool();\n        this.texturePool.setScreenSize(renderer.view);\n        this.statePool = [];\n\n        this.quad = new Quad();\n        this.quadUv = new QuadUv();\n        this.tempRect = new Rectangle();\n        this.activeState = {} as any;\n\n        this.globalUniforms = new UniformGroup({\n            outputFrame: new Rectangle(),\n            inputSize: new Float32Array(4),\n            inputPixel: new Float32Array(4),\n            inputClamp: new Float32Array(4),\n            resolution: 1,\n\n            // legacy variables\n            filterArea: new Float32Array(4),\n            filterClamp: new Float32Array(4),\n        }, true);\n\n        this.forceClear = false;\n        this.useMaxPadding = false;\n    }\n\n    /**\n     * Pushes a set of filters to be applied later to the system. This will redirect further rendering into an\n     * input render-texture for the rest of the filtering pipeline.\n     * @param {PIXI.DisplayObject} target - The target of the filter to render.\n     * @param filters - The filters to apply.\n     */\n    push(target: IFilterTarget, filters: Array<Filter>): void\n    {\n        const renderer = this.renderer;\n        const filterStack = this.defaultFilterStack;\n        const state = this.statePool.pop() || new FilterState();\n        const renderTextureSystem = this.renderer.renderTexture;\n\n        let resolution = filters[0].resolution;\n        let multisample = filters[0].multisample;\n        let padding = filters[0].padding;\n        let autoFit = filters[0].autoFit;\n        // We don't know whether it's a legacy filter until it was bound for the first time,\n        // therefore we have to assume that it is if legacy is undefined.\n        let legacy = filters[0].legacy ?? true;\n\n        for (let i = 1; i < filters.length; i++)\n        {\n            const filter = filters[i];\n\n            // let's use the lowest resolution\n            resolution = Math.min(resolution, filter.resolution);\n            // let's use the lowest number of samples\n            multisample = Math.min(multisample, filter.multisample);\n            // figure out the padding required for filters\n            padding = this.useMaxPadding\n                // old behavior: use largest amount of padding!\n                ? Math.max(padding, filter.padding)\n                // new behavior: sum the padding\n                : padding + filter.padding;\n            // only auto fit if all filters are autofit\n            autoFit = autoFit && filter.autoFit;\n\n            legacy = legacy || (filter.legacy ?? true);\n        }\n\n        if (filterStack.length === 1)\n        {\n            this.defaultFilterStack[0].renderTexture = renderTextureSystem.current;\n        }\n\n        filterStack.push(state);\n\n        state.resolution = resolution;\n        state.multisample = multisample;\n\n        state.legacy = legacy;\n\n        state.target = target;\n        state.sourceFrame.copyFrom(target.filterArea || target.getBounds(true));\n\n        state.sourceFrame.pad(padding);\n\n        const sourceFrameProjected = this.tempRect.copyFrom(renderTextureSystem.sourceFrame);\n\n        // Project source frame into world space (if projection is applied)\n        if (renderer.projection.transform)\n        {\n            this.transformAABB(\n                tempMatrix.copyFrom(renderer.projection.transform).invert(),\n                sourceFrameProjected\n            );\n        }\n\n        if (autoFit)\n        {\n            state.sourceFrame.fit(sourceFrameProjected);\n\n            if (state.sourceFrame.width <= 0 || state.sourceFrame.height <= 0)\n            {\n                state.sourceFrame.width = 0;\n                state.sourceFrame.height = 0;\n            }\n        }\n        else if (!state.sourceFrame.intersects(sourceFrameProjected))\n        {\n            state.sourceFrame.width = 0;\n            state.sourceFrame.height = 0;\n        }\n\n        // Round sourceFrame in screen space based on render-texture.\n        this.roundFrame(\n            state.sourceFrame,\n            renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution,\n            renderTextureSystem.sourceFrame,\n            renderTextureSystem.destinationFrame,\n            renderer.projection.transform,\n        );\n\n        state.renderTexture = this.getOptimalFilterTexture(state.sourceFrame.width, state.sourceFrame.height,\n            resolution, multisample);\n        state.filters = filters;\n\n        state.destinationFrame.width = state.renderTexture.width;\n        state.destinationFrame.height = state.renderTexture.height;\n\n        const destinationFrame = this.tempRect;\n\n        destinationFrame.x = 0;\n        destinationFrame.y = 0;\n        destinationFrame.width = state.sourceFrame.width;\n        destinationFrame.height = state.sourceFrame.height;\n\n        state.renderTexture.filterFrame = state.sourceFrame;\n        state.bindingSourceFrame.copyFrom(renderTextureSystem.sourceFrame);\n        state.bindingDestinationFrame.copyFrom(renderTextureSystem.destinationFrame);\n\n        state.transform = renderer.projection.transform;\n        renderer.projection.transform = null;\n        renderTextureSystem.bind(state.renderTexture, state.sourceFrame, destinationFrame);\n        renderer.framebuffer.clear(0, 0, 0, 0);\n    }\n\n    /** Pops off the filter and applies it. */\n    pop(): void\n    {\n        const filterStack = this.defaultFilterStack;\n        const state = filterStack.pop();\n        const filters = state.filters;\n\n        this.activeState = state;\n\n        const globalUniforms = this.globalUniforms.uniforms;\n\n        globalUniforms.outputFrame = state.sourceFrame;\n        globalUniforms.resolution = state.resolution;\n\n        const inputSize = globalUniforms.inputSize;\n        const inputPixel = globalUniforms.inputPixel;\n        const inputClamp = globalUniforms.inputClamp;\n\n        inputSize[0] = state.destinationFrame.width;\n        inputSize[1] = state.destinationFrame.height;\n        inputSize[2] = 1.0 / inputSize[0];\n        inputSize[3] = 1.0 / inputSize[1];\n\n        inputPixel[0] = Math.round(inputSize[0] * state.resolution);\n        inputPixel[1] = Math.round(inputSize[1] * state.resolution);\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (state.sourceFrame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (state.sourceFrame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        // only update the rect if its legacy..\n        if (state.legacy)\n        {\n            const filterArea = globalUniforms.filterArea;\n\n            filterArea[0] = state.destinationFrame.width;\n            filterArea[1] = state.destinationFrame.height;\n            filterArea[2] = state.sourceFrame.x;\n            filterArea[3] = state.sourceFrame.y;\n\n            globalUniforms.filterClamp = globalUniforms.inputClamp;\n        }\n\n        this.globalUniforms.update();\n\n        const lastState = filterStack[filterStack.length - 1];\n\n        this.renderer.framebuffer.blit();\n\n        if (filters.length === 1)\n        {\n            filters[0].apply(this, state.renderTexture, lastState.renderTexture, CLEAR_MODES.BLEND, state);\n\n            this.returnFilterTexture(state.renderTexture);\n        }\n        else\n        {\n            let flip = state.renderTexture;\n            let flop = this.getOptimalFilterTexture(\n                flip.width,\n                flip.height,\n                state.resolution\n            );\n\n            flop.filterFrame = flip.filterFrame;\n\n            let i = 0;\n\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                if (i === 1 && state.multisample > 1)\n                {\n                    flop = this.getOptimalFilterTexture(\n                        flip.width,\n                        flip.height,\n                        state.resolution\n                    );\n\n                    flop.filterFrame = flip.filterFrame;\n                }\n\n                filters[i].apply(this, flip, flop, CLEAR_MODES.CLEAR, state);\n\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, lastState.renderTexture, CLEAR_MODES.BLEND, state);\n\n            if (i > 1 && state.multisample > 1)\n            {\n                this.returnFilterTexture(state.renderTexture);\n            }\n\n            this.returnFilterTexture(flip);\n            this.returnFilterTexture(flop);\n        }\n\n        // lastState.renderTexture is blitted when lastState is popped\n\n        state.clear();\n        this.statePool.push(state);\n    }\n\n    /**\n     * Binds a renderTexture with corresponding `filterFrame`, clears it if mode corresponds.\n     * @param filterTexture - renderTexture to bind, should belong to filter pool or filter stack\n     * @param clearMode - clearMode, by default its CLEAR/YES. See {@link PIXI.CLEAR_MODES}\n     */\n    bindAndClear(filterTexture: RenderTexture, clearMode: CLEAR_MODES = CLEAR_MODES.CLEAR): void\n    {\n        const {\n            renderTexture: renderTextureSystem,\n            state: stateSystem,\n        } = this.renderer;\n\n        if (filterTexture === this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture)\n        {\n            // Restore projection transform if rendering into the output render-target.\n            this.renderer.projection.transform = this.activeState.transform;\n        }\n        else\n        {\n            // Prevent projection within filtering pipeline.\n            this.renderer.projection.transform = null;\n        }\n\n        if (filterTexture && filterTexture.filterFrame)\n        {\n            const destinationFrame = this.tempRect;\n\n            destinationFrame.x = 0;\n            destinationFrame.y = 0;\n            destinationFrame.width = filterTexture.filterFrame.width;\n            destinationFrame.height = filterTexture.filterFrame.height;\n\n            renderTextureSystem.bind(filterTexture, filterTexture.filterFrame, destinationFrame);\n        }\n        else if (filterTexture !== this.defaultFilterStack[this.defaultFilterStack.length - 1].renderTexture)\n        {\n            renderTextureSystem.bind(filterTexture);\n        }\n        else\n        {\n            // Restore binding for output render-target.\n            this.renderer.renderTexture.bind(\n                filterTexture,\n                this.activeState.bindingSourceFrame,\n                this.activeState.bindingDestinationFrame\n            );\n        }\n\n        // Clear the texture in BLIT mode if blending is disabled or the forceClear flag is set. The blending\n        // is stored in the 0th bit of the state.\n        const autoClear = (stateSystem.stateId & 1) || this.forceClear;\n\n        if (clearMode === CLEAR_MODES.CLEAR\n            || (clearMode === CLEAR_MODES.BLIT && autoClear))\n        {\n            // Use framebuffer.clear because we want to clear the whole filter texture, not just the filtering\n            // area over which the shaders are run. This is because filters may sampling outside of it (e.g. blur)\n            // instead of clamping their arithmetic.\n            this.renderer.framebuffer.clear(0, 0, 0, 0);\n        }\n    }\n\n    /**\n     * Draws a filter using the default rendering process.\n     *\n     * This should be called only by {@link Filter#apply}.\n     * @param filter - The filter to draw.\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it\n     */\n    applyFilter(filter: Filter, input: RenderTexture, output: RenderTexture, clearMode?: CLEAR_MODES): void\n    {\n        const renderer = this.renderer;\n\n        // Set state before binding, so bindAndClear gets the blend mode.\n        renderer.state.set(filter.state);\n        this.bindAndClear(output, clearMode);\n\n        // set the uniforms..\n        filter.uniforms.uSampler = input;\n        filter.uniforms.filterGlobals = this.globalUniforms;\n\n        // TODO make it so that the order of this does not matter..\n        // because it does at the moment cos of global uniforms.\n        // they need to get resynced\n        renderer.shader.bind(filter);\n\n        // check to see if the filter is a legacy one..\n        filter.legacy = !!filter.program.attributeData.aTextureCoord;\n\n        if (filter.legacy)\n        {\n            this.quadUv.map(input._frame, input.filterFrame);\n\n            renderer.geometry.bind(this.quadUv);\n            renderer.geometry.draw(DRAW_MODES.TRIANGLES);\n        }\n        else\n        {\n            renderer.geometry.bind(this.quad);\n            renderer.geometry.draw(DRAW_MODES.TRIANGLE_STRIP);\n        }\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     * @param outputMatrix - The matrix to output to.\n     * @param {PIXI.Sprite} sprite - The sprite to map to.\n     * @returns The mapped matrix.\n     */\n    calculateSpriteMatrix(outputMatrix: Matrix, sprite: ISpriteMaskTarget): Matrix\n    {\n        const { sourceFrame, destinationFrame } = this.activeState;\n        const { orig } = sprite._texture;\n        const mappedMatrix = outputMatrix.set(destinationFrame.width, 0, 0,\n            destinationFrame.height, sourceFrame.x, sourceFrame.y);\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.TEMP_MATRIX);\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(1.0 / orig.width, 1.0 / orig.height);\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    /** Destroys this Filter System. */\n    destroy(): void\n    {\n        this.renderer = null;\n\n        // Those textures has to be destroyed by RenderTextureSystem or FramebufferSystem\n        this.texturePool.clear(false);\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param minWidth - The minimum width of the render texture in real pixels.\n     * @param minHeight - The minimum height of the render texture in real pixels.\n     * @param resolution - The resolution of the render texture.\n     * @param multisample - Number of samples of the render texture.\n     * @returns - The new render texture.\n     */\n    protected getOptimalFilterTexture(minWidth: number, minHeight: number, resolution = 1,\n        multisample: MSAA_QUALITY = MSAA_QUALITY.NONE): RenderTexture\n    {\n        return this.texturePool.getOptimalTexture(minWidth, minHeight, resolution, multisample);\n    }\n\n    /**\n     * Gets extra render texture to use inside current filter\n     * To be compliant with older filters, you can use params in any order\n     * @param input - renderTexture from which size and resolution will be copied\n     * @param resolution - override resolution of the renderTexture\n     * @param multisample - number of samples of the renderTexture\n     */\n    getFilterTexture(input?: RenderTexture, resolution?: number, multisample?: MSAA_QUALITY): RenderTexture\n    {\n        if (typeof input === 'number')\n        {\n            const swap = input;\n\n            input = resolution as any;\n            resolution = swap;\n        }\n\n        input = input || this.activeState.renderTexture;\n\n        const filterTexture = this.texturePool.getOptimalTexture(input.width, input.height, resolution || input.resolution,\n            multisample || MSAA_QUALITY.NONE);\n\n        filterTexture.filterFrame = input.filterFrame;\n\n        return filterTexture;\n    }\n\n    /**\n     * Frees a render texture back into the pool.\n     * @param renderTexture - The renderTarget to free\n     */\n    returnFilterTexture(renderTexture: RenderTexture): void\n    {\n        this.texturePool.returnTexture(renderTexture);\n    }\n\n    /** Empties the texture pool. */\n    emptyPool(): void\n    {\n        this.texturePool.clear(true);\n    }\n\n    /** Calls `texturePool.resize()`, affects fullScreen renderTextures. */\n    resize(): void\n    {\n        this.texturePool.setScreenSize(this.renderer.view);\n    }\n\n    /**\n     * @param matrix - first param\n     * @param rect - second param\n     */\n    private transformAABB(matrix: Matrix, rect: Rectangle): void\n    {\n        const lt = tempPoints[0];\n        const lb = tempPoints[1];\n        const rt = tempPoints[2];\n        const rb = tempPoints[3];\n\n        lt.set(rect.left, rect.top);\n        lb.set(rect.left, rect.bottom);\n        rt.set(rect.right, rect.top);\n        rb.set(rect.right, rect.bottom);\n\n        matrix.apply(lt, lt);\n        matrix.apply(lb, lb);\n        matrix.apply(rt, rt);\n        matrix.apply(rb, rb);\n\n        const x0 = Math.min(lt.x, lb.x, rt.x, rb.x);\n        const y0 = Math.min(lt.y, lb.y, rt.y, rb.y);\n        const x1 = Math.max(lt.x, lb.x, rt.x, rb.x);\n        const y1 = Math.max(lt.y, lb.y, rt.y, rb.y);\n\n        rect.x = x0;\n        rect.y = y0;\n        rect.width = x1 - x0;\n        rect.height = y1 - y0;\n    }\n\n    private roundFrame(\n        frame: Rectangle,\n        resolution: number,\n        bindingSourceFrame: Rectangle,\n        bindingDestinationFrame: Rectangle,\n        transform?: Matrix\n    )\n    {\n        if (frame.width <= 0 || frame.height <= 0 || bindingSourceFrame.width <= 0 || bindingSourceFrame.height <= 0)\n        {\n            return;\n        }\n\n        if (transform)\n        {\n            const { a, b, c, d } = transform;\n\n            // Skip if skew/rotation present in matrix, except for multiple of 90° rotation. If rotation\n            // is a multiple of 90°, then either pair of (b,c) or (a,d) will be (0,0).\n            if ((Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4)\n                && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4))\n            {\n                return;\n            }\n        }\n\n        transform = transform ? tempMatrix.copyFrom(transform) : tempMatrix.identity();\n\n        // Get forward transform from world space to screen space\n        transform\n            .translate(-bindingSourceFrame.x, -bindingSourceFrame.y)\n            .scale(\n                bindingDestinationFrame.width / bindingSourceFrame.width,\n                bindingDestinationFrame.height / bindingSourceFrame.height)\n            .translate(bindingDestinationFrame.x, bindingDestinationFrame.y);\n\n        // Convert frame to screen space\n        this.transformAABB(transform, frame);\n\n        // Round frame in screen space\n        frame.ceil(resolution);\n\n        // Project back into world space.\n        this.transformAABB(transform.invert(), frame);\n    }\n}\n","import type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\n\n/**\n * Base for a common object renderer that can be used as a\n * system renderer plugin.\n * @memberof PIXI\n */\nexport class ObjectRenderer implements ISystem\n{\n    /** The renderer this manager works for. */\n    protected renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this manager works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n    }\n\n    /** Stub method that should be used to empty the current batch by rendering objects now. */\n    flush(): void\n    {\n        // flush!\n    }\n\n    /** Generic destruction method that frees all resources. This should be called by subclasses. */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Stub method that initializes any state required before\n     * rendering starts. It is different from the `prerender`\n     * signal, which occurs every frame, in that it is called\n     * whenever an object requests _this_ renderer specifically.\n     */\n    start(): void\n    {\n        // set the shader..\n    }\n\n    /** Stops the renderer. It should free up any state and become dormant. */\n    stop(): void\n    {\n        this.flush();\n    }\n\n    /**\n     * Keeps the object to render. It doesn't have to be\n     * rendered immediately.\n     * @param {PIXI.DisplayObject} _object - The object to render.\n     */\n    render(_object: any): void // eslint-disable-line @typescript-eslint/explicit-module-boundary-types\n    {\n        // render the object\n    }\n}\n","import { ObjectRenderer } from './ObjectRenderer';\n\nimport type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { BaseTexture } from '../textures/BaseTexture';\nimport type { BatchTextureArray } from './BatchTextureArray';\n\n/**\n * System plugin to the renderer to manage batching.\n * @memberof PIXI\n */\nexport class BatchSystem implements ISystem\n{\n    /** An empty renderer. */\n    public readonly emptyRenderer: ObjectRenderer;\n\n    /** The currently active ObjectRenderer. */\n    public currentRenderer: ObjectRenderer;\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.emptyRenderer = new ObjectRenderer(renderer);\n        this.currentRenderer = this.emptyRenderer;\n    }\n\n    /**\n     * Changes the current renderer to the one given in parameter\n     * @param objectRenderer - The object renderer to use.\n     */\n    setObjectRenderer(objectRenderer: ObjectRenderer): void\n    {\n        if (this.currentRenderer === objectRenderer)\n        {\n            return;\n        }\n\n        this.currentRenderer.stop();\n        this.currentRenderer = objectRenderer;\n\n        this.currentRenderer.start();\n    }\n\n    /**\n     * This should be called if you wish to do some custom rendering\n     * It will basically render anything that may be batched up such as sprites\n     */\n    flush(): void\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n    }\n\n    /** Reset the system to an empty renderer */\n    reset(): void\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n    }\n\n    /**\n     * Handy function for batch renderers: copies bound textures in first maxTextures locations to array\n     * sets actual _batchLocation for them\n     * @param arr - arr copy destination\n     * @param maxTextures - number of copied elements\n     */\n    copyBoundTextures(arr: BaseTexture[], maxTextures: number): void\n    {\n        const { boundTextures } = this.renderer.texture;\n\n        for (let i = maxTextures - 1; i >= 0; --i)\n        {\n            arr[i] = boundTextures[i] || null;\n            if (arr[i])\n            {\n                arr[i]._batchLocation = i;\n            }\n        }\n    }\n\n    /**\n     * Assigns batch locations to textures in array based on boundTextures state.\n     * All textures in texArray should have `_batchEnabled = _batchId`,\n     * and their count should be less than `maxTextures`.\n     * @param texArray - textures to bound\n     * @param boundTextures - current state of bound textures\n     * @param batchId - marker for _batchEnabled param of textures in texArray\n     * @param maxTextures - number of texture locations to manipulate\n     */\n    boundArray(texArray: BatchTextureArray, boundTextures: Array<BaseTexture>,\n        batchId: number, maxTextures: number): void\n    {\n        const { elements, ids, count } = texArray;\n        let j = 0;\n\n        for (let i = 0; i < count; i++)\n        {\n            const tex = elements[i];\n            const loc = tex._batchLocation;\n\n            if (loc >= 0 && loc < maxTextures\n                && boundTextures[loc] === tex)\n            {\n                ids[i] = loc;\n                continue;\n            }\n\n            while (j < maxTextures)\n            {\n                const bound = boundTextures[j];\n\n                if (bound && bound._batchEnabled === batchId\n                    && bound._batchLocation === j)\n                {\n                    j++;\n                    continue;\n                }\n\n                ids[i] = j;\n                tex._batchLocation = j;\n                boundTextures[j] = tex;\n                break;\n            }\n        }\n    }\n\n    /**\n     * @ignore\n     */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n","import { ENV } from '@pixi/constants';\nimport { settings } from '../settings';\n\nimport type { ISystem } from '../ISystem';\nimport type { IRenderingContext } from '../IRenderingContext';\nimport type { Renderer } from '../Renderer';\nimport type { WebGLExtensions } from './WebGLExtensions';\n\nlet CONTEXT_UID_COUNTER = 0;\n\nexport interface ISupportDict\n{\n    uint32Indices: boolean;\n}\n\n/**\n * System plugin to the renderer to manage the context.\n * @memberof PIXI\n */\nexport class ContextSystem implements ISystem\n{\n    /**\n     * Either 1 or 2 to reflect the WebGL version being used.\n     * @readonly\n     */\n    public webGLVersion: number;\n\n    /**\n     * Features supported by current context.\n     * @type {object}\n     * @readonly\n     * @property {boolean} uint32Indices - Support for 32-bit indices buffer.\n     */\n    readonly supports: ISupportDict;\n\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n\n    /**\n     * Extensions available.\n     * @type {object}\n     * @readonly\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n     */\n    public extensions: WebGLExtensions;\n\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.webGLVersion = 1;\n        this.extensions = {};\n\n        this.supports = {\n            uint32Indices: false,\n        };\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n\n        (renderer.view as any).addEventListener('webglcontextlost', this.handleContextLost, false);\n        renderer.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @readonly\n     */\n    get isLost(): boolean\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handles the context change event.\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */\n    protected contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n    }\n\n    /**\n     * Initializes the context.\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    initFromContext(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.validateContext(gl);\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID_COUNTER++;\n        this.renderer.runners.contextChange.emit(gl);\n    }\n\n    /**\n     * Initialize from context options\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param {object} options - context attributes\n     */\n    initFromOptions(options: WebGLContextAttributes): void\n    {\n        const gl = this.createContext(this.renderer.view, options);\n\n        this.initFromContext(gl);\n    }\n\n    /**\n     * Helper class to create a WebGL Context\n     * @param canvas - the canvas element that we will get the context from\n     * @param options - An options object that gets passed in to the canvas element containing the\n     *    context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @returns {WebGLRenderingContext} the WebGL context\n     */\n    createContext(canvas: HTMLCanvasElement, options: WebGLContextAttributes): IRenderingContext\n    {\n        let gl;\n\n        if (settings.PREFER_ENV >= ENV.WEBGL2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (gl)\n        {\n            this.webGLVersion = 2;\n        }\n        else\n        {\n            this.webGLVersion = 1;\n\n            gl = canvas.getContext('webgl', options) || canvas.getContext('experimental-webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl as IRenderingContext;\n\n        this.getExtensions();\n\n        return this.gl;\n    }\n\n    /** Auto-populate the {@link PIXI.ContextSystem.extensions extensions}. */\n    protected getExtensions(): void\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        const common = {\n            loseContext: gl.getExtension('WEBGL_lose_context'),\n            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), // eslint-disable-line camelcase\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc')\n        };\n\n        if (this.webGLVersion === 1)\n        {\n            Object.assign(this.extensions, common, {\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBGL_depth_texture'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n            });\n        }\n        else if (this.webGLVersion === 2)\n        {\n            Object.assign(this.extensions, common, {\n                // Floats and half-floats\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float')\n            });\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    protected handleContextLost(event: WebGLContextEvent): void\n    {\n        // Prevent default to be able to restore the context\n        event.preventDefault();\n\n        // Restore the context after this event has exited\n        setTimeout(() =>\n        {\n            if (this.gl.isContextLost() && this.extensions.loseContext)\n            {\n                this.extensions.loseContext.restoreContext();\n            }\n        }, 0);\n    }\n\n    /** Handles a restored webgl context. */\n    protected handleContextRestored(): void\n    {\n        this.renderer.runners.contextChange.emit(this.gl);\n    }\n\n    destroy(): void\n    {\n        const view = this.renderer.view;\n\n        this.renderer = null;\n\n        // remove listeners\n        (view as any).removeEventListener('webglcontextlost', this.handleContextLost);\n        view.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n        this.gl.useProgram(null);\n\n        if (this.extensions.loseContext)\n        {\n            this.extensions.loseContext.loseContext();\n        }\n    }\n\n    /** Handle the post-render runner event. */\n    protected postrender(): void\n    {\n        if (this.renderer.renderingToScreen)\n        {\n            this.gl.flush();\n        }\n    }\n\n    /**\n     * Validate context.\n     * @param {WebGLRenderingContext} gl - Render context.\n     */\n    protected validateContext(gl: IRenderingContext): void\n    {\n        const attributes = gl.getContextAttributes();\n\n        const isWebGl2 = 'WebGL2RenderingContext' in globalThis && gl instanceof globalThis.WebGL2RenderingContext;\n\n        if (isWebGl2)\n        {\n            this.webGLVersion = 2;\n        }\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (attributes && !attributes.stencil)\n        {\n            /* eslint-disable max-len, no-console */\n            console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable max-len, no-console */\n        }\n\n        const hasuint32 = isWebGl2 || !!(gl as WebGLRenderingContext).getExtension('OES_element_index_uint');\n\n        this.supports.uint32Indices = hasuint32;\n\n        if (!hasuint32)\n        {\n            /* eslint-disable max-len, no-console */\n            console.warn('Provided WebGL context does not support 32 index buffer, complex graphics may not render correctly');\n            /* eslint-enable max-len, no-console */\n        }\n    }\n}\n","import { MSAA_QUALITY } from '@pixi/constants';\n\nimport type { Framebuffer } from './Framebuffer';\n\n/**\n * Internal framebuffer for WebGL context.\n * @memberof PIXI\n */\nexport class GLFramebuffer\n{\n    /** The WebGL framebuffer. */\n    public framebuffer: WebGLFramebuffer;\n\n    /** Stencil+depth , usually costs 32bits per pixel. */\n    public stencil: WebGLRenderbuffer;\n\n    /** Detected AA samples number. */\n    public multisample: MSAA_QUALITY;\n\n    /** In case MSAA, we use this Renderbuffer instead of colorTextures[0] when we write info. */\n    public msaaBuffer: WebGLRenderbuffer;\n\n    /**\n     * In case we use MSAA, this is actual framebuffer that has colorTextures[0]\n     * The contents of that framebuffer are read when we use that renderTexture in sprites\n     */\n    public blitFramebuffer: Framebuffer;\n\n    /** Latest known version of framebuffer. */\n    dirtyId: number;\n\n    /** Latest known version of framebuffer format. */\n    dirtyFormat: number;\n\n    /** Latest known version of framebuffer size. */\n    dirtySize: number;\n\n    /** Store the current mipmap of the textures the framebuffer will write too. */\n    mipLevel: number;\n\n    constructor(framebuffer: WebGLTexture)\n    {\n        this.framebuffer = framebuffer;\n        this.stencil = null;\n        this.dirtyId = -1;\n        this.dirtyFormat = -1;\n        this.dirtySize = -1;\n        this.multisample = MSAA_QUALITY.NONE;\n        this.msaaBuffer = null;\n        this.blitFramebuffer = null;\n        this.mipLevel = 0;\n    }\n}\n","import { Rectangle } from '@pixi/math';\nimport { ENV, BUFFER_BITS, MSAA_QUALITY } from '@pixi/constants';\nimport { settings } from '../settings';\nimport { Framebuffer } from './Framebuffer';\nimport { GLFramebuffer } from './GLFramebuffer';\n\nimport type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { IRenderingContext } from '../IRenderingContext';\n\nconst tempRectangle = new Rectangle();\n\n/**\n * System plugin to the renderer to manage framebuffers.\n * @memberof PIXI\n */\nexport class FramebufferSystem implements ISystem\n{\n    /** A list of managed framebuffers. */\n    public readonly managedFramebuffers: Array<Framebuffer>;\n    public current: Framebuffer;\n    public viewport: Rectangle;\n    public hasMRT: boolean;\n    public writeDepthTexture: boolean;\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n\n    /** Framebuffer value that shows that we don't know what is bound. */\n    protected unknownFramebuffer: Framebuffer;\n    protected msaaSamples: Array<number>;\n    public renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.managedFramebuffers = [];\n        this.unknownFramebuffer = new Framebuffer(10, 10);\n\n        this.msaaSamples = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.disposeAll(true);\n\n        const gl = this.gl = this.renderer.gl;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n        this.hasMRT = true;\n        this.writeDepthTexture = true;\n\n        // webgl2\n        if (this.renderer.context.webGLVersion === 1)\n        {\n            // webgl 1!\n            let nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;\n            let nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n\n            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n            {\n                nativeDrawBuffersExtension = null;\n                nativeDepthTextureExtension = null;\n            }\n\n            if (nativeDrawBuffersExtension)\n            {\n                gl.drawBuffers = (activeTextures: number[]): void =>\n                    nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures);\n            }\n            else\n            {\n                this.hasMRT = false;\n                gl.drawBuffers = (): void =>\n                {\n                    // empty\n                };\n            }\n\n            if (!nativeDepthTextureExtension)\n            {\n                this.writeDepthTexture = false;\n            }\n        }\n        else\n        {\n            // WebGL2\n            // cache possible MSAA samples\n            this.msaaSamples = gl.getInternalformatParameter(gl.RENDERBUFFER, gl.RGBA8, gl.SAMPLES);\n        }\n    }\n\n    /**\n     * Bind a framebuffer.\n     * @param framebuffer\n     * @param frame - frame, default is framebuffer size\n     * @param mipLevel - optional mip level to set on the framebuffer - defaults to 0\n     */\n    bind(framebuffer?: Framebuffer, frame?: Rectangle, mipLevel = 0): void\n    {\n        const { gl } = this;\n\n        if (framebuffer)\n        {\n            // TODO caching layer!\n\n            const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n\n            if (this.current !== framebuffer)\n            {\n                this.current = framebuffer;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n            }\n            // make sure all textures are unbound..\n\n            if (fbo.mipLevel !== mipLevel)\n            {\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n                fbo.mipLevel = mipLevel;\n            }\n\n            // now check for updates...\n            if (fbo.dirtyId !== framebuffer.dirtyId)\n            {\n                fbo.dirtyId = framebuffer.dirtyId;\n\n                if (fbo.dirtyFormat !== framebuffer.dirtyFormat)\n                {\n                    fbo.dirtyFormat = framebuffer.dirtyFormat;\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.updateFramebuffer(framebuffer, mipLevel);\n                }\n                else if (fbo.dirtySize !== framebuffer.dirtySize)\n                {\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.resizeFramebuffer(framebuffer);\n                }\n            }\n\n            for (let i = 0; i < framebuffer.colorTextures.length; i++)\n            {\n                const tex = framebuffer.colorTextures[i];\n\n                this.renderer.texture.unbind(tex.parentTextureArray || tex);\n            }\n\n            if (framebuffer.depthTexture)\n            {\n                this.renderer.texture.unbind(framebuffer.depthTexture);\n            }\n\n            if (frame)\n            {\n                const mipWidth = (frame.width >> mipLevel);\n                const mipHeight = (frame.height >> mipLevel);\n\n                const scale = mipWidth / frame.width;\n\n                this.setViewport(\n                    frame.x * scale,\n                    frame.y * scale,\n                    mipWidth,\n                    mipHeight\n                );\n            }\n            else\n            {\n                const mipWidth = (framebuffer.width >> mipLevel);\n                const mipHeight = (framebuffer.height >> mipLevel);\n\n                this.setViewport(0, 0, mipWidth, mipHeight);\n            }\n        }\n        else\n        {\n            if (this.current)\n            {\n                this.current = null;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            }\n\n            if (frame)\n            {\n                this.setViewport(frame.x, frame.y, frame.width, frame.height);\n            }\n            else\n            {\n                this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n            }\n        }\n    }\n\n    /**\n     * Set the WebGLRenderingContext's viewport.\n     * @param x - X position of viewport\n     * @param y - Y position of viewport\n     * @param width - Width of viewport\n     * @param height - Height of viewport\n     */\n    setViewport(x: number, y: number, width: number, height: number): void\n    {\n        const v = this.viewport;\n\n        x = Math.round(x);\n        y = Math.round(y);\n        width = Math.round(width);\n        height = Math.round(height);\n\n        if (v.width !== width || v.height !== height || v.x !== x || v.y !== y)\n        {\n            v.x = x;\n            v.y = y;\n            v.width = width;\n            v.height = height;\n\n            this.gl.viewport(x, y, width, height);\n        }\n    }\n\n    /**\n     * Get the size of the current width and height. Returns object with `width` and `height` values.\n     * @readonly\n     */\n    get size(): { x: number; y: number; width: number; height: number }\n    {\n        if (this.current)\n        {\n            // TODO store temp\n            return { x: 0, y: 0, width: this.current.width, height: this.current.height };\n        }\n\n        return { x: 0, y: 0, width: this.renderer.width, height: this.renderer.height };\n    }\n\n    /**\n     * Clear the color of the context\n     * @param r - Red value from 0 to 1\n     * @param g - Green value from 0 to 1\n     * @param b - Blue value from 0 to 1\n     * @param a - Alpha value from 0 to 1\n     * @param {PIXI.BUFFER_BITS} [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */\n    clear(r: number, g: number, b: number, a: number, mask: BUFFER_BITS = BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH): void\n    {\n        const { gl } = this;\n\n        // TODO clear color can be set only one right?\n        gl.clearColor(r, g, b, a);\n        gl.clear(mask);\n    }\n\n    /**\n     * Initialize framebuffer for this context\n     * @protected\n     * @param framebuffer\n     * @returns - created GLFramebuffer\n     */\n    initFramebuffer(framebuffer: Framebuffer): GLFramebuffer\n    {\n        const { gl } = this;\n        const fbo = new GLFramebuffer(gl.createFramebuffer());\n\n        fbo.multisample = this.detectSamples(framebuffer.multisample);\n        framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;\n\n        this.managedFramebuffers.push(framebuffer);\n        framebuffer.disposeRunner.add(this);\n\n        return fbo;\n    }\n\n    /**\n     * Resize the framebuffer\n     * @param framebuffer\n     * @protected\n     */\n    resizeFramebuffer(framebuffer: Framebuffer): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (fbo.msaaBuffer)\n        {\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                gl.RGBA8, framebuffer.width, framebuffer.height);\n        }\n\n        if (fbo.stencil)\n        {\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            }\n        }\n\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n        }\n\n        if (framebuffer.depthTexture && this.writeDepthTexture)\n        {\n            this.renderer.texture.bind(framebuffer.depthTexture, 0);\n        }\n    }\n\n    /**\n     * Update the framebuffer\n     * @param framebuffer\n     * @param mipLevel\n     * @protected\n     */\n    updateFramebuffer(framebuffer: Framebuffer, mipLevel: number): void\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        // bind the color texture\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        if (fbo.multisample > 1 && this.canMultisampleFramebuffer(framebuffer))\n        {\n            fbo.msaaBuffer = fbo.msaaBuffer || gl.createRenderbuffer();\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.msaaBuffer);\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                gl.RGBA8, framebuffer.width, framebuffer.height);\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.RENDERBUFFER, fbo.msaaBuffer);\n        }\n        else if (fbo.msaaBuffer)\n        {\n            gl.deleteRenderbuffer(fbo.msaaBuffer);\n            fbo.msaaBuffer = null;\n\n            if (fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer.dispose();\n                fbo.blitFramebuffer = null;\n            }\n        }\n\n        const activeTextures = [];\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = colorTextures[i];\n            const parentTexture = texture.parentTextureArray || texture;\n\n            this.renderer.texture.bind(parentTexture, 0);\n\n            if (i === 0 && fbo.msaaBuffer)\n            {\n                continue;\n            }\n\n            gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                gl.COLOR_ATTACHMENT0 + i,\n                texture.target,\n                parentTexture._glTextures[this.CONTEXT_UID].texture,\n                mipLevel);\n\n            activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n        }\n\n        if (activeTextures.length > 1)\n        {\n            gl.drawBuffers(activeTextures);\n        }\n\n        if (framebuffer.depthTexture)\n        {\n            const writeDepthTexture = this.writeDepthTexture;\n\n            if (writeDepthTexture)\n            {\n                const depthTexture = framebuffer.depthTexture;\n\n                this.renderer.texture.bind(depthTexture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.DEPTH_ATTACHMENT,\n                    gl.TEXTURE_2D,\n                    depthTexture._glTextures[this.CONTEXT_UID].texture,\n                    mipLevel);\n            }\n        }\n\n        if ((framebuffer.stencil || framebuffer.depth) && !(framebuffer.depthTexture && this.writeDepthTexture))\n        {\n            fbo.stencil = fbo.stencil || gl.createRenderbuffer();\n\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample,\n                    gl.DEPTH24_STENCIL8, framebuffer.width, framebuffer.height);\n            }\n            else\n            {\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            }\n\n            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);\n        }\n        else if (fbo.stencil)\n        {\n            gl.deleteRenderbuffer(fbo.stencil);\n            fbo.stencil = null;\n        }\n    }\n\n    /**\n     * Returns true if the frame buffer can be multisampled.\n     * @param framebuffer\n     */\n    protected canMultisampleFramebuffer(framebuffer: Framebuffer): boolean\n    {\n        return this.renderer.context.webGLVersion !== 1\n            && framebuffer.colorTextures.length <= 1 && !framebuffer.depthTexture;\n    }\n\n    /**\n     * Detects number of samples that is not more than a param but as close to it as possible\n     * @param samples - number of samples\n     * @returns - recommended number of samples\n     */\n    protected detectSamples(samples: MSAA_QUALITY): MSAA_QUALITY\n    {\n        const { msaaSamples } = this;\n        let res: number = MSAA_QUALITY.NONE;\n\n        if (samples <= 1 || msaaSamples === null)\n        {\n            return res;\n        }\n        for (let i = 0; i < msaaSamples.length; i++)\n        {\n            if (msaaSamples[i] <= samples)\n            {\n                res = msaaSamples[i];\n                break;\n            }\n        }\n\n        if (res === 1)\n        {\n            res = MSAA_QUALITY.NONE;\n        }\n\n        return res;\n    }\n\n    /**\n     * Only works with WebGL2\n     *\n     * blits framebuffer to another of the same or bigger size\n     * after that target framebuffer is bound\n     *\n     * Fails with WebGL warning if blits multisample framebuffer to different size\n     * @param framebuffer - by default it blits \"into itself\", from renderBuffer to texture.\n     * @param sourcePixels - source rectangle in pixels\n     * @param destPixels - dest rectangle in pixels, assumed to be the same as sourcePixels\n     */\n    public blit(framebuffer?: Framebuffer, sourcePixels?: Rectangle, destPixels?: Rectangle): void\n    {\n        const { current, renderer, gl, CONTEXT_UID } = this;\n\n        if (renderer.context.webGLVersion !== 2)\n        {\n            return;\n        }\n\n        if (!current)\n        {\n            return;\n        }\n        const fbo = current.glFramebuffers[CONTEXT_UID];\n\n        if (!fbo)\n        {\n            return;\n        }\n        if (!framebuffer)\n        {\n            if (!fbo.msaaBuffer)\n            {\n                return;\n            }\n\n            const colorTexture = current.colorTextures[0];\n\n            if (!colorTexture)\n            {\n                return;\n            }\n\n            if (!fbo.blitFramebuffer)\n            {\n                fbo.blitFramebuffer = new Framebuffer(current.width, current.height);\n                fbo.blitFramebuffer.addColorTexture(0, colorTexture);\n            }\n\n            framebuffer = fbo.blitFramebuffer;\n\n            if (framebuffer.colorTextures[0] !== colorTexture)\n            {\n                framebuffer.colorTextures[0] = colorTexture;\n                framebuffer.dirtyId++;\n                framebuffer.dirtyFormat++;\n            }\n\n            if (framebuffer.width !== current.width || framebuffer.height !== current.height)\n            {\n                framebuffer.width = current.width;\n                framebuffer.height = current.height;\n                framebuffer.dirtyId++;\n                framebuffer.dirtySize++;\n            }\n        }\n\n        if (!sourcePixels)\n        {\n            sourcePixels = tempRectangle;\n            sourcePixels.width = current.width;\n            sourcePixels.height = current.height;\n        }\n        if (!destPixels)\n        {\n            destPixels = sourcePixels;\n        }\n\n        const sameSize = sourcePixels.width === destPixels.width && sourcePixels.height === destPixels.height;\n\n        this.bind(framebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fbo.framebuffer);\n        gl.blitFramebuffer(\n            sourcePixels.left, sourcePixels.top, sourcePixels.right, sourcePixels.bottom,\n            destPixels.left, destPixels.top, destPixels.right, destPixels.bottom,\n            gl.COLOR_BUFFER_BIT, sameSize ? gl.NEAREST : gl.LINEAR\n        );\n    }\n\n    /**\n     * Disposes framebuffer.\n     * @param framebuffer - framebuffer that has to be disposed of\n     * @param contextLost - If context was lost, we suppress all delete function calls\n     */\n    disposeFramebuffer(framebuffer: Framebuffer, contextLost?: boolean): void\n    {\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        if (!fbo)\n        {\n            return;\n        }\n\n        delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        const index = this.managedFramebuffers.indexOf(framebuffer);\n\n        if (index >= 0)\n        {\n            this.managedFramebuffers.splice(index, 1);\n        }\n\n        framebuffer.disposeRunner.remove(this);\n\n        if (!contextLost)\n        {\n            gl.deleteFramebuffer(fbo.framebuffer);\n\n            if (fbo.msaaBuffer)\n            {\n                gl.deleteRenderbuffer(fbo.msaaBuffer);\n            }\n\n            if (fbo.stencil)\n            {\n                gl.deleteRenderbuffer(fbo.stencil);\n            }\n        }\n\n        if (fbo.blitFramebuffer)\n        {\n            fbo.blitFramebuffer.dispose();\n        }\n    }\n\n    /**\n     * Disposes all framebuffers, but not textures bound to them.\n     * @param [contextLost=false] - If context was lost, we suppress all delete function calls\n     */\n    disposeAll(contextLost?: boolean): void\n    {\n        const list = this.managedFramebuffers;\n\n        (this.managedFramebuffers as any) = [];\n\n        for (let i = 0; i < list.length; i++)\n        {\n            this.disposeFramebuffer(list[i], contextLost);\n        }\n    }\n\n    /**\n     * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\n     * Used by MaskSystem, when its time to use stencil mask for Graphics element.\n     *\n     * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.\n     * @private\n     */\n    forceStencil(): void\n    {\n        const framebuffer = this.current;\n\n        if (!framebuffer)\n        {\n            return;\n        }\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (!fbo || fbo.stencil)\n        {\n            return;\n        }\n\n        framebuffer.stencil = true;\n\n        const w = framebuffer.width;\n        const h = framebuffer.height;\n        const gl = this.gl;\n        const stencil = gl.createRenderbuffer();\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n\n        if (fbo.msaaBuffer)\n        {\n            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, fbo.multisample, gl.DEPTH24_STENCIL8, w, h);\n        }\n        else\n        {\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);\n        }\n\n        fbo.stencil = stencil;\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);\n    }\n\n    /** Resets framebuffer stored state, binds screen framebuffer. Should be called before renderTexture reset(). */\n    reset(): void\n    {\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n","import type { GLBuffer } from './GLBuffer';\nimport { ENV } from '@pixi/constants';\nimport { settings } from '../settings';\n\nimport type { ISystem } from '../ISystem';\nimport type { DRAW_MODES } from '@pixi/constants';\nimport type { Renderer } from '../Renderer';\nimport type { IRenderingContext } from '../IRenderingContext';\nimport type { Geometry } from './Geometry';\nimport type { Shader } from '../shader/Shader';\nimport type { Program } from '../shader/Program';\nimport type { Dict } from '@pixi/utils';\n\nconst byteSizeMap: {[key: number]: number} = { 5126: 4, 5123: 2, 5121: 1 };\n\n/**\n * System plugin to the renderer to manage geometry.\n * @memberof PIXI\n */\nexport class GeometrySystem implements ISystem\n{\n    /**\n     * `true` if we has `*_vertex_array_object` extension.\n     * @readonly\n     */\n    public hasVao: boolean;\n\n    /**\n     * `true` if has `ANGLE_instanced_arrays` extension.\n     * @readonly\n     */\n    public hasInstance: boolean;\n\n    /**\n     * `true` if support `gl.UNSIGNED_INT` in `gl.drawElements` or `gl.drawElementsInstanced`.\n     * @readonly\n     */\n    public canUseUInt32ElementIndex: boolean;\n\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n    protected _activeGeometry: Geometry;\n    protected _activeVao: WebGLVertexArrayObject;\n    protected _boundBuffer: GLBuffer;\n\n    /** Cache for all geometries by id, used in case renderer gets destroyed or for profiling. */\n    readonly managedGeometries: {[key: number]: Geometry};\n\n    /** Renderer that owns this {@link GeometrySystem}. */\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this._activeGeometry = null;\n        this._activeVao = null;\n\n        this.hasVao = true;\n        this.hasInstance = true;\n        this.canUseUInt32ElementIndex = false;\n        this.managedGeometries = {};\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.disposeAll(true);\n\n        const gl = this.gl = this.renderer.gl;\n        const context = this.renderer.context;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n\n        // webgl2\n        if (context.webGLVersion !== 2)\n        {\n            // webgl 1!\n            let nativeVaoExtension = this.renderer.context.extensions.vertexArrayObject;\n\n            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n            {\n                nativeVaoExtension = null;\n            }\n\n            if (nativeVaoExtension)\n            {\n                gl.createVertexArray = (): WebGLVertexArrayObject =>\n                    nativeVaoExtension.createVertexArrayOES();\n\n                gl.bindVertexArray = (vao): void =>\n                    nativeVaoExtension.bindVertexArrayOES(vao);\n\n                gl.deleteVertexArray = (vao): void =>\n                    nativeVaoExtension.deleteVertexArrayOES(vao);\n            }\n            else\n            {\n                this.hasVao = false;\n                gl.createVertexArray = (): WebGLVertexArrayObject =>\n                    null;\n\n                gl.bindVertexArray = (): void =>\n                    null;\n\n                gl.deleteVertexArray = (): void =>\n                    null;\n            }\n        }\n\n        if (context.webGLVersion !== 2)\n        {\n            const instanceExt = gl.getExtension('ANGLE_instanced_arrays');\n\n            if (instanceExt)\n            {\n                gl.vertexAttribDivisor = (a, b): void =>\n                    instanceExt.vertexAttribDivisorANGLE(a, b);\n\n                gl.drawElementsInstanced = (a, b, c, d, e): void =>\n                    instanceExt.drawElementsInstancedANGLE(a, b, c, d, e);\n\n                gl.drawArraysInstanced = (a, b, c, d): void =>\n                    instanceExt.drawArraysInstancedANGLE(a, b, c, d);\n            }\n            else\n            {\n                this.hasInstance = false;\n            }\n        }\n\n        this.canUseUInt32ElementIndex = context.webGLVersion === 2 || !!context.extensions.uint32ElementIndex;\n    }\n\n    /**\n     * Binds geometry so that is can be drawn. Creating a Vao if required\n     * @param geometry - Instance of geometry to bind.\n     * @param shader - Instance of shader to use vao for.\n     */\n    bind(geometry?: Geometry, shader?: Shader): void\n    {\n        shader = shader || this.renderer.shader.shader;\n\n        const { gl } = this;\n\n        // not sure the best way to address this..\n        // currently different shaders require different VAOs for the same geometry\n        // Still mulling over the best way to solve this one..\n        // will likely need to modify the shader attribute locations at run time!\n        let vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];\n        let incRefCount = false;\n\n        if (!vaos)\n        {\n            this.managedGeometries[geometry.id] = geometry;\n            geometry.disposeRunner.add(this);\n            geometry.glVertexArrayObjects[this.CONTEXT_UID] = vaos = {};\n            incRefCount = true;\n        }\n\n        const vao = vaos[shader.program.id] || this.initGeometryVao(geometry, shader, incRefCount);\n\n        this._activeGeometry = geometry;\n\n        if (this._activeVao !== vao)\n        {\n            this._activeVao = vao;\n\n            if (this.hasVao)\n            {\n                gl.bindVertexArray(vao);\n            }\n            else\n            {\n                this.activateVao(geometry, shader.program);\n            }\n        }\n\n        // TODO - optimise later!\n        // don't need to loop through if nothing changed!\n        // maybe look to add an 'autoupdate' to geometry?\n        this.updateBuffers();\n    }\n\n    /** Reset and unbind any active VAO and geometry. */\n    reset(): void\n    {\n        this.unbind();\n    }\n\n    /** Update buffers of the currently bound geometry. */\n    updateBuffers(): void\n    {\n        const geometry = this._activeGeometry;\n\n        const bufferSystem = this.renderer.buffer;\n\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            const buffer = geometry.buffers[i];\n\n            bufferSystem.update(buffer);\n        }\n    }\n\n    /**\n     * Check compatibility between a geometry and a program\n     * @param geometry - Geometry instance.\n     * @param program - Program instance.\n     */\n    protected checkCompatibility(geometry: Geometry, program: Program): void\n    {\n        // geometry must have at least all the attributes that the shader requires.\n        const geometryAttributes = geometry.attributes;\n        const shaderAttributes = program.attributeData;\n\n        for (const j in shaderAttributes)\n        {\n            if (!geometryAttributes[j])\n            {\n                throw new Error(`shader and geometry incompatible, geometry missing the \"${j}\" attribute`);\n            }\n        }\n    }\n\n    /**\n     * Takes a geometry and program and generates a unique signature for them.\n     * @param geometry - To get signature from.\n     * @param program - To test geometry against.\n     * @returns - Unique signature of the geometry and program\n     */\n    protected getSignature(geometry: Geometry, program: Program): string\n    {\n        const attribs = geometry.attributes;\n        const shaderAttributes = program.attributeData;\n\n        const strings = ['g', geometry.id];\n\n        for (const i in attribs)\n        {\n            if (shaderAttributes[i])\n            {\n                strings.push(i, shaderAttributes[i].location);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /**\n     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n     * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n     * attribute locations.\n     * @param geometry - Instance of geometry to to generate Vao for.\n     * @param shader - Instance of the shader.\n     * @param incRefCount - Increment refCount of all geometry buffers.\n     */\n    protected initGeometryVao(geometry: Geometry, shader: Shader, incRefCount = true): WebGLVertexArrayObject\n    {\n        const gl = this.gl;\n        const CONTEXT_UID = this.CONTEXT_UID;\n        const bufferSystem = this.renderer.buffer;\n        const program = shader.program;\n\n        if (!program.glPrograms[CONTEXT_UID])\n        {\n            this.renderer.shader.generateProgram(shader);\n        }\n\n        this.checkCompatibility(geometry, program);\n\n        const signature = this.getSignature(geometry, program);\n\n        const vaoObjectHash = geometry.glVertexArrayObjects[this.CONTEXT_UID];\n\n        let vao = vaoObjectHash[signature];\n\n        if (vao)\n        {\n            // this will give us easy access to the vao\n            vaoObjectHash[program.id] = vao;\n\n            return vao;\n        }\n\n        const buffers = geometry.buffers;\n        const attributes = geometry.attributes;\n        const tempStride: Dict<number> = {};\n        const tempStart: Dict<number> = {};\n\n        for (const j in buffers)\n        {\n            tempStride[j] = 0;\n            tempStart[j] = 0;\n        }\n\n        for (const j in attributes)\n        {\n            if (!attributes[j].size && program.attributeData[j])\n            {\n                attributes[j].size = program.attributeData[j].size;\n            }\n            else if (!attributes[j].size)\n            {\n                console.warn(`PIXI Geometry attribute '${j}' size cannot be determined (likely the bound shader does not have the attribute)`);  // eslint-disable-line\n            }\n\n            tempStride[attributes[j].buffer] += attributes[j].size * byteSizeMap[attributes[j].type];\n        }\n\n        for (const j in attributes)\n        {\n            const attribute = attributes[j];\n            const attribSize = attribute.size;\n\n            if (attribute.stride === undefined)\n            {\n                if (tempStride[attribute.buffer] === attribSize * byteSizeMap[attribute.type])\n                {\n                    attribute.stride = 0;\n                }\n                else\n                {\n                    attribute.stride = tempStride[attribute.buffer];\n                }\n            }\n\n            if (attribute.start === undefined)\n            {\n                attribute.start = tempStart[attribute.buffer];\n\n                tempStart[attribute.buffer] += attribSize * byteSizeMap[attribute.type];\n            }\n        }\n\n        vao = gl.createVertexArray();\n\n        gl.bindVertexArray(vao);\n\n        // first update - and create the buffers!\n        // only create a gl buffer if it actually gets\n        for (let i = 0; i < buffers.length; i++)\n        {\n            const buffer = buffers[i];\n\n            bufferSystem.bind(buffer);\n\n            if (incRefCount)\n            {\n                buffer._glBuffers[CONTEXT_UID].refCount++;\n            }\n        }\n\n        // TODO - maybe make this a data object?\n        // lets wait to see if we need to first!\n\n        this.activateVao(geometry, program);\n\n        this._activeVao = vao;\n\n        // add it to the cache!\n        vaoObjectHash[program.id] = vao;\n        vaoObjectHash[signature] = vao;\n\n        return vao;\n    }\n\n    /**\n     * Disposes geometry.\n     * @param geometry - Geometry with buffers. Only VAO will be disposed\n     * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    disposeGeometry(geometry: Geometry, contextLost?: boolean): void\n    {\n        if (!this.managedGeometries[geometry.id])\n        {\n            return;\n        }\n\n        delete this.managedGeometries[geometry.id];\n\n        const vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];\n        const gl = this.gl;\n        const buffers = geometry.buffers;\n        const bufferSystem = this.renderer?.buffer;\n\n        geometry.disposeRunner.remove(this);\n\n        if (!vaos)\n        {\n            return;\n        }\n\n        // bufferSystem may have already been destroyed..\n        // if this is the case, there is no need to destroy the geometry buffers...\n        // they already have been!\n        if (bufferSystem)\n        {\n            for (let i = 0; i < buffers.length; i++)\n            {\n                const buf = buffers[i]._glBuffers[this.CONTEXT_UID];\n\n                // my be null as context may have changed right before the dispose is called\n                if (buf)\n                {\n                    buf.refCount--;\n                    if (buf.refCount === 0 && !contextLost)\n                    {\n                        bufferSystem.dispose(buffers[i], contextLost);\n                    }\n                }\n            }\n        }\n\n        if (!contextLost)\n        {\n            for (const vaoId in vaos)\n            {\n                // delete only signatures, everything else are copies\n                if (vaoId[0] === 'g')\n                {\n                    const vao = vaos[vaoId];\n\n                    if (this._activeVao === vao)\n                    {\n                        this.unbind();\n                    }\n                    gl.deleteVertexArray(vao);\n                }\n            }\n        }\n\n        delete geometry.glVertexArrayObjects[this.CONTEXT_UID];\n    }\n\n    /**\n     * Dispose all WebGL resources of all managed geometries.\n     * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */\n    disposeAll(contextLost?: boolean): void\n    {\n        const all: Array<any> = Object.keys(this.managedGeometries);\n\n        for (let i = 0; i < all.length; i++)\n        {\n            this.disposeGeometry(this.managedGeometries[all[i]], contextLost);\n        }\n    }\n\n    /**\n     * Activate vertex array object.\n     * @param geometry - Geometry instance.\n     * @param program - Shader program instance.\n     */\n    protected activateVao(geometry: Geometry, program: Program): void\n    {\n        const gl = this.gl;\n        const CONTEXT_UID = this.CONTEXT_UID;\n        const bufferSystem = this.renderer.buffer;\n        const buffers = geometry.buffers;\n        const attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            // first update the index buffer if we have one..\n            bufferSystem.bind(geometry.indexBuffer);\n        }\n\n        let lastBuffer = null;\n\n        // add a new one!\n        for (const j in attributes)\n        {\n            const attribute = attributes[j];\n            const buffer = buffers[attribute.buffer];\n            const glBuffer = buffer._glBuffers[CONTEXT_UID];\n\n            if (program.attributeData[j])\n            {\n                if (lastBuffer !== glBuffer)\n                {\n                    bufferSystem.bind(buffer);\n\n                    lastBuffer = glBuffer;\n                }\n\n                const location = program.attributeData[j].location;\n\n                // TODO introduce state again\n                // we can optimise this for older devices that have no VAOs\n                gl.enableVertexAttribArray(location);\n\n                gl.vertexAttribPointer(location,\n                    attribute.size,\n                    attribute.type || gl.FLOAT,\n                    attribute.normalized,\n                    attribute.stride,\n                    attribute.start);\n\n                if (attribute.instance)\n                {\n                    // TODO calculate instance count based of this...\n                    if (this.hasInstance)\n                    {\n                        gl.vertexAttribDivisor(location, 1);\n                    }\n                    else\n                    {\n                        throw new Error('geometry error, GPU Instancing is not supported on this device');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Draws the currently bound geometry.\n     * @param type - The type primitive to render.\n     * @param size - The number of elements to be rendered. If not specified, all vertices after the\n     *  starting vertex will be drawn.\n     * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n     *  drawing will start from the first vertex.\n     * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n     *  all instances will be drawn.\n     */\n    draw(type: DRAW_MODES, size?: number, start?: number, instanceCount?: number): this\n    {\n        const { gl } = this;\n        const geometry = this._activeGeometry;\n\n        // TODO.. this should not change so maybe cache the function?\n\n        if (geometry.indexBuffer)\n        {\n            const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n            const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n            if (byteSize === 2 || (byteSize === 4 && this.canUseUInt32ElementIndex))\n            {\n                if (geometry.instanced)\n                {\n                    /* eslint-disable max-len */\n                    gl.drawElementsInstanced(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount || 1);\n                    /* eslint-enable max-len */\n                }\n                else\n                {\n                    /* eslint-disable max-len */\n                    gl.drawElements(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);\n                    /* eslint-enable max-len */\n                }\n            }\n            else\n            {\n                console.warn('unsupported index buffer type: uint32');\n            }\n        }\n        else if (geometry.instanced)\n        {\n            // TODO need a better way to calculate size..\n            gl.drawArraysInstanced(type, start, size || geometry.getSize(), instanceCount || 1);\n        }\n        else\n        {\n            gl.drawArrays(type, start, size || geometry.getSize());\n        }\n\n        return this;\n    }\n\n    /** Unbind/reset everything. */\n    protected unbind(): void\n    {\n        this.gl.bindVertexArray(null);\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n","import { MASK_TYPES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport type { ISpriteMaskFilter } from '@pixi/core';\n\nimport type { COLOR_MASK_BITS, MSAA_QUALITY } from '@pixi/constants';\nimport type { Rectangle, Matrix } from '@pixi/math';\nimport type { IFilterTarget } from '../filters/IFilterTarget';\nimport type { Renderer } from '../Renderer';\n\nexport interface IMaskTarget extends IFilterTarget\n{\n    renderable: boolean;\n    isSprite?: boolean;\n    worldTransform: Matrix;\n    isFastRect?(): boolean;\n    getBounds(skipUpdate?: boolean, rect?: Rectangle): Rectangle;\n    render(renderer: Renderer): void;\n}\n/**\n * Component for masked elements.\n *\n * Holds mask mode and temporary data about current mask.\n * @memberof PIXI\n */\nexport class MaskData\n{\n    /** Mask type */\n    public type: MASK_TYPES;\n\n    /**\n     * Whether we know the mask type beforehand\n     * @default true\n     */\n    public autoDetect: boolean;\n\n    /**\n     * Which element we use to mask\n     * @member {PIXI.DisplayObject}\n     */\n    public maskObject: IMaskTarget;\n\n    /** Whether it belongs to MaskSystem pool */\n    public pooled: boolean;\n\n    /** Indicator of the type (always true for {@link MaskData} objects) */\n    public isMaskData: boolean;// webdoc crashes if the type is true because reasons... (will fix)\n\n    /**\n     * Resolution of the sprite mask filter.\n     * If set to `null` or `0`, the resolution of the current render target is used.\n     * @default null\n     */\n    public resolution: number;\n\n    /**\n     * Number of samples of the sprite mask filter.\n     * If set to `null`, the sample count of the current render target is used.\n     * @default PIXI.settings.FILTER_MULTISAMPLE\n     */\n    public multisample: MSAA_QUALITY;\n\n    /** If enabled is true the mask is applied, if false it will not. */\n    public enabled: boolean;\n\n    /** Color mask. */\n    public colorMask: COLOR_MASK_BITS;\n\n    /**\n     * The sprite mask filter wrapped in an array.\n     * @private\n     */\n    _filters: ISpriteMaskFilter[];\n\n    /**\n     * Stencil counter above the mask in stack\n     * @private\n     */\n    _stencilCounter: number;\n\n    /**\n     * Scissor counter above the mask in stack\n     * @private\n     */\n    _scissorCounter: number;\n\n    /**\n     * Scissor operation above the mask in stack.\n     * Null if _scissorCounter is zero, rectangle instance if positive.\n     * @private\n     */\n    _scissorRect: Rectangle;\n\n    /**\n     * pre-computed scissor rect\n     * does become _scissorRect when mask is actually pushed\n     * @private\n     */\n    _scissorRectLocal: Rectangle;\n\n    /**\n     * pre-computed color mask\n     * @private\n     */\n    _colorMask: number;\n\n    /**\n     * Targeted element. Temporary variable set by MaskSystem\n     * @member {PIXI.DisplayObject}\n     * @private\n     */\n    _target: IMaskTarget;\n\n    /**\n     * Create MaskData\n     * @param {PIXI.DisplayObject} [maskObject=null] - object that describes the mask\n     */\n    constructor(maskObject: IMaskTarget = null)\n    {\n        this.type = MASK_TYPES.NONE;\n        this.autoDetect = true;\n        this.maskObject = maskObject || null;\n        this.pooled = false;\n        this.isMaskData = true;\n        this.resolution = null;\n        this.multisample = settings.FILTER_MULTISAMPLE;\n        this.enabled = true;\n        this.colorMask = 0xf;\n        this._filters = null;\n        this._stencilCounter = 0;\n        this._scissorCounter = 0;\n        this._scissorRect = null;\n        this._scissorRectLocal = null;\n        this._colorMask = 0xf;\n        this._target = null;\n    }\n\n    /**\n     * The sprite mask filter.\n     * If set to `null`, the default sprite mask filter is used.\n     * @default null\n     */\n    get filter(): ISpriteMaskFilter\n    {\n        return this._filters ? this._filters[0] : null;\n    }\n\n    set filter(value: ISpriteMaskFilter)\n    {\n        if (value)\n        {\n            if (this._filters)\n            {\n                this._filters[0] = value;\n            }\n            else\n            {\n                this._filters = [value];\n            }\n        }\n        else\n        {\n            this._filters = null;\n        }\n    }\n\n    /** Resets the mask data after popMask(). */\n    reset(): void\n    {\n        if (this.pooled)\n        {\n            this.maskObject = null;\n\n            this.type = MASK_TYPES.NONE;\n\n            this.autoDetect = true;\n        }\n\n        this._target = null;\n        this._scissorRectLocal = null;\n    }\n\n    /**\n     * Copies counters from maskData above, called from pushMask().\n     * @param maskAbove\n     */\n    copyCountersOrReset(maskAbove?: MaskData): void\n    {\n        if (maskAbove)\n        {\n            this._stencilCounter = maskAbove._stencilCounter;\n            this._scissorCounter = maskAbove._scissorCounter;\n            this._scissorRect = maskAbove._scissorRect;\n        }\n        else\n        {\n            this._stencilCounter = 0;\n            this._scissorCounter = 0;\n            this._scissorRect = null;\n        }\n    }\n}\n","/**\n * @private\n * @param {WebGLRenderingContext} gl - The current WebGL context {WebGLProgram}\n * @param {number} type - the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param {string} src - The vertex shader source as an array of strings.\n * @returns {WebGLShader} the shader\n */\nexport function compileShader(gl: WebGLRenderingContextBase, type: number, src: string): WebGLShader\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    return shader;\n}\n","/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */\nfunction logPrettyShaderError(gl: WebGLRenderingContext, shader: WebGLShader): void\n{\n    const shaderSrc = gl.getShaderSource(shader)\n        .split('\\n')\n        .map((line, index) => `${index}: ${line}`);\n\n    const shaderLog = gl.getShaderInfoLog(shader);\n    const splitShader = shaderLog.split('\\n');\n\n    const dedupe: Record<number, boolean> = {};\n\n    const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, '$1')))\n        .filter((n) =>\n        {\n            if (n && !dedupe[n])\n            {\n                dedupe[n] = true;\n\n                return true;\n            }\n\n            return false;\n        });\n\n    const logArgs = [''];\n\n    lineNumbers.forEach((number) =>\n    {\n        shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');\n    });\n\n    const fragmentSourceToLog = shaderSrc\n        .join('\\n');\n\n    logArgs[0] = fragmentSourceToLog;\n\n    console.error(shaderLog);\n\n    // eslint-disable-next-line no-console\n    console.groupCollapsed('click to view full shader code');\n    console.warn(...logArgs);\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n}\n\n/**\n *\n * logs out any program errors\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n */\nexport function logProgramError(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n): void\n{\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, vertexShader);\n        }\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, fragmentShader);\n        }\n\n        console.error('PixiJS Error: Could not initialize shader.');\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n    }\n}\n","function booleanArray(size: number): Array<boolean>\n{\n    const array = new Array(size);\n\n    for (let i = 0; i < array.length; i++)\n    {\n        array[i] = false;\n    }\n\n    return array;\n}\n\n/**\n * @method defaultValue\n * @memberof PIXI.glCore.shader\n * @param {string} type - Type of value\n * @param {number} size\n * @private\n */\nexport function defaultValue(\n    type: string,\n    size: number\n): number | Float32Array | Int32Array | Uint32Array | boolean | boolean[]\n{\n    switch (type)\n    {\n        case 'float':\n            return 0;\n\n        case 'vec2':\n            return new Float32Array(2 * size);\n\n        case 'vec3':\n            return new Float32Array(3 * size);\n\n        case 'vec4':\n            return new Float32Array(4 * size);\n\n        case 'int':\n        case 'uint':\n        case 'sampler2D':\n        case 'sampler2DArray':\n            return 0;\n\n        case 'ivec2':\n            return new Int32Array(2 * size);\n\n        case 'ivec3':\n            return new Int32Array(3 * size);\n\n        case 'ivec4':\n            return new Int32Array(4 * size);\n\n        case 'uvec2':\n            return new Uint32Array(2 * size);\n\n        case 'uvec3':\n            return new Uint32Array(3 * size);\n\n        case 'uvec4':\n            return new Uint32Array(4 * size);\n\n        case 'bool':\n            return false;\n\n        case 'bvec2':\n\n            return booleanArray(2 * size);\n\n        case 'bvec3':\n            return booleanArray(3 * size);\n\n        case 'bvec4':\n            return booleanArray(4 * size);\n\n        case 'mat2':\n            return new Float32Array([1, 0,\n                0, 1]);\n\n        case 'mat3':\n            return new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1]);\n\n        case 'mat4':\n            return new Float32Array([1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1]);\n    }\n\n    return null;\n}\n","import { settings } from '../../settings';\nimport { ENV } from '@pixi/constants';\n\nconst unknownContext = {};\nlet context: WebGLRenderingContext | WebGL2RenderingContext = unknownContext as any;\n\n/**\n * returns a little WebGL context to use for program inspection.\n * @static\n * @private\n * @returns {WebGLRenderingContext} a gl context to test with\n */\nexport function getTestContext(): WebGLRenderingContext | WebGL2RenderingContext\n{\n    if (context === unknownContext || (context && context.isContextLost()))\n    {\n        const canvas = settings.ADAPTER.createCanvas();\n\n        let gl: WebGLRenderingContext | WebGL2RenderingContext;\n\n        if (settings.PREFER_ENV >= ENV.WEBGL2)\n        {\n            gl = canvas.getContext('webgl2', {});\n        }\n\n        if (!gl)\n        {\n            gl = (canvas.getContext('webgl', {})\n                || (canvas.getContext('experimental-webgl', {}) as WebGLRenderingContext));\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                gl = null;\n            }\n            else\n            {\n                // for shader testing..\n                gl.getExtension('WEBGL_draw_buffers');\n            }\n        }\n\n        context = gl;\n    }\n\n    return context;\n}\n","import { getTestContext } from './getTestContext';\nimport { PRECISION } from '@pixi/constants';\n\nlet maxFragmentPrecision: PRECISION;\n\nexport function getMaxFragmentPrecision(): PRECISION\n{\n    if (!maxFragmentPrecision)\n    {\n        maxFragmentPrecision = PRECISION.MEDIUM;\n        const gl = getTestContext();\n\n        if (gl)\n        {\n            if (gl.getShaderPrecisionFormat)\n            {\n                const shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n\n                maxFragmentPrecision = shaderFragment.precision ? PRECISION.HIGH : PRECISION.MEDIUM;\n            }\n        }\n    }\n\n    return maxFragmentPrecision;\n}\n","import { PRECISION } from '@pixi/constants';\n\n/**\n * Sets the float precision on the shader, ensuring the device supports the request precision.\n * If the precision is already present, it just ensures that the device is able to handle it.\n * @private\n * @param {string} src - The shader source\n * @param {PIXI.PRECISION} requestedPrecision - The request float precision of the shader.\n * @param {PIXI.PRECISION} maxSupportedPrecision - The maximum precision the shader supports.\n * @returns {string} modified shader source\n */\nexport function setPrecision(src: string, requestedPrecision: PRECISION, maxSupportedPrecision: PRECISION): string\n{\n    if (src.substring(0, 9) !== 'precision')\n    {\n        // no precision supplied, so PixiJS will add the requested level.\n        let precision = requestedPrecision;\n\n        // If highp is requested but not supported, downgrade precision to a level all devices support.\n        if (requestedPrecision === PRECISION.HIGH && maxSupportedPrecision !== PRECISION.HIGH)\n        {\n            precision = PRECISION.MEDIUM;\n        }\n\n        return `precision ${precision} float;\\n${src}`;\n    }\n    else if (maxSupportedPrecision !== PRECISION.HIGH && src.substring(0, 15) === 'precision highp')\n    {\n        // precision was supplied, but at a level this device does not support, so downgrading to mediump.\n        return src.replace('precision highp', 'precision mediump');\n    }\n\n    return src;\n}\n","import type { Dict } from '@pixi/utils';\n\nconst GLSL_TO_SIZE: Dict<number> = {\n    float:    1,\n    vec2:     2,\n    vec3:     3,\n    vec4:     4,\n\n    int:      1,\n    ivec2:    2,\n    ivec3:    3,\n    ivec4:    4,\n\n    uint:     1,\n    uvec2:    2,\n    uvec3:    3,\n    uvec4:    4,\n\n    bool:     1,\n    bvec2:    2,\n    bvec3:    3,\n    bvec4:    4,\n\n    mat2:     4,\n    mat3:     9,\n    mat4:     16,\n\n    sampler2D:  1,\n};\n\n/**\n * @private\n * @method mapSize\n * @memberof PIXI.glCore.shader\n * @param {string} type\n */\nexport function mapSize(type: string): number\n{\n    return GLSL_TO_SIZE[type];\n}\n","import type { Dict } from '@pixi/utils';\n\nlet GL_TABLE: Dict<string> = null;\n\nconst GL_TO_GLSL_TYPES: Dict<string> = {\n    FLOAT:       'float',\n    FLOAT_VEC2:  'vec2',\n    FLOAT_VEC3:  'vec3',\n    FLOAT_VEC4:  'vec4',\n\n    INT:         'int',\n    INT_VEC2:    'ivec2',\n    INT_VEC3:    'ivec3',\n    INT_VEC4:    'ivec4',\n\n    UNSIGNED_INT:         'uint',\n    UNSIGNED_INT_VEC2:    'uvec2',\n    UNSIGNED_INT_VEC3:    'uvec3',\n    UNSIGNED_INT_VEC4:    'uvec4',\n\n    BOOL:        'bool',\n    BOOL_VEC2:   'bvec2',\n    BOOL_VEC3:   'bvec3',\n    BOOL_VEC4:   'bvec4',\n\n    FLOAT_MAT2:  'mat2',\n    FLOAT_MAT3:  'mat3',\n    FLOAT_MAT4:  'mat4',\n\n    SAMPLER_2D:              'sampler2D',\n    INT_SAMPLER_2D:          'sampler2D',\n    UNSIGNED_INT_SAMPLER_2D: 'sampler2D',\n    SAMPLER_CUBE:              'samplerCube',\n    INT_SAMPLER_CUBE:          'samplerCube',\n    UNSIGNED_INT_SAMPLER_CUBE: 'samplerCube',\n    SAMPLER_2D_ARRAY:              'sampler2DArray',\n    INT_SAMPLER_2D_ARRAY:          'sampler2DArray',\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 'sampler2DArray',\n};\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function mapType(gl: any, type: number): string\n{\n    if (!GL_TABLE)\n    {\n        const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n\n        GL_TABLE = {};\n\n        for (let i = 0; i < typeNames.length; ++i)\n        {\n            const tn = typeNames[i];\n\n            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n        }\n    }\n\n    return GL_TABLE[type];\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// Parsers, each one of these will take a look at the type of shader property and uniform.\n// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.\n// Shader upload code is automagically generated with these parsers.\n// If no parser is valid then the default upload functions are used.\n// exposing Parsers means that custom upload logic can be added to pixi's shaders.\n// A good example would be a pixi rectangle can be directly set on a uniform.\n// If the shader sees it it knows how to upload the rectangle structure as a vec4\n// format is as follows:\n//\n// {\n//     test: (data, uniform) => {} <--- test is this code should be used for this uniform\n//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform\n//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the\n//                                         uniform to a uniform buffer\n// }\n\nexport interface IUniformParser\n{\n    test(data: unknown, uniform: any): boolean;\n    code(name: string, uniform: any): string;\n    codeUbo?(name: string, uniform: any): string;\n}\n\nexport const uniformParsers: IUniformParser[] = [\n\n    // a float cache layer\n    {\n        test: (data: any): boolean =>\n            data.type === 'float' && data.size === 1 && !data.isArray,\n        code: (name: string): string =>\n            `\n            if(uv[\"${name}\"] !== ud[\"${name}\"].value)\n            {\n                ud[\"${name}\"].value = uv[\"${name}\"]\n                gl.uniform1f(ud[\"${name}\"].location, uv[\"${name}\"])\n            }\n            `,\n    },\n    // handling samplers\n    {\n        test: (data: any, uniform: any): boolean =>\n            // eslint-disable-next-line max-len,no-eq-null,eqeqeq\n            (data.type === 'sampler2D' || data.type === 'samplerCube' || data.type === 'sampler2DArray') && data.size === 1 && !data.isArray && (uniform == null || uniform.castToBaseTexture !== undefined),\n        code: (name: string): string => `t = syncData.textureCount++;\n\n            renderer.texture.bind(uv[\"${name}\"], t);\n\n            if(ud[\"${name}\"].value !== t)\n            {\n                ud[\"${name}\"].value = t;\n                gl.uniform1i(ud[\"${name}\"].location, t);\\n; // eslint-disable-line max-len\n            }`,\n    },\n    // uploading pixi matrix object to mat3\n    {\n        test: (data: any, uniform: any): boolean =>\n            data.type === 'mat3' && data.size === 1 && !data.isArray && uniform.a !== undefined,\n        code: (name: string): string =>\n\n            // TODO and some smart caching dirty ids here!\n            `\n            gl.uniformMatrix3fv(ud[\"${name}\"].location, false, uv[\"${name}\"].toArray(true));\n            `,\n        codeUbo: (name: string): string =>\n            `\n                var ${name}_matrix = uv.${name}.toArray(true);\n\n                data[offset] = ${name}_matrix[0];\n                data[offset+1] = ${name}_matrix[1];\n                data[offset+2] = ${name}_matrix[2];\n        \n                data[offset + 4] = ${name}_matrix[3];\n                data[offset + 5] = ${name}_matrix[4];\n                data[offset + 6] = ${name}_matrix[5];\n        \n                data[offset + 8] = ${name}_matrix[6];\n                data[offset + 9] = ${name}_matrix[7];\n                data[offset + 10] = ${name}_matrix[8];\n            `\n        ,\n\n    },\n    // uploading a pixi point as a vec2 with caching layer\n    {\n        test: (data: any, uniform: any): boolean =>\n            data.type === 'vec2' && data.size === 1 && !data.isArray && uniform.x !== undefined,\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    gl.uniform2f(ud[\"${name}\"].location, v.x, v.y);\n                }`,\n        codeUbo: (name: string): string =>\n            `\n                v = uv.${name};\n\n                data[offset] = v.x;\n                data[offset+1] = v.y;\n            `\n    },\n    // caching layer for a vec2\n    {\n        test: (data: any): boolean =>\n            data.type === 'vec2' && data.size === 1 && !data.isArray,\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    gl.uniform2f(ud[\"${name}\"].location, v[0], v[1]);\n                }\n            `,\n    },\n    // upload a pixi rectangle as a vec4 with caching layer\n    {\n        test: (data: any, uniform: any): boolean =>\n            data.type === 'vec4' && data.size === 1 && !data.isArray && uniform.width !== undefined,\n\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    cv[2] = v.width;\n                    cv[3] = v.height;\n                    gl.uniform4f(ud[\"${name}\"].location, v.x, v.y, v.width, v.height)\n                }`,\n        codeUbo: (name: string): string =>\n            `\n                    v = uv.${name};\n\n                    data[offset] = v.x;\n                    data[offset+1] = v.y;\n                    data[offset+2] = v.width;\n                    data[offset+3] = v.height;\n                `\n    },\n    // a caching layer for vec4 uploading\n    {\n        test: (data: any): boolean =>\n            data.type === 'vec4' && data.size === 1 && !data.isArray,\n        code: (name: string): string =>\n            `\n                cv = ud[\"${name}\"].value;\n                v = uv[\"${name}\"];\n\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    cv[2] = v[2];\n                    cv[3] = v[3];\n\n                    gl.uniform4f(ud[\"${name}\"].location, v[0], v[1], v[2], v[3])\n                }`,\n    },\n];\n\n","import { uniformParsers } from './uniformParsers';\n\nimport type { UniformGroup } from '../UniformGroup';\nimport type { Dict } from '@pixi/utils';\n\nexport type UniformsSyncCallback = (...args: any[]) => void;\n\n// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n// l = location\nconst GLSL_TO_SINGLE_SETTERS_CACHED: Dict<string> = {\n\n    float: `\n    if (cv !== v)\n    {\n        cu.value = v;\n        gl.uniform1f(location, v);\n    }`,\n\n    vec2: `\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2f(location, v[0], v[1])\n    }`,\n\n    vec3: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3f(location, v[0], v[1], v[2])\n    }`,\n\n    vec4: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n    }`,\n\n    int: `\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }`,\n    ivec2: `\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2i(location, v[0], v[1]);\n    }`,\n    ivec3: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3i(location, v[0], v[1], v[2]);\n    }`,\n    ivec4: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n    }`,\n\n    uint: `\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1ui(location, v);\n    }`,\n    uvec2: `\n    if (cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2ui(location, v[0], v[1]);\n    }`,\n    uvec3: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3ui(location, v[0], v[1], v[2]);\n    }`,\n    uvec4: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n    }`,\n\n    bool: `\n    if (cv !== v)\n    {\n        cu.value = v;\n        gl.uniform1i(location, v);\n    }`,\n    bvec2: `\n    if (cv[0] != v[0] || cv[1] != v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n\n        gl.uniform2i(location, v[0], v[1]);\n    }`,\n    bvec3: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3i(location, v[0], v[1], v[2]);\n    }`,\n    bvec4: `\n    if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n        cv[3] = v[3];\n\n        gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n    }`,\n\n    mat2:     'gl.uniformMatrix2fv(location, false, v)',\n    mat3:     'gl.uniformMatrix3fv(location, false, v)',\n    mat4:     'gl.uniformMatrix4fv(location, false, v)',\n\n    sampler2D: `\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }`,\n    samplerCube: `\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }`,\n    sampler2DArray: `\n    if (cv !== v)\n    {\n        cu.value = v;\n\n        gl.uniform1i(location, v);\n    }`,\n};\n\nconst GLSL_TO_ARRAY_SETTERS: Dict<string> = {\n\n    float:    `gl.uniform1fv(location, v)`,\n\n    vec2:     `gl.uniform2fv(location, v)`,\n    vec3:     `gl.uniform3fv(location, v)`,\n    vec4:     'gl.uniform4fv(location, v)',\n\n    mat4:     'gl.uniformMatrix4fv(location, false, v)',\n    mat3:     'gl.uniformMatrix3fv(location, false, v)',\n    mat2:     'gl.uniformMatrix2fv(location, false, v)',\n\n    int:      'gl.uniform1iv(location, v)',\n    ivec2:    'gl.uniform2iv(location, v)',\n    ivec3:    'gl.uniform3iv(location, v)',\n    ivec4:    'gl.uniform4iv(location, v)',\n\n    uint:     'gl.uniform1uiv(location, v)',\n    uvec2:    'gl.uniform2uiv(location, v)',\n    uvec3:    'gl.uniform3uiv(location, v)',\n    uvec4:    'gl.uniform4uiv(location, v)',\n\n    bool:     'gl.uniform1iv(location, v)',\n    bvec2:    'gl.uniform2iv(location, v)',\n    bvec3:    'gl.uniform3iv(location, v)',\n    bvec4:    'gl.uniform4iv(location, v)',\n\n    sampler2D:      'gl.uniform1iv(location, v)',\n    samplerCube:    'gl.uniform1iv(location, v)',\n    sampler2DArray: 'gl.uniform1iv(location, v)',\n};\n\nexport function generateUniformsSync(group: UniformGroup, uniformData: Dict<any>): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n    `];\n\n    for (const i in group.uniforms)\n    {\n        const data = uniformData[i];\n\n        if (!data)\n        {\n            if (group.uniforms[i]?.group)\n            {\n                if (group.uniforms[i].ubo)\n                {\n                    funcFragments.push(`\n                        renderer.shader.syncUniformBufferGroup(uv.${i}, '${i}');\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        renderer.shader.syncUniformGroup(uv.${i}, syncData);\n                    `);\n                }\n            }\n\n            continue;\n        }\n\n        const uniform = group.uniforms[i];\n\n        let parsed = false;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            if (uniformParsers[j].test(data, uniform))\n            {\n                funcFragments.push(uniformParsers[j].code(i, uniform));\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            const templateType = data.size === 1 && !data.isArray ? GLSL_TO_SINGLE_SETTERS_CACHED : GLSL_TO_ARRAY_SETTERS;\n            const template = templateType[data.type].replace('location', `ud[\"${i}\"].location`);\n\n            funcFragments.push(`\n            cu = ud[\"${i}\"];\n            cv = cu.value;\n            v = uv[\"${i}\"];\n            ${template};`);\n        }\n    }\n\n    /*\n     * the introduction of syncData is to solve an issue where textures in uniform groups are not set correctly\n     * the texture count was always starting from 0 in each group. This needs to increment each time a texture is used\n     * no matter which group is being used\n     *\n     */\n    // eslint-disable-next-line no-new-func\n    return new Function('ud', 'uv', 'renderer', 'syncData', funcFragments.join('\\n')) as UniformsSyncCallback;\n}\n","import type { IRenderingContext } from '../../IRenderingContext';\n\nconst fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}',\n].join('\\n');\n\nfunction generateIfTestSrc(maxIfs: number): string\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n\nexport function checkMaxIfStatementsInShader(maxIfs: number, gl: IRenderingContext): number\n{\n    if (maxIfs === 0)\n    {\n        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');\n    }\n\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    while (true) // eslint-disable-line no-constant-condition\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    return maxIfs;\n}\n","// Cache the result to prevent running this over and over\nlet unsafeEval: boolean;\n\n/**\n * Not all platforms allow to generate function code (e.g., `new Function`).\n * this provides the platform-level detection.\n * @private\n * @returns {boolean} `true` if `new Function` is supported.\n */\nexport function unsafeEvalSupported(): boolean\n{\n    if (typeof unsafeEval === 'boolean')\n    {\n        return unsafeEval;\n    }\n\n    try\n    {\n        /* eslint-disable no-new-func */\n        const func = new Function('param1', 'param2', 'param3', 'return param1[param2] === param3;');\n        /* eslint-enable no-new-func */\n\n        unsafeEval = func({ a: 'b' }, 'a', 'b') === true;\n    }\n    catch (e)\n    {\n        unsafeEval = false;\n    }\n\n    return unsafeEval;\n}\n","import { setPrecision,\n    getMaxFragmentPrecision } from './utils';\nimport { ProgramCache } from '@pixi/utils';\nimport defaultFragment from './defaultProgram.frag';\nimport defaultVertex from './defaultProgram.vert';\nimport { settings } from '@pixi/settings';\nimport { PRECISION } from '@pixi/constants';\n\nimport type { GLProgram } from './GLProgram';\n\nlet UID = 0;\n\nconst nameCache: { [key: string]: number } = {};\n\nexport interface IAttributeData\n{\n    type: string;\n    size: number;\n    location: number;\n    name: string;\n}\n\nexport interface IUniformData\n{\n    index: number;\n    type: string;\n    size: number;\n    isArray: boolean;\n    value: any;\n    name: string;\n}\n\n/**\n * Helper class to create a shader program.\n * @memberof PIXI\n */\nexport class Program\n{\n    public id: number;\n\n    /** Source code for the vertex shader. */\n    public vertexSrc: string;\n\n    /** Source code for the fragment shader. */\n    public fragmentSrc: string;\n\n    nameCache: any;\n    glPrograms: { [ key: number ]: GLProgram};\n    syncUniforms: any;\n\n    /** Assigned when a program is first bound to the shader system. */\n    attributeData: { [key: string]: IAttributeData};\n\n    /** Assigned when a program is first bound to the shader system. */\n    uniformData: {[key: string]: IUniformData};\n\n    /**\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param name - Name for shader\n     */\n    constructor(vertexSrc?: string, fragmentSrc?: string, name = 'pixi-shader')\n    {\n        this.id = UID++;\n        this.vertexSrc = vertexSrc || Program.defaultVertexSrc;\n        this.fragmentSrc = fragmentSrc || Program.defaultFragmentSrc;\n\n        this.vertexSrc = this.vertexSrc.trim();\n        this.fragmentSrc = this.fragmentSrc.trim();\n\n        if (this.vertexSrc.substring(0, 8) !== '#version')\n        {\n            name = name.replace(/\\s+/g, '-');\n\n            if (nameCache[name])\n            {\n                nameCache[name]++;\n                name += `-${nameCache[name]}`;\n            }\n            else\n            {\n                nameCache[name] = 1;\n            }\n\n            this.vertexSrc = `#define SHADER_NAME ${name}\\n${this.vertexSrc}`;\n            this.fragmentSrc = `#define SHADER_NAME ${name}\\n${this.fragmentSrc}`;\n\n            this.vertexSrc = setPrecision(this.vertexSrc, settings.PRECISION_VERTEX, PRECISION.HIGH);\n            this.fragmentSrc = setPrecision(this.fragmentSrc, settings.PRECISION_FRAGMENT, getMaxFragmentPrecision());\n        }\n\n        // currently this does not extract structs only default types\n        // this is where we store shader references..\n        this.glPrograms = {};\n\n        this.syncUniforms = null;\n    }\n\n    /**\n     * The default vertex shader source.\n     * @constant\n     */\n    static get defaultVertexSrc(): string\n    {\n        return defaultVertex;\n    }\n\n    /**\n     * The default fragment shader source.\n     * @constant\n     */\n    static get defaultFragmentSrc(): string\n    {\n        return defaultFragment;\n    }\n\n    /**\n     * A short hand function to create a program based of a vertex and fragment shader.\n     *\n     * This method will also check to see if there is a cached program.\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param name - Name for shader\n     * @returns A shiny new PixiJS shader program!\n     */\n    static from(vertexSrc?: string, fragmentSrc?: string, name?: string): Program\n    {\n        const key = vertexSrc + fragmentSrc;\n\n        let program = ProgramCache[key];\n\n        if (!program)\n        {\n            ProgramCache[key] = program = new Program(vertexSrc, fragmentSrc, name);\n        }\n\n        return program;\n    }\n}\n","import { Program } from './Program';\nimport { UniformGroup } from './UniformGroup';\n\nimport type { Dict } from '@pixi/utils';\nimport { Runner } from '@pixi/runner';\n\n/**\n * A helper class for shaders.\n * @memberof PIXI\n */\nexport class Shader\n{\n    /** Program that the shader uses. */\n    public program: Program;\n    public uniformGroup: UniformGroup;\n\n    /**\n     * Used internally to bind uniform buffer objects.\n     * @ignore\n     */\n    uniformBindCount = 0;\n\n    disposeRunner: Runner;\n\n    /**\n     * @param program - The program the shader will use.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     */\n    constructor(program: Program, uniforms?: Dict<any>)\n    {\n        this.program = program;\n\n        // lets see whats been passed in\n        // uniforms should be converted to a uniform group\n        if (uniforms)\n        {\n            if (uniforms instanceof UniformGroup)\n            {\n                this.uniformGroup = uniforms;\n            }\n            else\n            {\n                this.uniformGroup = new UniformGroup(uniforms);\n            }\n        }\n        else\n        {\n            this.uniformGroup = new UniformGroup({});\n        }\n\n        this.disposeRunner = new Runner('disposeShader');\n    }\n\n    // TODO move to shader system..\n    checkUniformExists(name: string, group: UniformGroup): boolean\n    {\n        if (group.uniforms[name])\n        {\n            return true;\n        }\n\n        for (const i in group.uniforms)\n        {\n            const uniform = group.uniforms[i];\n\n            if (uniform.group)\n            {\n                if (this.checkUniformExists(name, uniform))\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    destroy(): void\n    {\n        // usage count on programs?\n        // remove if not used!\n        this.uniformGroup = null;\n\n        this.disposeRunner.emit(this);\n        this.disposeRunner.destroy();\n    }\n\n    /**\n     * Shader uniform values, shortcut for `uniformGroup.uniforms`.\n     * @readonly\n     */\n    get uniforms(): Dict<any>\n    {\n        return this.uniformGroup.uniforms;\n    }\n\n    /**\n     * A short hand function to create a shader based of a vertex and fragment shader.\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     * @returns A shiny new PixiJS shader!\n     */\n    static from(vertexSrc?: string, fragmentSrc?: string, uniforms?: Dict<any>): Shader\n    {\n        const program = Program.from(vertexSrc, fragmentSrc);\n\n        return new Shader(program, uniforms);\n    }\n}\n","import { BLEND_MODES } from '@pixi/constants';\n\n/* eslint-disable max-len */\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * This is a WebGL state, and is is passed to {@link PIXI.StateSystem}.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n * @memberof PIXI\n */\nexport class State\n{\n    data: number;\n    _blendMode: BLEND_MODES;\n    _polygonOffset: number;\n\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = BLEND_MODES.NORMAL;\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        this.depthMask = true;\n        //  this.depthTest = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values.\n     * @default true\n     */\n    get blend(): boolean\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value: boolean)\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     * @default false\n     */\n    get offsets(): boolean\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value: boolean)\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /**\n     * Activates culling of polygons.\n     * @default false\n     */\n    get culling(): boolean\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value: boolean)\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     * @default false\n     */\n    get depthTest(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Enables or disables writing to the depth buffer.\n     * @default true\n     */\n    get depthMask(): boolean\n    {\n        return !!(this.data & (1 << DEPTH_MASK));\n    }\n\n    set depthMask(value: boolean)\n    {\n        if (!!(this.data & (1 << DEPTH_MASK)) !== value)\n        {\n            this.data ^= (1 << DEPTH_MASK);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @default false\n     */\n    get clockwiseFrontFace(): boolean\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value: boolean)\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.blend = (value !== BLEND_MODES.NONE);\n        this._blendMode = value;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     * @default 0\n     */\n    get polygonOffset(): number\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value: number)\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    // #if _DEBUG\n    toString(): string\n    {\n        return `[@pixi/core:State `\n            + `blendMode=${this.blendMode} `\n            + `clockwiseFrontFace=${this.clockwiseFrontFace} `\n            + `culling=${this.culling} `\n            + `depthMask=${this.depthMask} `\n            + `polygonOffset=${this.polygonOffset}`\n            + `]`;\n    }\n    // #endif\n\n    static for2d(): State\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n}\n\n","import { settings } from '@pixi/settings';\nimport { Program } from '../shader/Program';\nimport { Shader } from '../shader/Shader';\nimport { State } from '../state/State';\nimport defaultFragment from './defaultFilter.frag';\nimport defaultVertex from './defaultFilter.vert';\n\nimport type { MSAA_QUALITY, BLEND_MODES, CLEAR_MODES } from '@pixi/constants';\nimport type { Dict } from '@pixi/utils';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\nimport type { FilterState } from './FilterState';\nimport type { FilterSystem } from './FilterSystem';\n\n/**\n * A filter is a special shader that applies post-processing effects to an input texture and writes into an output\n * render-target.\n *\n * {@link http://pixijs.io/examples/#/filters/blur-filter.js Example} of the\n * {@link PIXI.filters.BlurFilter BlurFilter}.\n *\n * ### Usage\n * Filters can be applied to any DisplayObject or Container.\n * PixiJS' `FilterSystem` renders the container into temporary Framebuffer,\n * then filter renders it to the screen.\n * Multiple filters can be added to the `filters` array property and stacked on each other.\n *\n * ```\n * const filter = new PIXI.Filter(myShaderVert, myShaderFrag, { myUniform: 0.5 });\n * const container = new PIXI.Container();\n * container.filters = [filter];\n * ```\n *\n * ### Previous Version Differences\n *\n * In PixiJS **v3**, a filter was always applied to _whole screen_.\n *\n * In PixiJS **v4**, a filter can be applied _only part of the screen_.\n * Developers had to create a set of uniforms to deal with coordinates.\n *\n * In PixiJS **v5** combines _both approaches_.\n * Developers can use normal coordinates of v3 and then allow filter to use partial Framebuffers,\n * bringing those extra uniforms into account.\n *\n * Also be aware that we have changed default vertex shader, please consult\n * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\n *\n * ### Frames\n *\n * The following table summarizes the coordinate spaces used in the filtering pipeline:\n *\n * <table>\n * <thead>\n *   <tr>\n *     <th>Coordinate Space</th>\n *     <th>Description</th>\n *   </tr>\n * </thead>\n * <tbody>\n *   <tr>\n *     <td>Texture Coordinates</td>\n *     <td>\n *         The texture (or UV) coordinates in the input base-texture's space. These are normalized into the (0,1) range along\n *         both axes.\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>World Space</td>\n *     <td>\n *         A point in the same space as the world bounds of any display-object (i.e. in the scene graph's space).\n *     </td>\n *   </tr>\n *   <tr>\n *     <td>Physical Pixels</td>\n *     <td>\n *         This is base-texture's space with the origin on the top-left. You can calculate these by multiplying the texture\n *         coordinates by the dimensions of the texture.\n *     </td>\n *   </tr>\n * </tbody>\n * </table>\n *\n * ### Built-in Uniforms\n *\n * PixiJS viewport uses screen (CSS) coordinates, `(0, 0, renderer.screen.width, renderer.screen.height)`,\n * and `projectionMatrix` uniform maps it to the gl viewport.\n *\n * **uSampler**\n *\n * The most important uniform is the input texture that container was rendered into.\n * _Important note: as with all Framebuffers in PixiJS, both input and output are\n * premultiplied by alpha._\n *\n * By default, input normalized coordinates are passed to fragment shader with `vTextureCoord`.\n * Use it to sample the input.\n *\n * ```\n * const fragment = `\n * varying vec2 vTextureCoord;\n * uniform sampler2D uSampler;\n * void main(void)\n * {\n *    gl_FragColor = texture2D(uSampler, vTextureCoord);\n * }\n * `;\n *\n * const myFilter = new PIXI.Filter(null, fragment);\n * ```\n *\n * This filter is just one uniform less than {@link PIXI.filters.AlphaFilter AlphaFilter}.\n *\n * **outputFrame**\n *\n * The `outputFrame` holds the rectangle where filter is applied in screen (CSS) coordinates.\n * It's the same as `renderer.screen` for a fullscreen filter.\n * Only a part of  `outputFrame.zw` size of temporary Framebuffer is used,\n * `(0, 0, outputFrame.width, outputFrame.height)`,\n *\n * Filters uses this quad to normalized (0-1) space, its passed into `aVertexPosition` attribute.\n * To calculate vertex position in screen space using normalized (0-1) space:\n *\n * ```\n * vec4 filterVertexPosition( void )\n * {\n *     vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n *     return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n * }\n * ```\n *\n * **inputSize**\n *\n * Temporary framebuffer is different, it can be either the size of screen, either power-of-two.\n * The `inputSize.xy` are size of temporary framebuffer that holds input.\n * The `inputSize.zw` is inverted, it's a shortcut to evade division inside the shader.\n *\n * Set `inputSize.xy = outputFrame.zw` for a fullscreen filter.\n *\n * To calculate input normalized coordinate, you have to map it to filter normalized space.\n * Multiply by `outputFrame.zw` to get input coordinate.\n * Divide by `inputSize.xy` to get input normalized coordinate.\n *\n * ```\n * vec2 filterTextureCoord( void )\n * {\n *     return aVertexPosition * (outputFrame.zw * inputSize.zw); // same as /inputSize.xy\n * }\n * ```\n * **resolution**\n *\n * The `resolution` is the ratio of screen (CSS) pixels to real pixels.\n *\n * **inputPixel**\n *\n * `inputPixel.xy` is the size of framebuffer in real pixels, same as `inputSize.xy * resolution`\n * `inputPixel.zw` is inverted `inputPixel.xy`.\n *\n * It's handy for filters that use neighbour pixels, like {@link PIXI.filters.FXAAFilter FXAAFilter}.\n *\n * **inputClamp**\n *\n * If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour.\n * For displacements, coordinates has to be clamped.\n *\n * The `inputClamp.xy` is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer\n * `inputClamp.zw` is bottom-right pixel center.\n *\n * ```\n * vec4 color = texture2D(uSampler, clamp(modifiedTextureCoord, inputClamp.xy, inputClamp.zw))\n * ```\n * OR\n * ```\n * vec4 color = texture2D(uSampler, min(modifigedTextureCoord, inputClamp.zw))\n * ```\n *\n * ### Additional Information\n *\n * Complete documentation on Filter usage is located in the\n * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\n *\n * Since PixiJS only had a handful of built-in filters, additional filters can be downloaded\n * {@link https://github.com/pixijs/pixi-filters here} from the PixiJS Filters repository.\n * @memberof PIXI\n */\nexport class Filter extends Shader\n{\n    /**\n     * The padding of the filter. Some filters require extra space to breath such as a blur.\n     * Increasing this will add extra width and height to the bounds of the object that the\n     * filter is applied to.\n     */\n    public padding: number;\n\n    /** The samples of the filter. */\n    public multisample: MSAA_QUALITY;\n\n    /** If enabled is true the filter is applied, if false it will not. */\n    public enabled: boolean;\n\n    /**\n     * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n     * Switch it off if it does not work for specific shader.\n     * @default true\n     */\n    public autoFit: boolean;\n\n    /**\n     * Legacy filters use position and uvs from attributes (set by filter system)\n     * @readonly\n     */\n    public legacy: boolean;\n\n    /** The WebGL state the filter requires to render. */\n    state: State;\n\n    protected _resolution: number;\n\n    /**\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     */\n    constructor(vertexSrc?: string, fragmentSrc?: string, uniforms?: Dict<any>)\n    {\n        const program = Program.from(vertexSrc || Filter.defaultVertexSrc,\n            fragmentSrc || Filter.defaultFragmentSrc);\n\n        super(program, uniforms);\n\n        this.padding = 0;\n        this.resolution = settings.FILTER_RESOLUTION;\n        this.multisample = settings.FILTER_MULTISAMPLE;\n        this.enabled = true;\n        this.autoFit = true;\n        this.state = new State();\n    }\n\n    /**\n     * Applies the filter\n     * @param {PIXI.FilterSystem} filterManager - The renderer to retrieve the filter from\n     * @param {PIXI.RenderTexture} input - The input render target.\n     * @param {PIXI.RenderTexture} output - The target to output to.\n     * @param {PIXI.CLEAR_MODES} [clearMode] - Should the output be cleared before rendering to it.\n     * @param {object} [_currentState] - It's current state of filter.\n     *        There are some useful properties in the currentState :\n     *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode?: CLEAR_MODES,\n        _currentState?: FilterState): void\n    {\n        // do as you please!\n\n        filterManager.applyFilter(this, input, output, clearMode);\n\n        // or just do a regular render..\n    }\n\n    /**\n     * Sets the blend mode of the filter.\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode(): BLEND_MODES\n    {\n        return this.state.blendMode;\n    }\n\n    set blendMode(value: BLEND_MODES)\n    {\n        this.state.blendMode = value;\n    }\n\n    /**\n     * The resolution of the filter. Setting this to be lower will lower the quality but\n     * increase the performance of the filter.\n     */\n    get resolution(): number\n    {\n        return this._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this._resolution = value;\n    }\n\n    /**\n     * The default vertex shader source\n     * @constant\n     */\n    static get defaultVertexSrc(): string\n    {\n        return defaultVertex;\n    }\n\n    /**\n     * The default fragment shader source\n     * @constant\n     */\n    static get defaultFragmentSrc(): string\n    {\n        return defaultFragment;\n    }\n\n    /** Used for caching shader IDs. */\n    static SOURCE_KEY_MAP: Dict<string>;\n}\n","import { Matrix } from '@pixi/math';\n\nimport type { Texture } from './Texture';\n\nconst tempMat = new Matrix();\n\n/**\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n *\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n *\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n *\n * Takes track of Texture changes through `_lastTextureID` private field.\n * Use `update()` method call to track it from outside.\n * @see PIXI.Texture\n * @see PIXI.Mesh\n * @see PIXI.TilingSprite\n * @memberof PIXI\n */\nexport class TextureMatrix\n{\n    /**\n     * Matrix operation that converts texture region coords to texture coords\n     * @readonly\n     */\n    public mapCoord: Matrix;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\n     * @default 0\n     */\n    public clampOffset: number;\n\n    /**\n     * Changes frame clamping\n     * Works with TilingSprite and Mesh\n     * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n     * @default 0.5\n     */\n    public clampMargin: number;\n\n    /**\n     * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\n     * Calculated based on clampOffset.\n     */\n    readonly uClampFrame: Float32Array;\n\n    /** Normalized clamp offset. Calculated based on clampOffset. */\n    readonly uClampOffset: Float32Array;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _textureID: number;\n\n    /**\n     * Tracks Texture frame changes.\n     * @protected\n     */\n    _updateID: number;\n    _texture: Texture;\n\n    /**\n     * If texture size is the same as baseTexture.\n     * @default false\n     * @readonly\n     */\n    isSimple: boolean;\n\n    /**\n     * @param texture - observed texture\n     * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     */\n    constructor(texture: Texture, clampMargin?: number)\n    {\n        this._texture = texture;\n\n        this.mapCoord = new Matrix();\n        this.uClampFrame = new Float32Array(4);\n        this.uClampOffset = new Float32Array(2);\n        this._textureID = -1;\n        this._updateID = 0;\n\n        this.clampOffset = 0;\n        this.clampMargin = (typeof clampMargin === 'undefined') ? 0.5 : clampMargin;\n        this.isSimple = false;\n    }\n\n    /** Texture property. */\n    get texture(): Texture\n    {\n        return this._texture;\n    }\n\n    set texture(value: Texture)\n    {\n        this._texture = value;\n        this._textureID = -1;\n    }\n\n    /**\n     * Multiplies uvs array to transform\n     * @param uvs - mesh uvs\n     * @param [out=uvs] - output\n     * @returns - output\n     */\n    multiplyUvs(uvs: Float32Array, out?: Float32Array): Float32Array\n    {\n        if (out === undefined)\n        {\n            out = uvs;\n        }\n\n        const mat = this.mapCoord;\n\n        for (let i = 0; i < uvs.length; i += 2)\n        {\n            const x = uvs[i];\n            const y = uvs[i + 1];\n\n            out[i] = (x * mat.a) + (y * mat.c) + mat.tx;\n            out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;\n        }\n\n        return out;\n    }\n\n    /**\n     * Updates matrices if texture was changed.\n     * @param [forceUpdate=false] - if true, matrices will be updated any case\n     * @returns - Whether or not it was updated\n     */\n    update(forceUpdate?: boolean): boolean\n    {\n        const tex = this._texture;\n\n        if (!tex || !tex.valid)\n        {\n            return false;\n        }\n\n        if (!forceUpdate\n            && this._textureID === tex._updateID)\n        {\n            return false;\n        }\n\n        this._textureID = tex._updateID;\n        this._updateID++;\n\n        const uvs = tex._uvs;\n\n        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n\n        const orig = tex.orig;\n        const trim = tex.trim;\n\n        if (trim)\n        {\n            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height,\n                -trim.x / trim.width, -trim.y / trim.height);\n            this.mapCoord.append(tempMat);\n        }\n\n        const texBase = tex.baseTexture;\n        const frame = this.uClampFrame;\n        const margin = this.clampMargin / texBase.resolution;\n        const offset = this.clampOffset;\n\n        frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n        frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n        frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n        frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n        this.uClampOffset[0] = offset / texBase.realWidth;\n        this.uClampOffset[1] = offset / texBase.realHeight;\n\n        this.isSimple = tex._frame.width === texBase.width\n            && tex._frame.height === texBase.height\n            && tex.rotate === 0;\n\n        return true;\n    }\n}\n","import { Filter } from '../Filter';\nimport type { Point } from '@pixi/math';\nimport { Matrix } from '@pixi/math';\nimport type { CLEAR_MODES } from '@pixi/constants';\nimport vertex from './spriteMaskFilter.vert';\nimport fragment from './spriteMaskFilter.frag';\nimport { TextureMatrix } from '../../textures/TextureMatrix';\n\nimport type { FilterSystem } from '../FilterSystem';\nimport type { IMaskTarget } from '../../mask/MaskData';\nimport type { Texture } from '../../textures/Texture';\nimport type { RenderTexture } from '../../renderTexture/RenderTexture';\nimport type { Dict } from '@pixi/utils';\n\nexport interface ISpriteMaskTarget extends IMaskTarget\n{\n    _texture: Texture;\n    worldAlpha: number;\n    anchor: Point;\n}\n\nexport interface ISpriteMaskFilter extends Filter\n{\n    maskSprite: IMaskTarget;\n}\n\n/**\n * This handles a Sprite acting as a mask, as opposed to a Graphic.\n *\n * WebGL only.\n * @memberof PIXI\n */\nexport class SpriteMaskFilter extends Filter\n{\n    /** @private */\n    _maskSprite: IMaskTarget;\n\n    /** Mask matrix */\n    maskMatrix: Matrix;\n\n    /**\n     * @param {PIXI.Sprite} sprite - The target sprite.\n     */\n    constructor(sprite: IMaskTarget);\n\n    /**\n     * @param vertexSrc - The source of the vertex shader.\n     * @param fragmentSrc - The source of the fragment shader.\n     * @param uniforms - Custom uniforms to use to augment the built-in ones.\n     */\n    constructor(vertexSrc?: string, fragmentSrc?: string, uniforms?: Dict<any>);\n\n    /** @ignore */\n    constructor(vertexSrc?: string | IMaskTarget, fragmentSrc?: string, uniforms?: Dict<any>)\n    {\n        let sprite = null;\n\n        if (typeof vertexSrc !== 'string' && fragmentSrc === undefined && uniforms === undefined)\n        {\n            sprite = vertexSrc as IMaskTarget;\n            vertexSrc = undefined;\n            fragmentSrc = undefined;\n            uniforms = undefined;\n        }\n\n        super(vertexSrc as string || vertex, fragmentSrc || fragment, uniforms);\n\n        this.maskSprite = sprite;\n        this.maskMatrix = new Matrix();\n    }\n\n    /**\n     * Sprite mask\n     * @type {PIXI.DisplayObject}\n     */\n    get maskSprite(): IMaskTarget\n    {\n        return this._maskSprite;\n    }\n\n    set maskSprite(value: IMaskTarget)\n    {\n        this._maskSprite = value;\n\n        if (this._maskSprite)\n        {\n            this._maskSprite.renderable = false;\n        }\n    }\n\n    /**\n     * Applies the filter\n     * @param filterManager - The renderer to retrieve the filter from\n     * @param input - The input render target.\n     * @param output - The target to output to.\n     * @param clearMode - Should the output be cleared before rendering to it.\n     */\n    apply(filterManager: FilterSystem, input: RenderTexture, output: RenderTexture, clearMode: CLEAR_MODES): void\n    {\n        const maskSprite = this._maskSprite as ISpriteMaskTarget;\n        const tex = maskSprite._texture;\n\n        if (!tex.valid)\n        {\n            return;\n        }\n        if (!tex.uvMatrix)\n        {\n            // margin = 0.0, let it bleed a bit, shader code becomes easier\n            // assuming that atlas textures were made with 1-pixel padding\n            tex.uvMatrix = new TextureMatrix(tex, 0.0);\n        }\n        tex.uvMatrix.update();\n\n        this.uniforms.npmAlpha = tex.baseTexture.alphaMode ? 0.0 : 1.0;\n        this.uniforms.mask = tex;\n        // get _normalized sprite texture coords_ and convert them to _normalized atlas texture coords_ with `prepend`\n        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite)\n            .prepend(tex.uvMatrix.mapCoord);\n        this.uniforms.alpha = maskSprite.worldAlpha;\n        this.uniforms.maskClamp = tex.uvMatrix.uClampFrame;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n","import { MaskData } from './MaskData';\nimport { SpriteMaskFilter } from '../filters/spriteMask/SpriteMaskFilter';\nimport { MASK_TYPES } from '@pixi/constants';\n\nimport type { ISystem } from '../ISystem';\nimport type { IMaskTarget } from './MaskData';\nimport type { Renderer } from '../Renderer';\n\n/**\n * System plugin to the renderer to manage masks.\n *\n * There are three built-in types of masking:\n * **Scissor Masking**: Scissor masking discards pixels that are outside of a rectangle called the scissor box. It is\n *  the most performant as the scissor test is inexpensive. However, it can only be used when the mask is rectangular.\n * **Stencil Masking**: Stencil masking discards pixels that don't overlap with the pixels rendered into the stencil\n *  buffer. It is the next fastest option as it does not require rendering into a separate framebuffer. However, it does\n *  cause the mask to be rendered **twice** for each masking operation; hence, minimize the rendering cost of your masks.\n * **Sprite Mask Filtering**: Sprite mask filtering discards pixels based on the red channel of the sprite-mask's\n *  texture. (Generally, the masking texture is grayscale). Using advanced techniques, you might be able to embed this\n *  type of masking in a custom shader - and hence, bypassing the masking system fully for performance wins.\n *\n * The best type of masking is auto-detected when you `push` one. To use scissor masking, you must pass in a `Graphics`\n * object with just a rectangle drawn.\n *\n * ## Mask Stacks\n *\n * In the scene graph, masks can be applied recursively, i.e. a mask can be applied during a masking operation. The mask\n * stack stores the currently applied masks in order. Each {@link PIXI.BaseRenderTexture} holds its own mask stack, i.e.\n * when you switch render-textures, the old masks only applied when you switch back to rendering to the old render-target.\n * @memberof PIXI\n */\nexport class MaskSystem implements ISystem\n{\n    /**\n     * Flag to enable scissor masking.\n     * @default true\n     */\n    public enableScissor: boolean;\n\n    /** Pool of used sprite mask filters. */\n    protected readonly alphaMaskPool: Array<SpriteMaskFilter[]>;\n\n    /**\n     * Current index of alpha mask pool.\n     * @default 0\n     * @readonly\n     */\n    protected alphaMaskIndex: number;\n\n    /** Pool of mask data. */\n    private readonly maskDataPool: Array<MaskData>;\n    private maskStack: Array<MaskData>;\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.enableScissor = true;\n        this.alphaMaskPool = [];\n        this.maskDataPool = [];\n\n        this.maskStack = [];\n        this.alphaMaskIndex = 0;\n    }\n\n    /**\n     * Changes the mask stack that is used by this System.\n     * @param maskStack - The mask stack\n     */\n    setMaskStack(maskStack: Array<MaskData>): void\n    {\n        this.maskStack = maskStack;\n        this.renderer.scissor.setMaskStack(maskStack);\n        this.renderer.stencil.setMaskStack(maskStack);\n    }\n\n    /**\n     * Enables the mask and appends it to the current mask stack.\n     *\n     * NOTE: The batch renderer should be flushed beforehand to prevent pending renders from being masked.\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n     * @param {PIXI.MaskData|PIXI.Sprite|PIXI.Graphics|PIXI.DisplayObject} maskDataOrTarget - The masking data.\n     */\n    push(target: IMaskTarget, maskDataOrTarget: MaskData | IMaskTarget): void\n    {\n        let maskData = maskDataOrTarget as MaskData;\n\n        if (!maskData.isMaskData)\n        {\n            const d = this.maskDataPool.pop() || new MaskData();\n\n            d.pooled = true;\n            d.maskObject = maskDataOrTarget as IMaskTarget;\n            maskData = d;\n        }\n\n        const maskAbove = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;\n\n        maskData.copyCountersOrReset(maskAbove);\n        maskData._colorMask = maskAbove ? maskAbove._colorMask : 0xf;\n\n        if (maskData.autoDetect)\n        {\n            this.detect(maskData);\n        }\n\n        maskData._target = target;\n\n        if (maskData.type !== MASK_TYPES.SPRITE)\n        {\n            this.maskStack.push(maskData);\n        }\n\n        if (maskData.enabled)\n        {\n            switch (maskData.type)\n            {\n                case MASK_TYPES.SCISSOR:\n                    this.renderer.scissor.push(maskData);\n                    break;\n                case MASK_TYPES.STENCIL:\n                    this.renderer.stencil.push(maskData);\n                    break;\n                case MASK_TYPES.SPRITE:\n                    maskData.copyCountersOrReset(null);\n                    this.pushSpriteMask(maskData);\n                    break;\n                case MASK_TYPES.COLOR:\n                    this.pushColorMask(maskData);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        if (maskData.type === MASK_TYPES.SPRITE)\n        {\n            this.maskStack.push(maskData);\n        }\n    }\n\n    /**\n     * Removes the last mask from the mask stack and doesn't return it.\n     *\n     * NOTE: The batch renderer should be flushed beforehand to render the masked contents before the mask is removed.\n     * @param {PIXI.IMaskTarget} target - Display Object to pop the mask from\n     */\n    pop(target: IMaskTarget): void\n    {\n        const maskData = this.maskStack.pop();\n\n        if (!maskData || maskData._target !== target)\n        {\n            // TODO: add an assert when we have it\n\n            return;\n        }\n\n        if (maskData.enabled)\n        {\n            switch (maskData.type)\n            {\n                case MASK_TYPES.SCISSOR:\n                    this.renderer.scissor.pop(maskData);\n                    break;\n                case MASK_TYPES.STENCIL:\n                    this.renderer.stencil.pop(maskData.maskObject);\n                    break;\n                case MASK_TYPES.SPRITE:\n                    this.popSpriteMask(maskData);\n                    break;\n                case MASK_TYPES.COLOR:\n                    this.popColorMask(maskData);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        maskData.reset();\n\n        if (maskData.pooled)\n        {\n            this.maskDataPool.push(maskData);\n        }\n\n        if (this.maskStack.length !== 0)\n        {\n            const maskCurrent = this.maskStack[this.maskStack.length - 1];\n\n            if (maskCurrent.type === MASK_TYPES.SPRITE && maskCurrent._filters)\n            {\n                maskCurrent._filters[0].maskSprite = maskCurrent.maskObject;\n            }\n        }\n    }\n\n    /**\n     * Sets type of MaskData based on its maskObject.\n     * @param maskData\n     */\n    detect(maskData: MaskData): void\n    {\n        const maskObject = maskData.maskObject;\n\n        if (!maskObject)\n        {\n            maskData.type = MASK_TYPES.COLOR;\n        }\n        else if (maskObject.isSprite)\n        {\n            maskData.type = MASK_TYPES.SPRITE;\n        }\n        else if (this.enableScissor && this.renderer.scissor.testScissor(maskData))\n        {\n            maskData.type = MASK_TYPES.SCISSOR;\n        }\n        else\n        {\n            maskData.type = MASK_TYPES.STENCIL;\n        }\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     * @param maskData - Sprite to be used as the mask.\n     */\n    pushSpriteMask(maskData: MaskData): void\n    {\n        const { maskObject } = maskData;\n        const target = maskData._target;\n        let alphaMaskFilter = maskData._filters;\n\n        if (!alphaMaskFilter)\n        {\n            alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];\n\n            if (!alphaMaskFilter)\n            {\n                alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new SpriteMaskFilter()];\n            }\n        }\n\n        const renderer = this.renderer;\n        const renderTextureSystem = renderer.renderTexture;\n\n        let resolution;\n        let multisample;\n\n        if (renderTextureSystem.current)\n        {\n            const renderTexture = renderTextureSystem.current;\n\n            resolution = maskData.resolution || renderTexture.resolution;\n            multisample = maskData.multisample ?? renderTexture.multisample;\n        }\n        else\n        {\n            resolution = maskData.resolution || renderer.resolution;\n            multisample = maskData.multisample ?? renderer.multisample;\n        }\n\n        alphaMaskFilter[0].resolution = resolution;\n        alphaMaskFilter[0].multisample = multisample;\n        alphaMaskFilter[0].maskSprite = maskObject;\n\n        const stashFilterArea = target.filterArea;\n\n        target.filterArea = maskObject.getBounds(true);\n        renderer.filter.push(target, alphaMaskFilter);\n        target.filterArea = stashFilterArea;\n\n        if (!maskData._filters)\n        {\n            this.alphaMaskIndex++;\n        }\n    }\n\n    /**\n     * Removes the last filter from the filter stack and doesn't return it.\n     * @param maskData - Sprite to be used as the mask.\n     */\n    popSpriteMask(maskData: MaskData): void\n    {\n        this.renderer.filter.pop();\n\n        if (maskData._filters)\n        {\n            maskData._filters[0].maskSprite = null;\n        }\n        else\n        {\n            this.alphaMaskIndex--;\n            this.alphaMaskPool[this.alphaMaskIndex][0].maskSprite = null;\n        }\n    }\n\n    /**\n     * Pushes the color mask.\n     * @param maskData - The mask data\n     */\n    pushColorMask(maskData: MaskData): void\n    {\n        const currColorMask = maskData._colorMask;\n        const nextColorMask = maskData._colorMask = currColorMask & maskData.colorMask;\n\n        if (nextColorMask !== currColorMask)\n        {\n            this.renderer.gl.colorMask(\n                (nextColorMask & 0x1) !== 0,\n                (nextColorMask & 0x2) !== 0,\n                (nextColorMask & 0x4) !== 0,\n                (nextColorMask & 0x8) !== 0\n            );\n        }\n    }\n\n    /**\n     * Pops the color mask.\n     * @param maskData - The mask data\n     */\n    popColorMask(maskData: MaskData): void\n    {\n        const currColorMask = maskData._colorMask;\n        const nextColorMask = this.maskStack.length > 0\n            ? this.maskStack[this.maskStack.length - 1]._colorMask : 0xf;\n\n        if (nextColorMask !== currColorMask)\n        {\n            this.renderer.gl.colorMask(\n                (nextColorMask & 0x1) !== 0,\n                (nextColorMask & 0x2) !== 0,\n                (nextColorMask & 0x4) !== 0,\n                (nextColorMask & 0x8) !== 0\n            );\n        }\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n","import type { ISystem } from '../ISystem';\nimport type { MaskData } from './MaskData';\nimport type { Renderer } from '../Renderer';\n\n/**\n * System plugin to the renderer to manage specific types of masking operations.\n * @memberof PIXI\n */\nexport class AbstractMaskSystem implements ISystem\n{\n    /**\n     * The mask stack\n     * @member {PIXI.MaskData[]}\n     */\n    protected maskStack: Array<MaskData>;\n\n    /**\n     * Constant for gl.enable\n     * @private\n     */\n    protected glConst: number;\n    protected renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.maskStack = [];\n        this.glConst = 0;\n    }\n\n    /** Gets count of masks of certain type. */\n    getStackLength(): number\n    {\n        return this.maskStack.length;\n    }\n\n    /**\n     * Changes the mask stack that is used by this System.\n     * @param {PIXI.MaskData[]} maskStack - The mask stack\n     */\n    setMaskStack(maskStack: Array<MaskData>): void\n    {\n        const { gl } = this.renderer;\n        const curStackLen = this.getStackLength();\n\n        this.maskStack = maskStack;\n\n        const newStackLen = this.getStackLength();\n\n        if (newStackLen !== curStackLen)\n        {\n            if (newStackLen === 0)\n            {\n                gl.disable(this.glConst);\n            }\n            else\n            {\n                gl.enable(this.glConst);\n                this._useCurrent();\n            }\n        }\n    }\n\n    /**\n     * Setup renderer to use the current mask data.\n     * @private\n     */\n    protected _useCurrent(): void\n    {\n        // OVERWRITE;\n    }\n\n    /** Destroys the mask stack. */\n    destroy(): void\n    {\n        this.renderer = null;\n        this.maskStack = null;\n    }\n}\n","import { AbstractMaskSystem } from './AbstractMaskSystem';\n\nimport type { Renderer } from '../Renderer';\nimport type { MaskData } from './MaskData';\nimport { Matrix, Rectangle } from '@pixi/math';\nimport { settings } from '@pixi/settings';\n\nconst tempMatrix = new Matrix();\nconst rectPool: Rectangle[] = [];\n\n/**\n * System plugin to the renderer to manage scissor masking.\n *\n * Scissor masking discards pixels outside of a rectangle called the scissor box. The scissor box is in the framebuffer\n * viewport's space; however, the mask's rectangle is projected from world-space to viewport space automatically\n * by this system.\n * @memberof PIXI\n */\nexport class ScissorSystem extends AbstractMaskSystem\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.glConst = settings.ADAPTER.getWebGLRenderingContext().SCISSOR_TEST;\n    }\n\n    getStackLength(): number\n    {\n        const maskData = this.maskStack[this.maskStack.length - 1];\n\n        if (maskData)\n        {\n            return maskData._scissorCounter;\n        }\n\n        return 0;\n    }\n\n    /**\n     * evaluates _boundsTransformed, _scissorRect for MaskData\n     * @param maskData\n     */\n    calcScissorRect(maskData: MaskData): void\n    {\n        if (maskData._scissorRectLocal)\n        {\n            return;\n        }\n\n        const prevData = maskData._scissorRect;\n        const { maskObject } = maskData;\n        const { renderer } = this;\n        const renderTextureSystem = renderer.renderTexture;\n        const rect = maskObject.getBounds(true, rectPool.pop() ?? new Rectangle());\n\n        this.roundFrameToPixels(rect,\n            renderTextureSystem.current ? renderTextureSystem.current.resolution : renderer.resolution,\n            renderTextureSystem.sourceFrame,\n            renderTextureSystem.destinationFrame,\n            renderer.projection.transform);\n\n        if (prevData)\n        {\n            rect.fit(prevData);\n        }\n        maskData._scissorRectLocal = rect;\n    }\n\n    private static isMatrixRotated(matrix: Matrix)\n    {\n        if (!matrix)\n        {\n            return false;\n        }\n        const { a, b, c, d } = matrix;\n\n        // Skip if skew/rotation present in matrix, except for multiple of 90° rotation. If rotation\n        // is a multiple of 90°, then either pair of (b,c) or (a,d) will be (0,0).\n        return ((Math.abs(b) > 1e-4 || Math.abs(c) > 1e-4)\n            && (Math.abs(a) > 1e-4 || Math.abs(d) > 1e-4));\n    }\n\n    /**\n     * Test, whether the object can be scissor mask with current renderer projection.\n     * Calls \"calcScissorRect()\" if its true.\n     * @param maskData - mask data\n     * @returns whether Whether the object can be scissor mask\n     */\n    public testScissor(maskData: MaskData): boolean\n    {\n        const { maskObject } = maskData;\n\n        if (!maskObject.isFastRect || !maskObject.isFastRect())\n        {\n            return false;\n        }\n        if (ScissorSystem.isMatrixRotated(maskObject.worldTransform))\n        {\n            return false;\n        }\n        if (ScissorSystem.isMatrixRotated(this.renderer.projection.transform))\n        {\n            return false;\n        }\n\n        this.calcScissorRect(maskData);\n\n        const rect = maskData._scissorRectLocal;\n\n        return rect.width > 0 && rect.height > 0;\n    }\n\n    private roundFrameToPixels(\n        frame: Rectangle,\n        resolution: number,\n        bindingSourceFrame: Rectangle,\n        bindingDestinationFrame: Rectangle,\n        transform?: Matrix,\n    )\n    {\n        if (ScissorSystem.isMatrixRotated(transform))\n        {\n            return;\n        }\n\n        transform = transform ? tempMatrix.copyFrom(transform) : tempMatrix.identity();\n\n        // Get forward transform from world space to screen space\n        transform\n            .translate(-bindingSourceFrame.x, -bindingSourceFrame.y)\n            .scale(\n                bindingDestinationFrame.width / bindingSourceFrame.width,\n                bindingDestinationFrame.height / bindingSourceFrame.height)\n            .translate(bindingDestinationFrame.x, bindingDestinationFrame.y);\n\n        // Convert frame to screen space\n        (this.renderer.filter as any).transformAABB(transform, frame);\n\n        frame.fit(bindingDestinationFrame);\n        frame.x = Math.round(frame.x * resolution);\n        frame.y = Math.round(frame.y * resolution);\n        frame.width = Math.round(frame.width * resolution);\n        frame.height = Math.round(frame.height * resolution);\n    }\n\n    /**\n     * Applies the Mask and adds it to the current stencil stack.\n     * @author alvin\n     * @param maskData - The mask data.\n     */\n    push(maskData: MaskData): void\n    {\n        if (!maskData._scissorRectLocal)\n        {\n            this.calcScissorRect(maskData);\n        }\n\n        const { gl } = this.renderer;\n\n        if (!maskData._scissorRect)\n        {\n            gl.enable(gl.SCISSOR_TEST);\n        }\n\n        maskData._scissorCounter++;\n        maskData._scissorRect = maskData._scissorRectLocal;\n        this._useCurrent();\n    }\n\n    /**\n     * This should be called after a mask is popped off the mask stack. It will rebind the scissor box to be latest with the\n     * last mask in the stack.\n     *\n     * This can also be called when you directly modify the scissor box and want to restore PixiJS state.\n     * @param maskData - The mask data.\n     */\n    pop(maskData?: MaskData): void\n    {\n        const { gl } = this.renderer;\n\n        if (maskData)\n        {\n            rectPool.push(maskData._scissorRectLocal);\n        }\n\n        if (this.getStackLength() > 0)\n        {\n            this._useCurrent();\n        }\n        else\n        {\n            gl.disable(gl.SCISSOR_TEST);\n        }\n    }\n\n    /**\n     * Setup renderer to use the current scissor data.\n     * @private\n     */\n    _useCurrent(): void\n    {\n        const rect = this.maskStack[this.maskStack.length - 1]._scissorRect;\n        let y: number;\n\n        if (this.renderer.renderTexture.current)\n        {\n            y = rect.y;\n        }\n        else\n        {\n            // flipY. In future we'll have it over renderTextures as an option\n            y = this.renderer.height - rect.height - rect.y;\n        }\n\n        this.renderer.gl.scissor(rect.x, y, rect.width, rect.height);\n    }\n}\n","import { AbstractMaskSystem } from './AbstractMaskSystem';\n\nimport type { Renderer } from '../Renderer';\nimport type { IMaskTarget, MaskData } from './MaskData';\nimport { settings } from '@pixi/settings';\n\n/**\n * System plugin to the renderer to manage stencils (used for masks).\n * @memberof PIXI\n */\nexport class StencilSystem extends AbstractMaskSystem\n{\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.glConst = settings.ADAPTER.getWebGLRenderingContext().STENCIL_TEST;\n    }\n\n    getStackLength(): number\n    {\n        const maskData = this.maskStack[this.maskStack.length - 1];\n\n        if (maskData)\n        {\n            return maskData._stencilCounter;\n        }\n\n        return 0;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current stencil stack.\n     * @param maskData - The mask data\n     */\n    push(maskData: MaskData): void\n    {\n        const maskObject = maskData.maskObject;\n        const { gl } = this.renderer;\n        const prevMaskCount = maskData._stencilCounter;\n\n        if (prevMaskCount === 0)\n        {\n            // force use stencil texture in current framebuffer\n            this.renderer.framebuffer.forceStencil();\n            gl.clearStencil(0);\n            gl.clear(gl.STENCIL_BUFFER_BIT);\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        maskData._stencilCounter++;\n\n        const colorMask = maskData._colorMask;\n\n        if (colorMask !== 0)\n        {\n            maskData._colorMask = 0;\n            gl.colorMask(false, false, false, false);\n        }\n\n        // Increment the reference stencil value where the new mask overlaps with the old ones.\n        gl.stencilFunc(gl.EQUAL, prevMaskCount, 0xFFFFFFFF);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n\n        maskObject.renderable = true;\n        maskObject.render(this.renderer);\n        this.renderer.batch.flush();\n        maskObject.renderable = false;\n\n        if (colorMask !== 0)\n        {\n            maskData._colorMask = colorMask;\n            gl.colorMask(\n                (colorMask & 1) !== 0,\n                (colorMask & 2) !== 0,\n                (colorMask & 4) !== 0,\n                (colorMask & 8) !== 0\n            );\n        }\n\n        this._useCurrent();\n    }\n\n    /**\n     * Pops stencil mask. MaskData is already removed from stack\n     * @param {PIXI.DisplayObject} maskObject - object of popped mask data\n     */\n    pop(maskObject: IMaskTarget): void\n    {\n        const gl = this.renderer.gl;\n\n        if (this.getStackLength() === 0)\n        {\n            // the stack is empty!\n            gl.disable(gl.STENCIL_TEST);\n        }\n        else\n        {\n            const maskData = this.maskStack.length !== 0 ? this.maskStack[this.maskStack.length - 1] : null;\n            const colorMask = maskData ? maskData._colorMask : 0xf;\n\n            if (colorMask !== 0)\n            {\n                maskData._colorMask = 0;\n                gl.colorMask(false, false, false, false);\n            }\n\n            // Decrement the reference stencil value where the popped mask overlaps with the other ones\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n\n            maskObject.renderable = true;\n            maskObject.render(this.renderer);\n            this.renderer.batch.flush();\n            maskObject.renderable = false;\n\n            if (colorMask !== 0)\n            {\n                maskData._colorMask = colorMask;\n                gl.colorMask(\n                    (colorMask & 0x1) !== 0,\n                    (colorMask & 0x2) !== 0,\n                    (colorMask & 0x4) !== 0,\n                    (colorMask & 0x8) !== 0\n                );\n            }\n\n            this._useCurrent();\n        }\n    }\n\n    /**\n     * Setup renderer to use the current stencil data.\n     * @private\n     */\n    _useCurrent(): void\n    {\n        const gl = this.renderer.gl;\n\n        gl.stencilFunc(gl.EQUAL, this.getStackLength(), 0xFFFFFFFF);\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    }\n}\n","import { Matrix } from '@pixi/math';\n\nimport type { ISystem } from '../ISystem';\nimport type { Rectangle } from '@pixi/math';\nimport type { Renderer } from '../Renderer';\n\n/**\n * System plugin to the renderer to manage the projection matrix.\n *\n * The `projectionMatrix` is a global uniform provided to all shaders. It is used to transform points in world space to\n * normalized device coordinates.\n * @memberof PIXI\n */\nexport class ProjectionSystem implements ISystem\n{\n    /**\n     * The destination frame used to calculate the current projection matrix.\n     *\n     * The destination frame is the rectangle in the render-target into which contents are rendered. If rendering\n     * to the screen, the origin is on the top-left. If rendering to a framebuffer, the origin is on the\n     * bottom-left. This \"flipping\" phenomenon is because of WebGL convention for (shader) texture coordinates, where\n     * the bottom-left corner is (0,0). It allows display-objects to map their (0,0) position in local-space (top-left)\n     * to (0,0) in texture space (bottom-left). In other words, a sprite's top-left corner actually renders the\n     * texture's bottom-left corner. You will also notice this when using a tool like SpectorJS to view your textures\n     * at runtime.\n     *\n     * The destination frame's dimensions (width,height) should be equal to the source frame. This is because,\n     * otherwise, the contents will be scaled to fill the destination frame. Similarly, the destination frame's (x,y)\n     * coordinates are (0,0) unless you know what you're doing.\n     * @readonly\n     */\n    public destinationFrame: Rectangle;\n\n    /**\n     * The source frame used to calculate the current projection matrix.\n     *\n     * The source frame is the rectangle in world space containing the contents to be rendered.\n     * @readonly\n     */\n    public sourceFrame: Rectangle;\n\n    /**\n     * Default destination frame\n     *\n     * This is not used internally. It is not advised to use this feature specifically unless you know what\n     * you're doing. The `update` method will default to this frame if you do not pass the destination frame.\n     * @readonly\n     */\n    public defaultFrame: Rectangle;\n\n    /**\n     * Projection matrix\n     *\n     * This matrix can be used to transform points from world space to normalized device coordinates, and is calculated\n     * from the sourceFrame → destinationFrame mapping provided.\n     *\n     * The renderer's `globalUniforms` keeps a reference to this, and so it is available for all shaders to use as a\n     * uniform.\n     * @readonly\n     */\n    public projectionMatrix: Matrix;\n\n    /**\n     * A transform to be appended to the projection matrix.\n     *\n     * This can be used to transform points in world-space one last time before they are outputted by the shader. You can\n     * use to rotate the whole scene, for example. Remember to clear it once you've rendered everything.\n     * @member {PIXI.Matrix}\n     */\n    public transform: Matrix;\n\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.destinationFrame = null;\n        this.sourceFrame = null;\n        this.defaultFrame = null;\n        this.projectionMatrix = new Matrix();\n        this.transform = null;\n    }\n\n    /**\n     * Updates the projection-matrix based on the sourceFrame → destinationFrame mapping provided.\n     *\n     * NOTE: It is expected you call `renderer.framebuffer.setViewport(destinationFrame)` after this. This is because\n     * the framebuffer viewport converts shader vertex output in normalized device coordinates to window coordinates.\n     *\n     * NOTE-2: {@link RenderTextureSystem#bind} updates the projection-matrix when you bind a render-texture. It is expected\n     * that you dirty the current bindings when calling this manually.\n     * @param destinationFrame - The rectangle in the render-target to render the contents into. If rendering to the canvas,\n     *  the origin is on the top-left; if rendering to a render-texture, the origin is on the bottom-left.\n     * @param sourceFrame - The rectangle in world space that contains the contents being rendered.\n     * @param resolution - The resolution of the render-target, which is the ratio of\n     *  world-space (or CSS) pixels to physical pixels.\n     * @param root - Whether the render-target is the screen. This is required because rendering to textures\n     *  is y-flipped (i.e. upside down relative to the screen).\n     */\n    update(destinationFrame: Rectangle, sourceFrame: Rectangle, resolution: number, root: boolean): void\n    {\n        this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame;\n        this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame;\n\n        // Calculate object-space to clip-space projection\n        this.calculateProjection(this.destinationFrame, this.sourceFrame, resolution, root);\n\n        if (this.transform)\n        {\n            this.projectionMatrix.append(this.transform);\n        }\n\n        const renderer =  this.renderer;\n\n        renderer.globalUniforms.uniforms.projectionMatrix = this.projectionMatrix;\n        renderer.globalUniforms.update();\n\n        // this will work for now\n        // but would be sweet to stick and even on the global uniforms..\n        if (renderer.shader.shader)\n        {\n            renderer.shader.syncUniformGroup(renderer.shader.shader.uniforms.globals);\n        }\n    }\n\n    /**\n     * Calculates the `projectionMatrix` to map points inside `sourceFrame` to inside `destinationFrame`.\n     * @param _destinationFrame - The destination frame in the render-target.\n     * @param sourceFrame - The source frame in world space.\n     * @param _resolution - The render-target's resolution, i.e. ratio of CSS to physical pixels.\n     * @param root - Whether rendering into the screen. Otherwise, if rendering to a framebuffer, the projection\n     *  is y-flipped.\n     */\n    calculateProjection(_destinationFrame: Rectangle, sourceFrame: Rectangle, _resolution: number, root: boolean): void\n    {\n        const pm = this.projectionMatrix;\n        const sign = !root ? 1 : -1;\n\n        pm.identity();\n\n        pm.a = (1 / sourceFrame.width * 2);\n        pm.d = sign * (1 / sourceFrame.height * 2);\n\n        pm.tx = -1 - (sourceFrame.x * pm.a);\n        pm.ty = -sign - (sourceFrame.y * pm.d);\n    }\n\n    /**\n     * Sets the transform of the active render target to the given matrix.\n     * @param _matrix - The transformation matrix\n     */\n    setTransform(_matrix: Matrix): void\n    {\n        // this._activeRenderTarget.transform = matrix;\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n","import { Rectangle } from '@pixi/math';\nimport type { BUFFER_BITS } from '@pixi/constants';\n\nimport type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { RenderTexture } from './RenderTexture';\nimport type { BaseRenderTexture } from './BaseRenderTexture';\nimport type { MaskData } from '../mask/MaskData';\nimport type { ISize } from '@pixi/math';\n\n// Temporary rectangle for assigned sourceFrame or destinationFrame\nconst tempRect = new Rectangle();\n\n// Temporary rectangle for renderTexture destinationFrame\nconst tempRect2 = new Rectangle();\n\n/* eslint-disable max-len */\n/**\n * System plugin to the renderer to manage render textures.\n *\n * Should be added after FramebufferSystem\n *\n * ### Frames\n *\n * The `RenderTextureSystem` holds a sourceFrame → destinationFrame projection. The following table explains the different\n * coordinate spaces used:\n *\n * | Frame                  | Description                                                      | Coordinate System                                       |\n * | ---------------------- | ---------------------------------------------------------------- | ------------------------------------------------------- |\n * | sourceFrame            | The rectangle inside of which display-objects are being rendered | **World Space**: The origin on the top-left             |\n * | destinationFrame       | The rectangle in the render-target (canvas or texture) into which contents should be rendered | If rendering to the canvas, this is in screen space and the origin is on the top-left. If rendering to a render-texture, this is in its base-texture's space with the origin on the bottom-left.  |\n * | viewportFrame          | The framebuffer viewport corresponding to the destination-frame  | **Window Coordinates**: The origin is always on the bottom-left. |\n * @memberof PIXI\n */\nexport class RenderTextureSystem implements ISystem\n{\n/* eslint-enable max-len */\n\n    /** The clear background color as RGBA. */\n    public clearColor: number[];\n\n    /**\n     * List of masks for the {@link PIXI.StencilSystem}.\n     * @readonly\n     */\n    public defaultMaskStack: Array<MaskData>;\n\n    /**\n     * Render texture currently bound. {@code null} if rendering to the canvas.\n     * @readonly\n     */\n    public current: RenderTexture | null;\n\n    /**\n     * The source frame for the render-target's projection mapping.\n     *\n     * See {@link PIXI.ProjectionSystem#sourceFrame} for more details\n     */\n    public readonly sourceFrame: Rectangle;\n\n    /**\n     * The destination frame for the render-target's projection mapping.\n     *\n     * See {@link PIXI.Projection#destinationFrame} for more details.\n     */\n    public readonly destinationFrame: Rectangle;\n\n    /**\n     * The viewport frame for the render-target's viewport binding. This is equal to the destination-frame\n     * for render-textures, while it is y-flipped when rendering to the screen (i.e. its origin is always on\n     * the bottom-left).\n     */\n    public readonly viewportFrame: Rectangle;\n\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.clearColor = renderer._backgroundColorRgba;\n        this.defaultMaskStack = [];\n        this.current = null;\n        this.sourceFrame = new Rectangle();\n        this.destinationFrame = new Rectangle();\n        this.viewportFrame = new Rectangle();\n    }\n\n    /**\n     * Bind the current render texture.\n     * @param renderTexture - RenderTexture to bind, by default its `null` - the screen.\n     * @param sourceFrame - Part of world that is mapped to the renderTexture.\n     * @param destinationFrame - Part of renderTexture, by default it has the same size as sourceFrame.\n     */\n    bind(renderTexture: RenderTexture = null, sourceFrame?: Rectangle, destinationFrame?: Rectangle): void\n    {\n        const renderer = this.renderer;\n\n        this.current = renderTexture;\n\n        let baseTexture: BaseRenderTexture;\n        let framebuffer;\n        let resolution;\n\n        if (renderTexture)\n        {\n            baseTexture = renderTexture.baseTexture as BaseRenderTexture;\n\n            resolution = baseTexture.resolution;\n\n            if (!sourceFrame)\n            {\n                tempRect.width = renderTexture.frame.width;\n                tempRect.height = renderTexture.frame.height;\n\n                sourceFrame = tempRect;\n            }\n\n            if (!destinationFrame)\n            {\n                tempRect2.x = renderTexture.frame.x;\n                tempRect2.y = renderTexture.frame.y;\n                tempRect2.width = sourceFrame.width;\n                tempRect2.height = sourceFrame.height;\n\n                destinationFrame = tempRect2;\n            }\n\n            framebuffer = baseTexture.framebuffer;\n        }\n        else\n        {\n            resolution = renderer.resolution;\n\n            if (!sourceFrame)\n            {\n                tempRect.width = renderer.screen.width;\n                tempRect.height = renderer.screen.height;\n\n                sourceFrame = tempRect;\n            }\n\n            if (!destinationFrame)\n            {\n                destinationFrame = tempRect;\n\n                destinationFrame.width = sourceFrame.width;\n                destinationFrame.height = sourceFrame.height;\n            }\n        }\n\n        const viewportFrame = this.viewportFrame;\n\n        viewportFrame.x = destinationFrame.x * resolution;\n        viewportFrame.y = destinationFrame.y * resolution;\n        viewportFrame.width = destinationFrame.width * resolution;\n        viewportFrame.height = destinationFrame.height * resolution;\n\n        if (!renderTexture)\n        {\n            viewportFrame.y = renderer.view.height - (viewportFrame.y + viewportFrame.height);\n        }\n\n        viewportFrame.ceil();\n\n        this.renderer.framebuffer.bind(framebuffer, viewportFrame);\n        this.renderer.projection.update(destinationFrame, sourceFrame, resolution, !framebuffer);\n\n        if (renderTexture)\n        {\n            this.renderer.mask.setMaskStack(baseTexture.maskStack);\n        }\n        else\n        {\n            this.renderer.mask.setMaskStack(this.defaultMaskStack);\n        }\n\n        this.sourceFrame.copyFrom(sourceFrame);\n        this.destinationFrame.copyFrom(destinationFrame);\n    }\n\n    /**\n     * Erases the render texture and fills the drawing area with a colour.\n     * @param clearColor - The color as rgba, default to use the renderer backgroundColor\n     * @param [mask=BUFFER_BITS.COLOR | BUFFER_BITS.DEPTH] - Bitwise OR of masks\n     *  that indicate the buffers to be cleared, by default COLOR and DEPTH buffers.\n     */\n    clear(clearColor?: number[], mask?: BUFFER_BITS): void\n    {\n        if (this.current)\n        {\n            clearColor = clearColor || (this.current.baseTexture as BaseRenderTexture).clearColor;\n        }\n        else\n        {\n            clearColor = clearColor || this.clearColor;\n        }\n\n        const destinationFrame = this.destinationFrame;\n        const baseFrame: ISize = this.current ? this.current.baseTexture : this.renderer.screen;\n        const clearMask = destinationFrame.width !== baseFrame.width || destinationFrame.height !== baseFrame.height;\n\n        if (clearMask)\n        {\n            let { x, y, width, height } = this.viewportFrame;\n\n            x = Math.round(x);\n            y = Math.round(y);\n            width = Math.round(width);\n            height = Math.round(height);\n\n            // TODO: ScissorSystem should cache whether the scissor test is enabled or not.\n            this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n            this.renderer.gl.scissor(x, y, width, height);\n        }\n\n        this.renderer.framebuffer.clear(clearColor[0], clearColor[1], clearColor[2], clearColor[3], mask);\n\n        if (clearMask)\n        {\n            // Restore the scissor box\n            this.renderer.scissor.pop();\n        }\n    }\n\n    resize(): void // screenWidth, screenHeight)\n    {\n        // resize the root only!\n        this.bind(null);\n    }\n\n    /** Resets render-texture state. */\n    reset(): void\n    {\n        this.bind(null);\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n","import type { Dict } from '@pixi/utils';\nimport { mapSize } from '../utils';\nimport type { IUniformData } from '../Program';\nimport type { UniformGroup } from '../UniformGroup';\nimport { uniformParsers } from './uniformParsers';\nimport type { Renderer } from '../../Renderer';\nimport type { Buffer } from '../../geometry/Buffer';\n\nexport type UniformsSyncCallback = (...args: any[]) => void;\n\nfunction uboUpdate(_ud: any, _uv: any, _renderer: Renderer, _syncData: any, buffer: Buffer): void\n{\n    _renderer.buffer.update(buffer);\n}\n\n// cv = CachedValue\n// v = value\n// ud = uniformData\n// uv = uniformValue\n// l = location\nconst UBO_TO_SINGLE_SETTERS: Dict<string> = {\n    float: `\n        data[offset] = v;\n    `,\n    vec2: `\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n    `,\n    vec3: `\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n\n    `,\n    vec4: `\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n        data[offset+3] = v[3];\n    `,\n    mat2: `\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n\n        data[offset+4] = v[2];\n        data[offset+5] = v[3];\n    `,\n    mat3: `\n        data[offset] = v[0];\n        data[offset+1] = v[1];\n        data[offset+2] = v[2];\n\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];\n    `,\n    mat4: `\n        for(var i = 0; i < 16; i++)\n        {\n            data[offset + i] = v[i];\n        }\n    `\n};\n\nconst GLSL_TO_STD40_SIZE: Dict<number> = {\n    float:  4,\n    vec2:   8,\n    vec3:   12,\n    vec4:   16,\n\n    int:      4,\n    ivec2:    8,\n    ivec3:    12,\n    ivec4:    16,\n\n    uint:     4,\n    uvec2:    8,\n    uvec3:    12,\n    uvec4:    16,\n\n    bool:     4,\n    bvec2:    8,\n    bvec3:    12,\n    bvec4:    16,\n\n    mat2:     16 * 2,\n    mat3:     16 * 3,\n    mat4:     16 * 4,\n};\n\ninterface UBOElement\n{\n    data: IUniformData\n    offset: number,\n    dataLen: number,\n    dirty: number\n}\n\n/**\n * logic originally from here: https://github.com/sketchpunk/FunWithWebGL2/blob/master/lesson_022/Shaders.js\n * rewrote it, but this was a great starting point to get a solid understanding of whats going on :)\n * @ignore\n * @param uniformData\n */\nexport function createUBOElements(uniformData: IUniformData[]): {uboElements: UBOElement[], size: number}\n{\n    const uboElements: UBOElement[] = uniformData.map((data: IUniformData) =>\n        ({\n            data,\n            offset: 0,\n            dataLen: 0,\n            dirty: 0\n        }));\n\n    let size = 0;\n    let chunkSize = 0;\n    let offset = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        size = GLSL_TO_STD40_SIZE[uboElement.data.type];\n\n        if (uboElement.data.size > 1)\n        {\n            size = Math.max(size, 16) * uboElement.data.size;\n        }\n\n        uboElement.dataLen = size;\n\n        // add some size offset..\n        // must align to the nearest 16 bytes or internally nearest round size\n\n        if (chunkSize % size !== 0 && chunkSize < 16)\n        {\n            // diff required to line up..\n            const lineUpValue = (chunkSize % size) % 16;\n\n            chunkSize += lineUpValue;\n            offset += lineUpValue;\n        }\n\n        if ((chunkSize + size) > 16)\n        {\n            offset = Math.ceil(offset / 16) * 16;\n            uboElement.offset = offset;\n            offset += size;\n            chunkSize = size;\n        }\n        else\n        {\n            uboElement.offset = offset;\n            chunkSize += size;\n            offset += size;\n        }\n    }\n\n    offset = Math.ceil(offset / 16) * 16;\n\n    return { uboElements, size: offset };\n}\n\nexport function getUBOData(uniforms: Dict<any>, uniformData: Dict<any>): any[]\n{\n    const usedUniformDatas = [];\n\n    // build..\n    for (const i in uniforms)\n    {\n        if (uniformData[i])\n        {\n            usedUniformDatas.push(uniformData[i]);\n        }\n    }\n\n    // sort them out by index!\n    usedUniformDatas.sort((a, b) => a.index - b.index);\n\n    return usedUniformDatas;\n}\n\nexport function generateUniformBufferSync(\n    group: UniformGroup,\n    uniformData: Dict<any>\n): {size: number, syncFunc: UniformsSyncCallback}\n{\n    if (!group.autoManage)\n    {\n        // if the group is nott automatically managed, we don't need to generate a special function for it...\n        return { size: 0, syncFunc: uboUpdate };\n    }\n\n    const usedUniformDatas = getUBOData(group.uniforms, uniformData);\n\n    const { uboElements, size } = createUBOElements(usedUniformDatas);\n\n    const funcFragments = [`\n    var v = null;\n    var v2 = null;\n    var cv = null;\n    var t = 0;\n    var gl = renderer.gl\n    var index = 0;\n    var data = buffer.data;\n    `];\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n        const uniform = group.uniforms[uboElement.data.name];\n\n        const name = uboElement.data.name;\n\n        let parsed = false;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const uniformParser = uniformParsers[j];\n\n            if (uniformParser.codeUbo && uniformParser.test(uboElement.data, uniform))\n            {\n                funcFragments.push(\n                    `offset = ${uboElement.offset / 4};`,\n                    uniformParsers[j].codeUbo(uboElement.data.name, uniform));\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            if (uboElement.data.size > 1)\n            {\n                const size =  mapSize(uboElement.data.type);\n                const rowSize = Math.max(GLSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n                const elementSize = size / rowSize;\n                const remainder = (4 - (elementSize % 4)) % 4;\n\n                funcFragments.push(`\n                cv = ud.${name}.value;\n                v = uv.${name};\n                offset = ${uboElement.offset / 4};\n\n                t = 0;\n\n                for(var i=0; i < ${uboElement.data.size * rowSize}; i++)\n                {\n                    for(var j = 0; j < ${elementSize}; j++)\n                    {\n                        data[offset++] = v[t++];\n                    }\n                    offset += ${remainder};\n                }\n\n                `);\n            }\n            else\n            {\n                const template = UBO_TO_SINGLE_SETTERS[uboElement.data.type];\n\n                funcFragments.push(`\n                cv = ud.${name}.value;\n                v = uv.${name};\n                offset = ${uboElement.offset / 4};\n                ${template};\n                `);\n            }\n        }\n    }\n\n    funcFragments.push(`\n       renderer.buffer.update(buffer);\n    `);\n\n    return {\n        size,\n        // eslint-disable-next-line no-new-func\n        syncFunc: new Function(\n            'ud',\n            'uv',\n            'renderer',\n            'syncData',\n            'buffer',\n            funcFragments.join('\\n')\n        ) as UniformsSyncCallback\n    };\n}\n","import type { Dict } from '@pixi/utils';\n\n/**\n * @private\n */\nexport class IGLUniformData\n{\n    location: WebGLUniformLocation;\n    value: number | boolean | Float32Array | Int32Array | Uint32Array | boolean[];\n}\n\n/**\n * Helper class to create a WebGL Program\n * @memberof PIXI\n */\nexport class GLProgram\n{\n    /** The shader program. */\n    public program: WebGLProgram;\n\n    /**\n     * Holds the uniform data which contains uniform locations\n     * and current uniform values used for caching and preventing unneeded GPU commands.\n     */\n    public uniformData: Dict<any>;\n\n    /**\n     * UniformGroups holds the various upload functions for the shader. Each uniform group\n     * and program have a unique upload function generated.\n     */\n    public uniformGroups: Dict<any>;\n\n    /** A hash that stores where UBOs are bound to on the program. */\n    public uniformBufferBindings: Dict<any>;\n\n    /** A hash for lazily-generated uniform uploading functions. */\n    public uniformSync: Dict<any>;\n\n    /**\n     * A place where dirty ticks are stored for groups\n     * If a tick here does not match with the Higher level Programs tick, it means\n     * we should re upload the data.\n     */\n    public uniformDirtyGroups: Dict<any>;\n\n    /**\n     * Makes a new Pixi program.\n     * @param program - webgl program\n     * @param uniformData - uniforms\n     */\n    constructor(program: WebGLProgram, uniformData: {[key: string]: IGLUniformData})\n    {\n        this.program = program;\n        this.uniformData = uniformData;\n        this.uniformGroups = {};\n        this.uniformDirtyGroups = {};\n        this.uniformBufferBindings = {};\n    }\n\n    /** Destroys this program. */\n    destroy(): void\n    {\n        this.uniformData = null;\n        this.uniformGroups = null;\n        this.uniformDirtyGroups = null;\n        this.uniformBufferBindings = null;\n        this.program = null;\n    }\n}\n","import type { Program } from '../Program';\nimport type { IRenderingContext } from '../../IRenderingContext';\nimport type { IGLUniformData } from '../GLProgram';\nimport { GLProgram } from '../GLProgram';\nimport { compileShader } from './compileShader';\nimport { defaultValue } from './defaultValue';\nimport { getAttributeData } from './getAttributeData';\nimport { getUniformData } from './getUniformData';\nimport { logProgramError } from './logProgramError';\n\n/**\n * generates a WebGL Program object from a high level Pixi Program.\n * @param gl - a rendering context on which to generate the program\n * @param program - the high level Pixi Program.\n */\nexport function generateProgram(gl: IRenderingContext, program: Program): GLProgram\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertexSrc);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragmentSrc);\n\n    const webGLProgram = gl.createProgram();\n\n    gl.attachShader(webGLProgram, glVertShader);\n    gl.attachShader(webGLProgram, glFragShader);\n\n    gl.linkProgram(webGLProgram);\n\n    if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS))\n    {\n        logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n    }\n\n    program.attributeData = getAttributeData(webGLProgram, gl);\n    program.uniformData = getUniformData(webGLProgram, gl);\n\n    // GLSL 1.00: bind attributes sorted by name in ascending order\n    // GLSL 3.00: don't change the attribute locations that where chosen by the compiler\n    //            or assigned by the layout specifier in the shader source code\n    if (!(/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m).test(program.vertexSrc))\n    {\n        const keys = Object.keys(program.attributeData);\n\n        keys.sort((a, b) => (a > b) ? 1 : -1); // eslint-disable-line no-confusing-arrow\n\n        for (let i = 0; i < keys.length; i++)\n        {\n            program.attributeData[keys[i]].location = i;\n\n            gl.bindAttribLocation(webGLProgram, i, keys[i]);\n        }\n\n        gl.linkProgram(webGLProgram);\n    }\n\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    const uniformData: {[key: string]: IGLUniformData} = {};\n\n    for (const i in program.uniformData)\n    {\n        const data = program.uniformData[i];\n\n        uniformData[i] = {\n            location: gl.getUniformLocation(webGLProgram, i),\n            value: defaultValue(data.type, data.size),\n        };\n    }\n\n    const glProgram = new GLProgram(webGLProgram, uniformData);\n\n    return glProgram;\n}\n","import type { IAttributeData } from '../Program';\nimport { mapSize } from './mapSize';\nimport { mapType } from './mapType';\n\n/**\n * returns the attribute data from the program\n * @private\n * @param {WebGLProgram} [program] - the WebGL program\n * @param {WebGLRenderingContext} [gl] - the WebGL context\n * @returns {object} the attribute data for this program\n */\nexport function getAttributeData(program: WebGLProgram, gl: WebGLRenderingContextBase): {[key: string]: IAttributeData}\n{\n    const attributes: {[key: string]: IAttributeData} = {};\n\n    const totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let i = 0; i < totalAttributes; i++)\n    {\n        const attribData = gl.getActiveAttrib(program, i);\n\n        if (attribData.name.indexOf('gl_') === 0)\n        {\n            continue;\n        }\n\n        const type = mapType(gl, attribData.type);\n        const data = {\n            type,\n            name: attribData.name,\n            size: mapSize(type),\n            location: gl.getAttribLocation(program, attribData.name),\n        };\n\n        attributes[attribData.name] = data;\n    }\n\n    return attributes;\n}\n","import type { IUniformData } from '../Program';\nimport { defaultValue } from './defaultValue';\nimport { mapType } from './mapType';\n\n/**\n * returns the uniform data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUniformData(program: WebGLProgram, gl: WebGLRenderingContextBase): {[key: string]: IUniformData}\n{\n    const uniforms: {[key: string]: IUniformData} = {};\n\n    const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < totalUniforms; i++)\n    {\n        const uniformData = gl.getActiveUniform(program, i);\n        const name = uniformData.name.replace(/\\[.*?\\]$/, '');\n\n        const isArray = !!(uniformData.name.match(/\\[.*?\\]$/));\n\n        const type = mapType(gl, uniformData.type);\n\n        uniforms[name] = {\n            name,\n            index: i,\n            type,\n            size: uniformData.size,\n            isArray,\n            value: defaultValue(type, uniformData.size),\n        };\n    }\n\n    return uniforms;\n}\n","import type { GLProgram } from './GLProgram';\nimport { generateUniformsSync, unsafeEvalSupported } from './utils';\n\nimport type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { IRenderingContext } from '../IRenderingContext';\nimport type { Shader } from './Shader';\nimport type { Program } from './Program';\nimport type { UniformGroup } from './UniformGroup';\nimport type { Dict } from '@pixi/utils';\nimport type { UniformsSyncCallback } from './utils';\nimport { generateUniformBufferSync } from './utils/generateUniformBufferSync';\n\nimport { generateProgram } from './utils/generateProgram';\n\nlet UID = 0;\n// default sync data so we don't create a new one each time!\nconst defaultSyncData = { textureCount: 0, uboCount: 0 };\n\n/**\n * System plugin to the renderer to manage shaders.\n * @memberof PIXI\n */\nexport class ShaderSystem implements ISystem\n{\n    /**\n     * The current WebGL rendering context.\n     * @member {WebGLRenderingContext}\n     */\n    protected gl: IRenderingContext;\n\n    public shader: Shader;\n    public program: Program;\n    public id: number;\n    public destroyed = false;\n\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    private cache: Dict<UniformsSyncCallback>;\n    private _uboCache: Dict<{size: number, syncFunc: UniformsSyncCallback}>;\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        // Validation check that this environment support `new Function`\n        this.systemCheck();\n\n        this.gl = null;\n\n        this.shader = null;\n        this.program = null;\n\n        this.cache = {};\n        this._uboCache = {};\n\n        this.id = UID++;\n    }\n\n    /**\n     * Overrideable function by `@pixi/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                + 'please use @pixi/unsafe-eval module to enable support.');\n        }\n    }\n\n    protected contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n        this.reset();\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter.\n     * @param shader - the new shader\n     * @param dontSync - false if the shader should automatically sync its uniforms.\n     * @returns the glProgram that belongs to the shader.\n     */\n    bind(shader: Shader, dontSync?: boolean): GLProgram\n    {\n        shader.disposeRunner.add(this);\n\n        shader.uniforms.globals = this.renderer.globalUniforms;\n\n        const program = shader.program;\n        const glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateProgram(shader);\n\n        this.shader = shader;\n\n        // TODO - some current Pixi plugins bypass this.. so it not safe to use yet..\n        if (this.program !== program)\n        {\n            this.program = program;\n            this.gl.useProgram(glProgram.program);\n        }\n\n        if (!dontSync)\n        {\n            defaultSyncData.textureCount = 0;\n            defaultSyncData.uboCount = 0;\n\n            this.syncUniformGroup(shader.uniformGroup, defaultSyncData);\n        }\n\n        return glProgram;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     * @param uniforms - the uniforms values that be applied to the current shader\n     */\n    setUniforms(uniforms: Dict<any>): void\n    {\n        const shader = this.shader.program;\n        const glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];\n\n        shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);\n    }\n\n    /* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n    /**\n     * Syncs uniforms on the group\n     * @param group - the uniform group to sync\n     * @param syncData - this is data that is passed to the sync function and any nested sync functions\n     */\n    syncUniformGroup(group: UniformGroup, syncData?: any): void\n    {\n        const glProgram = this.getGlProgram();\n\n        if (!group.static || group.dirtyId !== glProgram.uniformDirtyGroups[group.id])\n        {\n            glProgram.uniformDirtyGroups[group.id] = group.dirtyId;\n\n            this.syncUniforms(group, glProgram, syncData);\n        }\n    }\n\n    /**\n     * Overrideable by the @pixi/unsafe-eval package to use static syncUniforms instead.\n     * @param group\n     * @param glProgram\n     * @param syncData\n     */\n    syncUniforms(group: UniformGroup, glProgram: GLProgram, syncData: any): void\n    {\n        const syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);\n\n        syncFunc(glProgram.uniformData, group.uniforms, this.renderer, syncData);\n    }\n\n    createSyncGroups(group: UniformGroup): UniformsSyncCallback\n    {\n        const id = this.getSignature(group, this.shader.program.uniformData, 'u');\n\n        if (!this.cache[id])\n        {\n            this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData);\n        }\n\n        group.syncUniforms[this.shader.program.id] = this.cache[id];\n\n        return group.syncUniforms[this.shader.program.id];\n    }\n\n    /**\n     * Syncs uniform buffers\n     * @param group - the uniform buffer group to sync\n     * @param name - the name of the uniform buffer\n     */\n    syncUniformBufferGroup(group: UniformGroup, name?: string)\n    {\n        const glProgram = this.getGlProgram();\n\n        if (!group.static || group.dirtyId !== 0 || !glProgram.uniformGroups[group.id])\n        {\n            group.dirtyId = 0;\n\n            const syncFunc = glProgram.uniformGroups[group.id]\n                || this.createSyncBufferGroup(group, glProgram, name);\n\n            // TODO wrap update in a cache??\n            group.buffer.update();\n\n            syncFunc(glProgram.uniformData,\n                group.uniforms,\n                this.renderer,\n                defaultSyncData,\n                group.buffer\n            );\n        }\n\n        this.renderer.buffer.bindBufferBase(group.buffer, glProgram.uniformBufferBindings[name]);\n    }\n\n    /**\n     * Will create a function that uploads a uniform buffer using the STD140 standard.\n     * The upload function will then be cached for future calls\n     * If a group is manually managed, then a simple upload function is generated\n     * @param group - the uniform buffer group to sync\n     * @param glProgram - the gl program to attach the uniform bindings to\n     * @param name - the name of the uniform buffer (must exist on the shader)\n     */\n    protected createSyncBufferGroup(group: UniformGroup, glProgram: GLProgram, name: string): UniformsSyncCallback\n    {\n        const { gl } = this.renderer;\n\n        this.renderer.buffer.bind(group.buffer);\n\n        // bind them...\n        const uniformBlockIndex = this.gl.getUniformBlockIndex(glProgram.program, name);\n\n        glProgram.uniformBufferBindings[name] = this.shader.uniformBindCount;\n\n        gl.uniformBlockBinding(glProgram.program, uniformBlockIndex, this.shader.uniformBindCount);\n\n        this.shader.uniformBindCount++;\n\n        const id = this.getSignature(group, this.shader.program.uniformData, 'ubo');\n\n        let uboData = this._uboCache[id];\n\n        if (!uboData)\n        {\n            uboData = this._uboCache[id] = generateUniformBufferSync(group, this.shader.program.uniformData);\n        }\n\n        if (group.autoManage)\n        {\n            const data = new Float32Array(uboData.size / 4);\n\n            group.buffer.update(data);\n        }\n\n        glProgram.uniformGroups[group.id] = uboData.syncFunc;\n\n        return glProgram.uniformGroups[group.id];\n    }\n\n    /**\n     * Takes a uniform group and data and generates a unique signature for them.\n     * @param group - The uniform group to get signature of\n     * @param group.uniforms\n     * @param uniformData - Uniform information generated by the shader\n     * @param preFix\n     * @returns Unique signature of the uniform group\n     */\n    private getSignature(group: {uniforms: Dict<any>}, uniformData: Dict<any>, preFix: string): string\n    {\n        const uniforms = group.uniforms;\n\n        const strings = [`${preFix}-`];\n\n        for (const i in uniforms)\n        {\n            strings.push(i);\n\n            if (uniformData[i])\n            {\n                strings.push(uniformData[i].type);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /**\n     * Returns the underlying GLShade rof the currently bound shader.\n     *\n     * This can be handy for when you to have a little more control over the setting of your uniforms.\n     * @returns The glProgram for the currently bound Shader for this context\n     */\n    getGlProgram(): GLProgram\n    {\n        if (this.shader)\n        {\n            return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];\n        }\n\n        return null;\n    }\n\n    /**\n     * Generates a glProgram version of the Shader provided.\n     * @param shader - The shader that the glProgram will be based on.\n     * @returns A shiny new glProgram!\n     */\n    generateProgram(shader: Shader): GLProgram\n    {\n        const gl = this.gl;\n        const program = shader.program;\n\n        const glProgram = generateProgram(gl, program);\n\n        program.glPrograms[this.renderer.CONTEXT_UID] = glProgram;\n\n        return glProgram;\n    }\n\n    /** Resets ShaderSystem state, does not affect WebGL state. */\n    reset(): void\n    {\n        this.program = null;\n        this.shader = null;\n    }\n\n    /**\n     * Disposes shader.\n     * If disposing one equals with current shader, set current as null.\n     * @param shader - Shader object\n     */\n    disposeShader(shader: Shader): void\n    {\n        if (this.shader === shader)\n        {\n            this.shader = null;\n        }\n    }\n\n    /** Destroys this System and removes all its textures. */\n    destroy(): void\n    {\n        this.renderer = null;\n        // TODO implement destroy method for ShaderSystem\n        this.destroyed = true;\n    }\n}\n","import { mapWebGLBlendModesToPixi } from './utils/mapWebGLBlendModesToPixi';\nimport { State } from './State';\nimport { BLEND_MODES } from '@pixi/constants';\n\nimport type { ISystem } from '../ISystem';\nimport type { IRenderingContext } from '../IRenderingContext';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * System plugin to the renderer to manage WebGL state machines.\n * @memberof PIXI\n */\nexport class StateSystem implements ISystem\n{\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default PIXI.BLEND_MODES.NONE\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gl: IRenderingContext;\n\n    protected blendModes: number[][];\n\n    /**\n     * Collection of calls\n     * @member {Function[]}\n     */\n    protected readonly map: Array<(value: boolean) => void>;\n\n    /**\n     * Collection of check calls\n     * @member {Function[]}\n     */\n    protected readonly checks: Array<(system: this, state: State) => void>;\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.gl = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = BLEND_MODES.NONE;\n\n        this._blendEq = false;\n\n        // map functions for when we set state..\n        this.map = [];\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n        this.map[DEPTH_MASK] = this.setDepthMask;\n\n        this.checks = [];\n\n        this.defaultState = new State();\n        this.defaultState.blend = true;\n    }\n\n    contextChange(gl: IRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.blendModes = mapWebGLBlendModesToPixi(gl);\n\n        this.set(this.defaultState);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     * @param {*} state - The state to set.\n     */\n    set(state: State): void\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown.\n     * @param {*} state - The state to set\n     */\n    forceState(state: State): void\n    {\n        state = state || this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Sets whether to enable or disable blending.\n     * @param value - Turn on or off WebGl blending.\n     */\n    setBlend(value: boolean): void\n    {\n        this.updateCheck(StateSystem.checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets whether to enable or disable polygon offset fill.\n     * @param value - Turn on or off webgl polygon offset testing.\n     */\n    setOffset(value: boolean): void\n    {\n        this.updateCheck(StateSystem.checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     * @param value - Turn on or off webgl depth testing.\n     */\n    setDepthTest(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable depth mask.\n     * @param value - Turn on or off webgl depth mask.\n     */\n    setDepthMask(value: boolean): void\n    {\n        this.gl.depthMask(value);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    setCullFace(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    setFrontFace(value: boolean): void\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     * @param {number} value - The blend mode to set to.\n     */\n    setBlendMode(value: number): void\n    {\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModes[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    setPolygonOffset(value: number, scale: number): void\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    // used\n    /** Resets all the logic and disables the VAOs. */\n    reset(): void\n    {\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(this.defaultState);\n\n        this._blendEq = true;\n        this.blendMode = -1;\n        this.setBlendMode(0);\n    }\n\n    /**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */\n    updateCheck(func: (system: this, state: State) => void, value: boolean): void\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static checkBlendMode(system: StateSystem, state: State): void\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static checkPolygonOffset(system: StateSystem, state: State): void\n    {\n        system.setPolygonOffset(1, state.polygonOffset);\n    }\n\n    /**\n     * @ignore\n     */\n    destroy(): void\n    {\n        this.gl = null;\n    }\n}\n","import { BLEND_MODES } from '@pixi/constants';\n\n/**\n * Maps gl blend combinations to WebGL.\n * @memberof PIXI\n * @function mapWebGLBlendModesToPixi\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @param {number[][]} [array=[]] - The array to output into.\n * @returns {number[][]} Mapped modes.\n */\nexport function mapWebGLBlendModesToPixi(gl: WebGLRenderingContextBase, array: number[][] = []): number[][]\n{\n    // TODO - premultiply alpha would be different.\n    // add a boolean for that!\n    array[BLEND_MODES.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.ADD] = [gl.ONE, gl.ONE];\n    array[BLEND_MODES.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.SCREEN] = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.OVERLAY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DARKEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.LIGHTEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.COLOR_DODGE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.COLOR_BURN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.HARD_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.SOFT_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DIFFERENCE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.EXCLUSION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.HUE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.SATURATION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.COLOR] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.LUMINOSITY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.NONE] = [0, 0];\n\n    // not-premultiplied blend modes\n    array[BLEND_MODES.NORMAL_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.ADD_NPM] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n    array[BLEND_MODES.SCREEN_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n\n    // composite operations\n    array[BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];\n    array[BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];\n    array[BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];\n    array[BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];\n    array[BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];\n    array[BLEND_MODES.XOR] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n\n    // SUBTRACT from flash\n    array[BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];\n\n    return array;\n}\n","import { GC_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n\nimport type { ISystem } from '../ISystem';\nimport type { Renderer } from '../Renderer';\nimport type { Texture } from './Texture';\nimport type { RenderTexture } from '../renderTexture/RenderTexture';\n\nexport interface IUnloadableTexture\n{\n    _texture: Texture | RenderTexture;\n    children: IUnloadableTexture[];\n}\n\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof PIXI\n */\nexport class TextureGCSystem implements ISystem\n{\n    /**\n     * Count\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Check count\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle time, in seconds\n     * @see PIXI.settings.GC_MAX_IDLE\n     */\n    public maxIdle: number;\n\n    /**\n     * Maximum number of item to check\n     * @see PIXI.settings.GC_MAX_CHECK_COUNT\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode\n     * @see PIXI.settings.GC_MODE\n     */\n    public mode: GC_MODES;\n    private renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n        this.maxIdle = settings.GC_MAX_IDLE;\n        this.checkCountMax = settings.GC_MAX_CHECK_COUNT;\n        this.mode = settings.GC_MODE;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    protected postrender(): void\n    {\n        if (!this.renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (this.mode === GC_MODES.MANUAL)\n        {\n            return;\n        }\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    run(): void\n    {\n        const tm = this.renderer.texture;\n        const managedTextures =  tm.managedTextures;\n        let wasRemoved = false;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // only supports non generated textures at the moment!\n            if (!(texture as any).framebuffer && this.count - texture.touched > this.maxIdle)\n            {\n                tm.destroyTexture(texture, true);\n                managedTextures[i] = null;\n                wasRemoved = true;\n            }\n        }\n\n        if (wasRemoved)\n        {\n            let j = 0;\n\n            for (let i = 0; i < managedTextures.length; i++)\n            {\n                if (managedTextures[i] !== null)\n                {\n                    managedTextures[j++] = managedTextures[i];\n                }\n            }\n\n            managedTextures.length = j;\n        }\n    }\n\n    /**\n     * Removes all the textures within the specified displayObject and its children from the GPU\n     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\n     */\n    unload(displayObject: IUnloadableTexture): void\n    {\n        const tm = this.renderer.texture;\n        const texture = displayObject._texture as RenderTexture;\n\n        // only destroy non generated textures\n        if (texture && !texture.framebuffer)\n        {\n            tm.destroyTexture(texture);\n        }\n\n        for (let i = displayObject.children.length - 1; i >= 0; i--)\n        {\n            this.unload(displayObject.children[i]);\n        }\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n","import { FORMATS, TYPES } from '@pixi/constants';\n\n/**\n * Internal texture for WebGL context.\n * @memberof PIXI\n */\nexport class GLTexture\n{\n    /** The WebGL texture. */\n    public texture: WebGLTexture;\n\n    /** Width of texture that was used in texImage2D. */\n    public width: number;\n\n    /** Height of texture that was used in texImage2D. */\n    public height: number;\n\n    /** Whether mip levels has to be generated. */\n    public mipmap: boolean;\n\n    /** WrapMode copied from baseTexture. */\n    public wrapMode: number;\n\n    /** Type copied from baseTexture. */\n    public type: number;\n\n    /** Type copied from baseTexture. */\n    public internalFormat: number;\n\n    /** Type of sampler corresponding to this texture. See {@link PIXI.SAMPLER_TYPES} */\n    public samplerType: number;\n\n    /** Texture contents dirty flag. */\n    dirtyId: number;\n\n    /** Texture style dirty flag. */\n    dirtyStyleId: number;\n\n    constructor(texture: WebGLTexture)\n    {\n        this.texture = texture;\n        this.width = -1;\n        this.height = -1;\n        this.dirtyId = -1;\n        this.dirtyStyleId = -1;\n        this.mipmap = false;\n        this.wrapMode = 33071;\n        this.type = TYPES.UNSIGNED_BYTE;\n        this.internalFormat = FORMATS.RGBA;\n\n        this.samplerType = 0;\n    }\n}\n","import { mapTypeAndFormatToInternalFormat } from './utils/mapTypeAndFormatToInternalFormat';\nimport { BaseTexture } from './BaseTexture';\nimport { GLTexture } from './GLTexture';\nimport { removeItems } from '@pixi/utils';\nimport { MIPMAP_MODES, WRAP_MODES, SCALE_MODES, TYPES, SAMPLER_TYPES } from '@pixi/constants';\n\nimport type { ISystem } from '../ISystem';\nimport type { Texture } from './Texture';\nimport type { IRenderingContext } from '../IRenderingContext';\nimport type { Renderer } from '../Renderer';\n\n/**\n * System plugin to the renderer to manage textures.\n * @memberof PIXI\n */\nexport class TextureSystem implements ISystem\n{\n    /**\n     * Bound textures.\n     * @readonly\n     */\n    public boundTextures: BaseTexture[];\n\n    /**\n     * List of managed textures.\n     * @readonly\n     */\n    public managedTextures: Array<BaseTexture>;\n\n    /** Whether glTexture with int/uint sampler type was uploaded. */\n    protected hasIntegerTextures: boolean;\n    protected CONTEXT_UID: number;\n    protected gl: IRenderingContext;\n    protected internalFormats: { [type: number]: { [format: number]: number } };\n    protected webGLVersion: number;\n\n    /**\n     * BaseTexture value that shows that we don't know what is bound.\n     * @readonly\n     */\n    protected unknownTexture: BaseTexture;\n\n    /**\n     * Did someone temper with textures state? We'll overwrite them when we need to unbind something.\n     * @private\n     */\n    protected _unknownBoundTextures: boolean;\n\n    /**\n     * Current location.\n     * @readonly\n     */\n    currentLocation: number;\n    emptyTextures: {[key: number]: GLTexture};\n    private renderer: Renderer;\n\n    /**\n     * @param renderer - The renderer this system works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n\n        // TODO set to max textures...\n        this.boundTextures = [];\n        this.currentLocation = -1;\n        this.managedTextures = [];\n\n        this._unknownBoundTextures = false;\n        this.unknownTexture = new BaseTexture();\n\n        this.hasIntegerTextures = false;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    contextChange(): void\n    {\n        const gl = this.gl = this.renderer.gl;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n\n        this.webGLVersion = this.renderer.context.webGLVersion;\n\n        this.internalFormats = mapTypeAndFormatToInternalFormat(gl);\n\n        const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\n        this.boundTextures.length = maxTextures;\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            this.boundTextures[i] = null;\n        }\n\n        // TODO move this.. to a nice make empty textures class..\n        this.emptyTextures = {};\n\n        const emptyTexture2D = new GLTexture(gl.createTexture());\n\n        gl.bindTexture(gl.TEXTURE_2D, emptyTexture2D.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));\n\n        this.emptyTextures[gl.TEXTURE_2D] = emptyTexture2D;\n        this.emptyTextures[gl.TEXTURE_CUBE_MAP] = new GLTexture(gl.createTexture());\n\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.emptyTextures[gl.TEXTURE_CUBE_MAP].texture);\n\n        for (let i = 0; i < 6; i++)\n        {\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        }\n\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        for (let i = 0; i < this.boundTextures.length; i++)\n        {\n            this.bind(null, i);\n        }\n    }\n\n    /**\n     * Bind a texture to a specific location\n     *\n     * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`\n     * @param texture - Texture to bind\n     * @param [location=0] - Location to bind at\n     */\n    bind(texture: Texture | BaseTexture, location = 0): void\n    {\n        const { gl } = this;\n\n        texture = texture?.castToBaseTexture();\n\n        // cannot bind partial texture\n        // TODO: report a warning\n        if (texture && texture.valid && !texture.parentTextureArray)\n        {\n            texture.touched = this.renderer.textureGC.count;\n\n            const glTexture = texture._glTextures[this.CONTEXT_UID] || this.initTexture(texture);\n\n            if (this.boundTextures[location] !== texture)\n            {\n                if (this.currentLocation !== location)\n                {\n                    this.currentLocation = location;\n                    gl.activeTexture(gl.TEXTURE0 + location);\n                }\n\n                gl.bindTexture(texture.target, glTexture.texture);\n            }\n\n            if (glTexture.dirtyId !== texture.dirtyId)\n            {\n                if (this.currentLocation !== location)\n                {\n                    this.currentLocation = location;\n                    gl.activeTexture(gl.TEXTURE0 + location);\n                }\n                this.updateTexture(texture);\n            }\n            else if (glTexture.dirtyStyleId !== texture.dirtyStyleId)\n            {\n                this.updateTextureStyle(texture);\n            }\n\n            this.boundTextures[location] = texture;\n        }\n        else\n        {\n            if (this.currentLocation !== location)\n            {\n                this.currentLocation = location;\n                gl.activeTexture(gl.TEXTURE0 + location);\n            }\n\n            gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[gl.TEXTURE_2D].texture);\n            this.boundTextures[location] = null;\n        }\n    }\n\n    /** Resets texture location and bound textures Actual `bind(null, i)` calls will be performed at next `unbind()` call */\n    reset(): void\n    {\n        this._unknownBoundTextures = true;\n        this.hasIntegerTextures = false;\n        this.currentLocation = -1;\n\n        for (let i = 0; i < this.boundTextures.length; i++)\n        {\n            this.boundTextures[i] = this.unknownTexture;\n        }\n    }\n\n    /**\n     * Unbind a texture.\n     * @param texture - Texture to bind\n     */\n    unbind(texture?: BaseTexture): void\n    {\n        const { gl, boundTextures } = this;\n\n        if (this._unknownBoundTextures)\n        {\n            this._unknownBoundTextures = false;\n            // someone changed webGL state,\n            // we have to be sure that our texture does not appear in multi-texture renderer samplers\n            for (let i = 0; i < boundTextures.length; i++)\n            {\n                if (boundTextures[i] === this.unknownTexture)\n                {\n                    this.bind(null, i);\n                }\n            }\n        }\n\n        for (let i = 0; i < boundTextures.length; i++)\n        {\n            if (boundTextures[i] === texture)\n            {\n                if (this.currentLocation !== i)\n                {\n                    gl.activeTexture(gl.TEXTURE0 + i);\n                    this.currentLocation = i;\n                }\n\n                gl.bindTexture(texture.target, this.emptyTextures[texture.target].texture);\n                boundTextures[i] = null;\n            }\n        }\n    }\n\n    /**\n     * Ensures that current boundTextures all have FLOAT sampler type,\n     * see {@link PIXI.SAMPLER_TYPES} for explanation.\n     * @param maxTextures - number of locations to check\n     */\n    ensureSamplerType(maxTextures: number): void\n    {\n        const { boundTextures, hasIntegerTextures, CONTEXT_UID } = this;\n\n        if (!hasIntegerTextures)\n        {\n            return;\n        }\n\n        for (let i = maxTextures - 1; i >= 0; --i)\n        {\n            const tex = boundTextures[i];\n\n            if (tex)\n            {\n                const glTexture = tex._glTextures[CONTEXT_UID];\n\n                if (glTexture.samplerType !== SAMPLER_TYPES.FLOAT)\n                {\n                    this.renderer.texture.unbind(tex);\n                }\n            }\n        }\n    }\n\n    /**\n     * Initialize a texture\n     * @private\n     * @param texture - Texture to initialize\n     */\n    initTexture(texture: BaseTexture): GLTexture\n    {\n        const glTexture = new GLTexture(this.gl.createTexture());\n\n        // guarantee an update..\n        glTexture.dirtyId = -1;\n\n        texture._glTextures[this.CONTEXT_UID] = glTexture;\n\n        this.managedTextures.push(texture);\n        texture.on('dispose', this.destroyTexture, this);\n\n        return glTexture;\n    }\n\n    initTextureType(texture: BaseTexture, glTexture: GLTexture): void\n    {\n        glTexture.internalFormat = this.internalFormats[texture.type]?.[texture.format] ?? texture.format;\n\n        if (this.webGLVersion === 2 && texture.type === TYPES.HALF_FLOAT)\n        {\n            // TYPES.HALF_FLOAT is WebGL1 HALF_FLOAT_OES\n            // we have to convert it to WebGL HALF_FLOAT\n            glTexture.type = this.gl.HALF_FLOAT;\n        }\n        else\n        {\n            glTexture.type = texture.type;\n        }\n    }\n\n    /**\n     * Update a texture\n     * @private\n     * @param {PIXI.BaseTexture} texture - Texture to initialize\n     */\n    updateTexture(texture: BaseTexture): void\n    {\n        const glTexture = texture._glTextures[this.CONTEXT_UID];\n\n        if (!glTexture)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n\n        this.initTextureType(texture, glTexture);\n\n        if (texture.resource && texture.resource.upload(renderer, texture, glTexture))\n        {\n            // texture is uploaded, dont do anything!\n            if (glTexture.samplerType !== SAMPLER_TYPES.FLOAT)\n            {\n                this.hasIntegerTextures = true;\n            }\n        }\n        else\n        {\n            // default, renderTexture-like logic\n            const width = texture.realWidth;\n            const height = texture.realHeight;\n            const gl = renderer.gl;\n\n            if (glTexture.width !== width\n                || glTexture.height !== height\n                || glTexture.dirtyId < 0)\n            {\n                glTexture.width = width;\n                glTexture.height = height;\n\n                gl.texImage2D(texture.target, 0,\n                    glTexture.internalFormat,\n                    width,\n                    height,\n                    0,\n                    texture.format,\n                    glTexture.type,\n                    null);\n            }\n        }\n\n        // lets only update what changes..\n        if (texture.dirtyStyleId !== glTexture.dirtyStyleId)\n        {\n            this.updateTextureStyle(texture);\n        }\n        glTexture.dirtyId = texture.dirtyId;\n    }\n\n    /**\n     * Deletes the texture from WebGL\n     * @private\n     * @param texture - the texture to destroy\n     * @param [skipRemove=false] - Whether to skip removing the texture from the TextureManager.\n     */\n    destroyTexture(texture: BaseTexture | Texture, skipRemove?: boolean): void\n    {\n        const { gl } = this;\n\n        texture = texture.castToBaseTexture();\n\n        if (texture._glTextures[this.CONTEXT_UID])\n        {\n            this.unbind(texture);\n\n            gl.deleteTexture(texture._glTextures[this.CONTEXT_UID].texture);\n            texture.off('dispose', this.destroyTexture, this);\n\n            delete texture._glTextures[this.CONTEXT_UID];\n\n            if (!skipRemove)\n            {\n                const i = this.managedTextures.indexOf(texture);\n\n                if (i !== -1)\n                {\n                    removeItems(this.managedTextures, i, 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * Update texture style such as mipmap flag\n     * @private\n     * @param {PIXI.BaseTexture} texture - Texture to update\n     */\n    updateTextureStyle(texture: BaseTexture): void\n    {\n        const glTexture = texture._glTextures[this.CONTEXT_UID];\n\n        if (!glTexture)\n        {\n            return;\n        }\n\n        if ((texture.mipmap === MIPMAP_MODES.POW2 || this.webGLVersion !== 2) && !texture.isPowerOfTwo)\n        {\n            glTexture.mipmap = false;\n        }\n        else\n        {\n            glTexture.mipmap = texture.mipmap >= 1;\n        }\n\n        if (this.webGLVersion !== 2 && !texture.isPowerOfTwo)\n        {\n            glTexture.wrapMode = WRAP_MODES.CLAMP;\n        }\n        else\n        {\n            glTexture.wrapMode = texture.wrapMode;\n        }\n\n        if (texture.resource && texture.resource.style(this.renderer, texture, glTexture))\n        {\n            // style is set, dont do anything!\n        }\n        else\n        {\n            this.setStyle(texture, glTexture);\n        }\n\n        glTexture.dirtyStyleId = texture.dirtyStyleId;\n    }\n\n    /**\n     * Set style for texture\n     * @private\n     * @param texture - Texture to update\n     * @param glTexture\n     */\n    setStyle(texture: BaseTexture, glTexture: GLTexture): void\n    {\n        const gl = this.gl;\n\n        if (glTexture.mipmap && texture.mipmap !== MIPMAP_MODES.ON_MANUAL)\n        {\n            gl.generateMipmap(texture.target);\n        }\n\n        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_S, glTexture.wrapMode);\n        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_T, glTexture.wrapMode);\n\n        if (glTexture.mipmap)\n        {\n            /* eslint-disable max-len */\n            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n            /* eslint-disable max-len */\n\n            const anisotropicExt = this.renderer.context.extensions.anisotropicFiltering;\n\n            if (anisotropicExt && texture.anisotropicLevel > 0 && texture.scaleMode === SCALE_MODES.LINEAR)\n            {\n                const level = Math.min(texture.anisotropicLevel, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n\n                gl.texParameterf(texture.target, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n            }\n        }\n        else\n        {\n            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n        }\n\n        gl.texParameteri(texture.target, gl.TEXTURE_MAG_FILTER, texture.scaleMode === SCALE_MODES.LINEAR ? gl.LINEAR : gl.NEAREST);\n    }\n\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n","import { FORMATS, TYPES } from '@pixi/constants';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @memberof PIXI\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapTypeAndFormatToInternalFormat(gl: WebGLRenderingContextBase):\n{ [type: number]: { [format: number]: number } }\n{\n    let table;\n\n    if ('WebGL2RenderingContext' in globalThis && gl instanceof globalThis.WebGL2RenderingContext)\n    {\n        table = {\n            [TYPES.UNSIGNED_BYTE]: {\n                [FORMATS.RGBA]: gl.RGBA8,\n                [FORMATS.RGB]: gl.RGB8,\n                [FORMATS.RG]: gl.RG8,\n                [FORMATS.RED]: gl.R8,\n                [FORMATS.RGBA_INTEGER]: gl.RGBA8UI,\n                [FORMATS.RGB_INTEGER]: gl.RGB8UI,\n                [FORMATS.RG_INTEGER]: gl.RG8UI,\n                [FORMATS.RED_INTEGER]: gl.R8UI,\n                [FORMATS.ALPHA]: gl.ALPHA,\n                [FORMATS.LUMINANCE]: gl.LUMINANCE,\n                [FORMATS.LUMINANCE_ALPHA]: gl.LUMINANCE_ALPHA,\n            },\n            [TYPES.BYTE]: {\n                [FORMATS.RGBA]: gl.RGBA8_SNORM,\n                [FORMATS.RGB]: gl.RGB8_SNORM,\n                [FORMATS.RG]: gl.RG8_SNORM,\n                [FORMATS.RED]: gl.R8_SNORM,\n                [FORMATS.RGBA_INTEGER]: gl.RGBA8I,\n                [FORMATS.RGB_INTEGER]: gl.RGB8I,\n                [FORMATS.RG_INTEGER]: gl.RG8I,\n                [FORMATS.RED_INTEGER]: gl.R8I,\n            },\n            [TYPES.UNSIGNED_SHORT]: {\n                [FORMATS.RGBA_INTEGER]: gl.RGBA16UI,\n                [FORMATS.RGB_INTEGER]: gl.RGB16UI,\n                [FORMATS.RG_INTEGER]: gl.RG16UI,\n                [FORMATS.RED_INTEGER]: gl.R16UI,\n                [FORMATS.DEPTH_COMPONENT]: gl.DEPTH_COMPONENT16,\n            },\n            [TYPES.SHORT]: {\n                [FORMATS.RGBA_INTEGER]: gl.RGBA16I,\n                [FORMATS.RGB_INTEGER]: gl.RGB16I,\n                [FORMATS.RG_INTEGER]: gl.RG16I,\n                [FORMATS.RED_INTEGER]: gl.R16I,\n            },\n            [TYPES.UNSIGNED_INT]: {\n                [FORMATS.RGBA_INTEGER]: gl.RGBA32UI,\n                [FORMATS.RGB_INTEGER]: gl.RGB32UI,\n                [FORMATS.RG_INTEGER]: gl.RG32UI,\n                [FORMATS.RED_INTEGER]: gl.R32UI,\n                [FORMATS.DEPTH_COMPONENT]: gl.DEPTH_COMPONENT24,\n            },\n            [TYPES.INT]: {\n                [FORMATS.RGBA_INTEGER]: gl.RGBA32I,\n                [FORMATS.RGB_INTEGER]: gl.RGB32I,\n                [FORMATS.RG_INTEGER]: gl.RG32I,\n                [FORMATS.RED_INTEGER]: gl.R32I,\n            },\n            [TYPES.FLOAT]: {\n                [FORMATS.RGBA]: gl.RGBA32F,\n                [FORMATS.RGB]: gl.RGB32F,\n                [FORMATS.RG]: gl.RG32F,\n                [FORMATS.RED]: gl.R32F,\n                [FORMATS.DEPTH_COMPONENT]: gl.DEPTH_COMPONENT32F,\n            },\n            [TYPES.HALF_FLOAT]: {\n                [FORMATS.RGBA]: gl.RGBA16F,\n                [FORMATS.RGB]: gl.RGB16F,\n                [FORMATS.RG]: gl.RG16F,\n                [FORMATS.RED]: gl.R16F,\n            },\n            [TYPES.UNSIGNED_SHORT_5_6_5]: {\n                [FORMATS.RGB]: gl.RGB565,\n            },\n            [TYPES.UNSIGNED_SHORT_4_4_4_4]: {\n                [FORMATS.RGBA]: gl.RGBA4,\n            },\n            [TYPES.UNSIGNED_SHORT_5_5_5_1]: {\n                [FORMATS.RGBA]: gl.RGB5_A1,\n            },\n            [TYPES.UNSIGNED_INT_2_10_10_10_REV]: {\n                [FORMATS.RGBA]: gl.RGB10_A2,\n                [FORMATS.RGBA_INTEGER]: gl.RGB10_A2UI,\n            },\n            [TYPES.UNSIGNED_INT_10F_11F_11F_REV]: {\n                [FORMATS.RGB]: gl.R11F_G11F_B10F,\n            },\n            [TYPES.UNSIGNED_INT_5_9_9_9_REV]: {\n                [FORMATS.RGB]: gl.RGB9_E5,\n            },\n            [TYPES.UNSIGNED_INT_24_8]: {\n                [FORMATS.DEPTH_STENCIL]: gl.DEPTH24_STENCIL8,\n            },\n            [TYPES.FLOAT_32_UNSIGNED_INT_24_8_REV]: {\n                [FORMATS.DEPTH_STENCIL]: gl.DEPTH32F_STENCIL8,\n            },\n        };\n    }\n    else\n    {\n        table = {\n            [TYPES.UNSIGNED_BYTE]: {\n                [FORMATS.RGBA]: gl.RGBA,\n                [FORMATS.RGB]: gl.RGB,\n                [FORMATS.ALPHA]: gl.ALPHA,\n                [FORMATS.LUMINANCE]: gl.LUMINANCE,\n                [FORMATS.LUMINANCE_ALPHA]: gl.LUMINANCE_ALPHA,\n            },\n            [TYPES.UNSIGNED_SHORT_5_6_5]: {\n                [FORMATS.RGB]: gl.RGB,\n            },\n            [TYPES.UNSIGNED_SHORT_4_4_4_4]: {\n                [FORMATS.RGBA]: gl.RGBA,\n            },\n            [TYPES.UNSIGNED_SHORT_5_5_5_1]: {\n                [FORMATS.RGBA]: gl.RGBA,\n            },\n        };\n    }\n\n    return table;\n}\n","import { hex2string, hex2rgb, EventEmitter, deprecation } from '@pixi/utils';\nimport { Matrix, Rectangle } from '@pixi/math';\nimport { RENDERER_TYPE } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { RenderTexture } from './renderTexture/RenderTexture';\n\nimport type { SCALE_MODES, MSAA_QUALITY } from '@pixi/constants';\nimport type { ISystemConstructor } from './ISystem';\nimport type { IRenderingContext } from './IRenderingContext';\nimport type { IRenderableContainer, IRenderableObject } from './IRenderableObject';\n\nconst tempMatrix = new Matrix();\n\n/**\n * Renderer options supplied to constructor.\n * @memberof PIXI\n * @see PIXI.settings.RENDER_OPTIONS\n */\nexport interface IRendererOptions extends GlobalMixins.IRendererOptions\n{\n    /** The canvas to use as the view. If omitted, a new canvas will be created. */\n    view?: HTMLCanvasElement;\n    /**\n     * The width of the renderer's view.\n     * @default 800\n     */\n    width?: number;\n    /**\n     * The height of the renderer's view.\n     * @default 600\n     */\n    height?: number;\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @default PIXI.settings.RESOLUTION\n     */\n    resolution?: number;\n    /**\n     * Whether the CSS dimensions of the renderer's view should be resized automatically.\n     * @default false\n     */\n    autoDensity?: boolean;\n\n    /**\n     * The background color used to clear the canvas. It accepts hex numbers (e.g. `0xff0000`).\n     * @default 0x000000\n     */\n    backgroundColor?: number;\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @default 1\n     */\n    backgroundAlpha?: number;\n    /**\n     * Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n     * canvas needs to be opaque, possibly for performance reasons on some older devices.\n     * If you want to set transparency, please use `backgroundAlpha`.\n     *\n     * **WebGL Only:** When set to `'notMultiplied'`, the canvas' context attribute `alpha` will be\n     * set to `true` and `premultipliedAlpha` will be to `false`.\n     * @default true\n     */\n    useContextAlpha?: boolean | 'notMultiplied';\n    /**\n     * Use `backgroundAlpha` instead.\n     * @deprecated since 6.0.0\n     */\n    transparent?: boolean;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @default true\n     */\n    clearBeforeRender?: boolean;\n\n    /** **WebGL Only.** User-provided WebGL rendering context object. */\n    context?: IRenderingContext;\n    /**\n     * **WebGL Only.** Whether to enable anti-aliasing. This may affect performance.\n     * @default false\n     */\n    antialias?: boolean;\n    /**\n     * **WebGL Only.** A hint indicating what configuration of GPU is suitable for the WebGL context,\n     * can be `'default'`, `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     */\n    powerPreference?: WebGLPowerPreference;\n    /**\n     * **WebGL Only.** Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @default false\n     */\n    preserveDrawingBuffer?: boolean;\n}\n\nexport interface IRendererPlugins\n{\n    [key: string]: any;\n}\n\nexport interface IRendererRenderOptions\n{\n    renderTexture?: RenderTexture;\n    clear?: boolean;\n    transform?: Matrix;\n    skipUpdateTransform?: boolean;\n}\n\nexport interface IGenerateTextureOptions\n{\n    scaleMode?: SCALE_MODES;\n    resolution?: number;\n    region?: Rectangle;\n    multisample?: MSAA_QUALITY;\n}\n\n/**\n * The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}\n * and {@link PIXI.Renderer} which can be used for rendering a PixiJS scene.\n * @abstract\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n */\nexport abstract class AbstractRenderer extends EventEmitter\n{\n    public resolution: number;\n    public clearBeforeRender?: boolean;\n    public readonly options: IRendererOptions;\n    public readonly type: RENDERER_TYPE;\n    public readonly screen: Rectangle;\n    public readonly view: HTMLCanvasElement;\n    public readonly plugins: IRendererPlugins;\n    public readonly useContextAlpha: boolean | 'notMultiplied';\n    public readonly autoDensity: boolean;\n    public readonly preserveDrawingBuffer: boolean;\n\n    protected _backgroundColor: number;\n    protected _backgroundColorString: string;\n    _backgroundColorRgba: number[];\n    _lastObjectRendered: IRenderableObject;\n\n    /**\n     * @param type - The renderer type.\n     * @param {PIXI.IRendererOptions} [options] - The optional renderer parameters.\n     * @param {boolean} [options.antialias=false] -\n     *  **WebGL Only.** Whether to enable anti-aliasing. This may affect performance.\n     * @param {boolean} [options.autoDensity=false] -\n     *  Whether the CSS dimensions of the renderer's view should be resized automatically.\n     * @param {number} [options.backgroundAlpha=1] -\n     *  Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @param {number} [options.backgroundColor=0x000000] -\n     *  The background color used to clear the canvas. It accepts hex numbers (e.g. `0xff0000`).\n     * @param {boolean} [options.clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n     * @param {PIXI.IRenderingContext} [options.context] - **WebGL Only.** User-provided WebGL rendering context object.\n     * @param {number} [options.height=600] - The height of the renderer's view.\n     * @param {string} [options.powerPreference] -\n     *  **WebGL Only.** A hint indicating what configuration of GPU is suitable for the WebGL context,\n     *  can be `'default'`, `'high-performance'` or `'low-power'`.\n     *  Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     *  while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @param {boolean} [options.premultipliedAlpha=true] -\n     *  **WebGL Only.** Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n     * @param {boolean} [options.preserveDrawingBuffer=false] -\n     *  **WebGL Only.** Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     *  its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] -\n     *  The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.transparent] -\n     *  **Deprecated since 6.0.0, Use `backgroundAlpha` instead.** \\\n     *  `true` sets `backgroundAlpha` to `0`, `false` sets `backgroundAlpha` to `1`.\n     * @param {boolean|'notMultiplied'} [options.useContextAlpha=true] -\n     *  Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n     *  canvas needs to be opaque, possibly for performance reasons on some older devices.\n     *  If you want to set transparency, please use `backgroundAlpha`. \\\n     *  **WebGL Only:** When set to `'notMultiplied'`, the canvas' context attribute `alpha` will be\n     *  set to `true` and `premultipliedAlpha` will be to `false`.\n     * @param {HTMLCanvasElement} [options.view=null] -\n     *  The canvas to use as the view. If omitted, a new canvas will be created.\n     * @param {number} [options.width=800] - The width of the renderer's view.\n     */\n    constructor(type: RENDERER_TYPE = RENDERER_TYPE.UNKNOWN, options?: IRendererOptions)\n    {\n        super();\n\n        // Add the default render options\n        options = Object.assign({}, settings.RENDER_OPTIONS, options);\n\n        /**\n         * The supplied constructor options.\n         * @member {object}\n         * @readonly\n         */\n        this.options = options;\n\n        /**\n         * The type of the renderer.\n         * @member {number}\n         * @default PIXI.RENDERER_TYPE.UNKNOWN\n         * @see PIXI.RENDERER_TYPE\n         */\n        this.type = type;\n\n        /**\n         * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n         *\n         * Its safe to use as filterArea or hitArea for the whole stage.\n         * @member {PIXI.Rectangle}\n         */\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n\n        /**\n         * The canvas element that everything is drawn to.\n         * @member {HTMLCanvasElement}\n         */\n        this.view = options.view || settings.ADAPTER.createCanvas();\n\n        /**\n         * The resolution / device pixel ratio of the renderer.\n         * @member {number}\n         * @default PIXI.settings.RESOLUTION\n         */\n        this.resolution = options.resolution || settings.RESOLUTION;\n\n        /**\n         * Pass-thru setting for the canvas' context `alpha` property. This is typically\n         * not something you need to fiddle with. If you want transparency, use `backgroundAlpha`.\n         * @member {boolean}\n         */\n        this.useContextAlpha = options.useContextAlpha;\n\n        /**\n         * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n         * @member {boolean}\n         */\n        this.autoDensity = !!options.autoDensity;\n\n        /**\n         * The value of the preserveDrawingBuffer flag affects whether or not the contents of\n         * the stencil buffer is retained after rendering.\n         * @member {boolean}\n         */\n        this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n        /**\n         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n         * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n         * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n         * to clear the canvas every frame. Disable this by setting this to false. For example, if\n         * your game has a canvas filling background image you often don't need this set.\n         * @member {boolean}\n         * @default\n         */\n        this.clearBeforeRender = options.clearBeforeRender;\n\n        /**\n         * The background color as a number.\n         * @member {number}\n         * @protected\n         */\n        this._backgroundColor = 0x000000;\n\n        /**\n         * The background color as an [R, G, B, A] array.\n         * @member {number[]}\n         * @protected\n         */\n        this._backgroundColorRgba = [0, 0, 0, 1];\n\n        /**\n         * The background color as a string.\n         * @member {string}\n         * @protected\n         */\n        this._backgroundColorString = '#000000';\n\n        this.backgroundColor = options.backgroundColor || this._backgroundColor; // run bg color setter\n        this.backgroundAlpha = options.backgroundAlpha;\n\n        // @deprecated\n        if (options.transparent !== undefined)\n        {\n            // #if _DEBUG\n            deprecation('6.0.0', 'Option transparent is deprecated, please use backgroundAlpha instead.');\n            // #endif\n            this.useContextAlpha = options.transparent;\n            this.backgroundAlpha = options.transparent ? 0 : 1;\n        }\n\n        /**\n         * The last root object that the renderer tried to render.\n         * @member {PIXI.DisplayObject}\n         * @protected\n         */\n        this._lastObjectRendered = null;\n\n        /**\n         * Collection of plugins.\n         * @readonly\n         * @member {object}\n         */\n        this.plugins = {};\n    }\n\n    /**\n     * Initialize the plugins.\n     * @protected\n     * @param {object} staticMap - The dictionary of statically saved plugins.\n     */\n    initPlugins(staticMap: IRendererPlugins): void\n    {\n        for (const o in staticMap)\n        {\n            this.plugins[o] = new (staticMap[o])(this);\n        }\n    }\n\n    /**\n     * Same as view.width, actual number of pixels in the canvas by horizontal.\n     * @member {number}\n     * @readonly\n     * @default 800\n     */\n    get width(): number\n    {\n        return this.view.width;\n    }\n\n    /**\n     * Same as view.height, actual number of pixels in the canvas by vertical.\n     * @member {number}\n     * @readonly\n     * @default 600\n     */\n    get height(): number\n    {\n        return this.view.height;\n    }\n\n    /**\n     * Resizes the screen and canvas as close as possible to the specified width and height.\n     * Canvas dimensions are multiplied by resolution and rounded to the nearest integers.\n     * The new canvas dimensions divided by the resolution become the new screen dimensions.\n     * @param desiredScreenWidth - The desired width of the screen.\n     * @param desiredScreenHeight - The desired height of the screen.\n     */\n    resize(desiredScreenWidth: number, desiredScreenHeight: number): void\n    {\n        this.view.width = Math.round(desiredScreenWidth * this.resolution);\n        this.view.height = Math.round(desiredScreenHeight * this.resolution);\n\n        const screenWidth = this.view.width / this.resolution;\n        const screenHeight = this.view.height / this.resolution;\n\n        this.screen.width = screenWidth;\n        this.screen.height = screenHeight;\n\n        if (this.autoDensity)\n        {\n            this.view.style.width = `${screenWidth}px`;\n            this.view.style.height = `${screenHeight}px`;\n        }\n\n        /**\n         * Fired after view has been resized.\n         * @event PIXI.Renderer#resize\n         * @param {number} screenWidth - The new width of the screen.\n         * @param {number} screenHeight - The new height of the screen.\n         */\n        this.emit('resize', screenWidth, screenHeight);\n    }\n\n    /**\n     * Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n     * @method PIXI.AbstractRenderer#generateTexture\n     * @param displayObject - The displayObject the object will be generated from.\n     * @param {object} options - Generate texture options.\n     * @param {PIXI.SCALE_MODES} options.scaleMode - The scale mode of the texture.\n     * @param {number} options.resolution - The resolution / device pixel ratio of the texture being generated.\n     * @param {PIXI.Rectangle} options.region - The region of the displayObject, that shall be rendered,\n     *        if no region is specified, defaults to the local bounds of the displayObject.\n     * @param {PIXI.MSAA_QUALITY} options.multisample - The number of samples of the frame buffer.\n     * @returns A texture of the graphics object.\n     */\n    generateTexture(displayObject: IRenderableObject, options?: IGenerateTextureOptions): RenderTexture;\n\n    /**\n     * Please use the options argument instead.\n     * @method PIXI.AbstractRenderer#generateTexture\n     * @deprecated Since 6.1.0\n     * @param displayObject - The displayObject the object will be generated from.\n     * @param scaleMode - The scale mode of the texture.\n     * @param resolution - The resolution / device pixel ratio of the texture being generated.\n     * @param region - The region of the displayObject, that shall be rendered,\n     *        if no region is specified, defaults to the local bounds of the displayObject.\n     * @returns A texture of the graphics object.\n     */\n    generateTexture(\n        displayObject: IRenderableObject,\n        scaleMode?: SCALE_MODES,\n        resolution?: number,\n        region?: Rectangle): RenderTexture;\n\n    /**\n     * @ignore\n     */\n    generateTexture(displayObject: IRenderableObject,\n        options: IGenerateTextureOptions | SCALE_MODES = {},\n        resolution?: number, region?: Rectangle): RenderTexture\n    {\n        // @deprecated parameters spread, use options instead\n        if (typeof options === 'number')\n        {\n            // #if _DEBUG\n            deprecation('6.1.0', 'generateTexture options (scaleMode, resolution, region) are now object options.');\n            // #endif\n\n            options = { scaleMode: options, resolution, region };\n        }\n\n        const { region: manualRegion, ...textureOptions } = options;\n\n        region = manualRegion || (displayObject as IRenderableContainer).getLocalBounds(null, true);\n\n        // minimum texture size is 1x1, 0x0 will throw an error\n        if (region.width === 0) region.width = 1;\n        if (region.height === 0) region.height = 1;\n\n        const renderTexture = RenderTexture.create(\n            {\n                width: region.width,\n                height: region.height,\n                ...textureOptions,\n            });\n\n        tempMatrix.tx = -region.x;\n        tempMatrix.ty = -region.y;\n\n        this.render(displayObject, {\n            renderTexture,\n            clear: false,\n            transform: tempMatrix,\n            skipUpdateTransform: !!displayObject.parent\n        });\n\n        return renderTexture;\n    }\n\n    /**\n     * Adds a new system to the renderer.\n     * @param ClassRef - Class reference\n     * @param name - Property name for system\n     * @returns Return instance of renderer\n     */\n    abstract addSystem(ClassRef: ISystemConstructor, name: string): this;\n\n    abstract render(displayObject: IRenderableObject, options?: IRendererRenderOptions): void;\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     * @param [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    destroy(removeView?: boolean): void\n    {\n        for (const o in this.plugins)\n        {\n            this.plugins[o].destroy();\n            this.plugins[o] = null;\n        }\n\n        if (removeView && this.view.parentNode)\n        {\n            this.view.parentNode.removeChild(this.view);\n        }\n\n        const thisAny = this as any;\n\n        // null-ing all objects, that's a tradition!\n\n        thisAny.plugins = null;\n        thisAny.type = RENDERER_TYPE.UNKNOWN;\n        thisAny.view = null;\n        thisAny.screen = null;\n        thisAny._tempDisplayObjectParent = null;\n        thisAny.options = null;\n        this._backgroundColorRgba = null;\n        this._backgroundColorString = null;\n        this._lastObjectRendered = null;\n    }\n\n    /**\n     * The background color to fill if not transparent\n     * @member {number}\n     */\n    get backgroundColor(): number\n    {\n        return this._backgroundColor;\n    }\n\n    set backgroundColor(value: number)\n    {\n        this._backgroundColor = value;\n        this._backgroundColorString = hex2string(value);\n        hex2rgb(value, this._backgroundColorRgba);\n    }\n\n    /**\n     * The background color alpha. Setting this to 0 will make the canvas transparent.\n     * @member {number}\n     */\n    get backgroundAlpha(): number\n    {\n        return this._backgroundColorRgba[3];\n    }\n    set backgroundAlpha(value: number)\n    {\n        this._backgroundColorRgba[3] = value;\n    }\n}\n","import { default as cssColorNames } from 'css-color-names';\n\n/**\n * Converts a hexadecimal color number to an [R, G, B] array of normalized floats (numbers from 0.0 to 1.0).\n * @example\n * PIXI.utils.hex2rgb(0xffffff); // returns [1, 1, 1]\n * @memberof PIXI.utils\n * @function hex2rgb\n * @param {number} hex - The hexadecimal number to convert\n * @param  {number[]} [out=[]] - If supplied, this array will be used rather than returning a new one\n * @returns {number[]} An array representing the [R, G, B] of the color where all values are floats.\n */\nexport function hex2rgb(hex: number, out: Array<number> | Float32Array = []): Array<number> | Float32Array\n{\n    out[0] = ((hex >> 16) & 0xFF) / 255;\n    out[1] = ((hex >> 8) & 0xFF) / 255;\n    out[2] = (hex & 0xFF) / 255;\n\n    return out;\n}\n\n/**\n * Converts a hexadecimal color number to a string.\n * @example\n * PIXI.utils.hex2string(0xffffff); // returns \"#ffffff\"\n * @memberof PIXI.utils\n * @function hex2string\n * @param {number} hex - Number in hex (e.g., `0xffffff`)\n * @returns {string} The string color (e.g., `\"#ffffff\"`).\n */\nexport function hex2string(hex: number): string\n{\n    let hexString = hex.toString(16);\n\n    hexString = '000000'.substring(0, 6 - hexString.length) + hexString;\n\n    return `#${hexString}`;\n}\n\n/**\n * Converts a string to a hexadecimal color number.\n * It can handle:\n *  hex strings starting with #: \"#ffffff\"\n *  hex strings starting with 0x: \"0xffffff\"\n *  hex strings without prefix: \"ffffff\"\n *  css colors: \"black\"\n * @example\n * PIXI.utils.string2hex(\"#ffffff\"); // returns 0xffffff, which is 16777215 as an integer\n * @memberof PIXI.utils\n * @function string2hex\n * @param {string} string - The string color (e.g., `\"#ffffff\"`)\n * @returns {number} Number in hexadecimal.\n */\nexport function string2hex(string: string): number\n{\n    if (typeof string === 'string')\n    {\n        string = (cssColorNames as {[key: string]: string})[string.toLowerCase()] || string;\n\n        if (string[0] === '#')\n        {\n            string = string.slice(1);\n        }\n    }\n\n    return parseInt(string, 16);\n}\n\n/**\n * Converts a color as an [R, G, B] array of normalized floats to a hexadecimal number.\n * @example\n * PIXI.utils.rgb2hex([1, 1, 1]); // returns 0xffffff, which is 16777215 as an integer\n * @memberof PIXI.utils\n * @function rgb2hex\n * @param {number[]} rgb - Array of numbers where all values are normalized floats from 0.0 to 1.0.\n * @returns {number} Number in hexadecimal.\n */\nexport function rgb2hex(rgb: number[] | Float32Array): number\n{\n    return (((rgb[0] * 255) << 16) + ((rgb[1] * 255) << 8) + (rgb[2] * 255 | 0));\n}\n","export class GLBuffer\n{\n    buffer: WebGLBuffer;\n    updateID: number;\n    byteLength: number;\n    refCount: number;\n\n    constructor(buffer?: WebGLBuffer)\n    {\n        this.buffer = buffer || null;\n        this.updateID = -1;\n        this.byteLength = -1;\n        this.refCount = 0;\n    }\n}\n","import { GLBuffer } from './GLBuffer';\n\nimport type { Renderer } from '../Renderer';\nimport type { IRenderingContext } from '../IRenderingContext';\nimport type { Buffer } from './Buffer';\nimport type { ISystem } from '../ISystem';\n\n/**\n * System plugin to the renderer to manage buffers.\n *\n * WebGL uses Buffers as a way to store objects to the GPU.\n * This system makes working with them a lot easier.\n *\n * Buffers are used in three main places in WebGL\n * - geometry information\n * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)\n * - Transform feedback information. (WebGL 2 only feature)\n *\n * This system will handle the binding of buffers to the GPU as well as uploading\n * them. With this system, you never need to work directly with GPU buffers, but instead work with\n * the PIXI.Buffer class.\n * @class\n * @memberof PIXI\n */\nexport class BufferSystem implements ISystem\n{\n    CONTEXT_UID: number;\n    gl: IRenderingContext;\n\n    /** Cache for all buffers by id, used in case renderer gets destroyed or for profiling */\n    readonly managedBuffers: {[key: number]: Buffer};\n\n    /** Cache keeping track of the base bound buffer bases */\n    readonly boundBufferBases: {[key: number]: Buffer};\n\n    private renderer: Renderer;\n\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        this.renderer = renderer;\n        this.managedBuffers = {};\n        this.boundBufferBases = {};\n    }\n\n    /**\n     * @ignore\n     */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this.disposeAll(true);\n\n        this.gl = this.renderer.gl;\n\n        // TODO fill out...\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n    }\n\n    /**\n     * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n     * @param buffer - the buffer to bind to the renderer\n     */\n    bind(buffer: Buffer): void\n    {\n        const { gl, CONTEXT_UID } = this;\n\n        const glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n\n        gl.bindBuffer(buffer.type, glBuffer.buffer);\n    }\n\n    /**\n     * Binds an uniform buffer to at the given index.\n     *\n     * A cache is used so a buffer will not be bound again if already bound.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind it to.\n     */\n    bindBufferBase(buffer: Buffer, index: number): void\n    {\n        const { gl, CONTEXT_UID } = this;\n\n        if (this.boundBufferBases[index] !== buffer)\n        {\n            const glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n\n            this.boundBufferBases[index] = buffer;\n\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n        }\n    }\n\n    /**\n     * Binds a buffer whilst also binding its range.\n     * This will make the buffer start from the offset supplied rather than 0 when it is read.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind at, defaults to 0\n     * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n     */\n    bindBufferRange(buffer: Buffer, index?: number, offset?: number): void\n    {\n        const { gl, CONTEXT_UID } = this;\n\n        offset = offset || 0;\n\n        const glBuffer = buffer._glBuffers[CONTEXT_UID] || this.createGLBuffer(buffer);\n\n        gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);\n    }\n\n    /**\n     * Will ensure the data in the buffer is uploaded to the GPU.\n     * @param {PIXI.Buffer} buffer - the buffer to update\n     */\n    update(buffer: Buffer): void\n    {\n        const { gl, CONTEXT_UID } = this;\n\n        const glBuffer = buffer._glBuffers[CONTEXT_UID];\n\n        if (buffer._updateID === glBuffer.updateID)\n        {\n            return;\n        }\n\n        glBuffer.updateID = buffer._updateID;\n\n        gl.bindBuffer(buffer.type, glBuffer.buffer);\n\n        if (glBuffer.byteLength >= buffer.data.byteLength)\n        {\n            // offset is always zero for now!\n            gl.bufferSubData(buffer.type, 0, buffer.data);\n        }\n        else\n        {\n            const drawType = buffer.static ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n\n            glBuffer.byteLength = buffer.data.byteLength;\n            gl.bufferData(buffer.type, buffer.data, drawType);\n        }\n    }\n\n    /**\n     * Disposes buffer\n     * @param {PIXI.Buffer} buffer - buffer with data\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    dispose(buffer: Buffer, contextLost?: boolean): void\n    {\n        if (!this.managedBuffers[buffer.id])\n        {\n            return;\n        }\n\n        delete this.managedBuffers[buffer.id];\n\n        const glBuffer = buffer._glBuffers[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        buffer.disposeRunner.remove(this);\n\n        if (!glBuffer)\n        {\n            return;\n        }\n\n        if (!contextLost)\n        {\n            gl.deleteBuffer(glBuffer.buffer);\n        }\n\n        delete buffer._glBuffers[this.CONTEXT_UID];\n    }\n\n    /**\n     * dispose all WebGL resources of all managed buffers\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */\n    disposeAll(contextLost?: boolean): void\n    {\n        const all: Array<any> = Object.keys(this.managedBuffers);\n\n        for (let i = 0; i < all.length; i++)\n        {\n            this.dispose(this.managedBuffers[all[i]], contextLost);\n        }\n    }\n\n    /**\n     * creates and attaches a GLBuffer object tied to the current context.\n     * @param buffer\n     * @protected\n     */\n    protected createGLBuffer(buffer: Buffer): GLBuffer\n    {\n        const { CONTEXT_UID, gl } = this;\n\n        buffer._glBuffers[CONTEXT_UID] = new GLBuffer(gl.createBuffer());\n\n        this.managedBuffers[buffer.id] = buffer;\n\n        buffer.disposeRunner.add(this);\n\n        return buffer._glBuffers[CONTEXT_UID];\n    }\n}\n","import { AbstractRenderer } from './AbstractRenderer';\nimport { sayHello, isWebGLSupported, deprecation } from '@pixi/utils';\nimport { MaskSystem } from './mask/MaskSystem';\nimport { StencilSystem } from './mask/StencilSystem';\nimport { ScissorSystem } from './mask/ScissorSystem';\nimport { FilterSystem } from './filters/FilterSystem';\nimport { FramebufferSystem } from './framebuffer/FramebufferSystem';\nimport { RenderTextureSystem } from './renderTexture/RenderTextureSystem';\nimport { TextureSystem } from './textures/TextureSystem';\nimport { ProjectionSystem } from './projection/ProjectionSystem';\nimport { StateSystem } from './state/StateSystem';\nimport { GeometrySystem } from './geometry/GeometrySystem';\nimport { ShaderSystem } from './shader/ShaderSystem';\nimport { ContextSystem } from './context/ContextSystem';\nimport { BatchSystem } from './batch/BatchSystem';\nimport { TextureGCSystem } from './textures/TextureGCSystem';\nimport { MSAA_QUALITY, RENDERER_TYPE } from '@pixi/constants';\nimport { UniformGroup } from './shader/UniformGroup';\nimport type { Rectangle } from '@pixi/math';\nimport { Matrix } from '@pixi/math';\nimport { Runner } from '@pixi/runner';\nimport { BufferSystem } from './geometry/BufferSystem';\nimport { RenderTexture } from './renderTexture/RenderTexture';\n\nimport type { SCALE_MODES } from '@pixi/constants';\nimport type { IRendererOptions, IRendererPlugins, IRendererRenderOptions,\n    IGenerateTextureOptions } from './AbstractRenderer';\nimport type { ISystemConstructor } from './ISystem';\nimport type { IRenderingContext } from './IRenderingContext';\nimport type { IRenderableObject } from './IRenderableObject';\nimport { extensions, ExtensionType } from '@pixi/extensions';\n\nexport interface IRendererPluginConstructor\n{\n    new (renderer: Renderer, options?: any): IRendererPlugin;\n}\n\nexport interface IRendererPlugin\n{\n    destroy(): void;\n}\n\n/**\n * The Renderer draws the scene and all its content onto a WebGL enabled canvas.\n *\n * This renderer should be used for browsers that support WebGL.\n *\n * This renderer works by automatically managing WebGLBatchesm, so no need for Sprite Batches or Sprite Clouds.\n * Don't forget to add the view to your DOM or you will not see anything!\n *\n * Renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a renderer:\n *\n * | System                               | Description                                                                   |\n * | ------------------------------------ | ----------------------------------------------------------------------------- |\n * | {@link PIXI.BatchSystem}             | This manages object renderers that defer rendering until a flush.             |\n * | {@link PIXI.ContextSystem}           | This manages the WebGL context and extensions.                                |\n * | {@link PIXI.EventSystem}             | This manages UI events.                                                       |\n * | {@link PIXI.FilterSystem}            | This manages the filtering pipeline for post-processing effects.              |\n * | {@link PIXI.FramebufferSystem}       | This manages framebuffers, which are used for offscreen rendering.            |\n * | {@link PIXI.GeometrySystem}          | This manages geometries & buffers, which are used to draw object meshes.      |\n * | {@link PIXI.MaskSystem}              | This manages masking operations.                                              |\n * | {@link PIXI.ProjectionSystem}        | This manages the `projectionMatrix`, used by shaders to get NDC coordinates.  |\n * | {@link PIXI.RenderTextureSystem}     | This manages render-textures, which are an abstraction over framebuffers.     |\n * | {@link PIXI.ScissorSystem}           | This handles scissor masking, and is used internally by {@link MaskSystem}    |\n * | {@link PIXI.ShaderSystem}            | This manages shaders, programs that run on the GPU to calculate 'em pixels.   |\n * | {@link PIXI.StateSystem}             | This manages the WebGL state variables like blend mode, depth testing, etc.   |\n * | {@link PIXI.StencilSystem}           | This handles stencil masking, and is used internally by {@link MaskSystem}    |\n * | {@link PIXI.TextureSystem}           | This manages textures and their resources on the GPU.                         |\n * | {@link PIXI.TextureGCSystem}         | This will automatically remove textures from the GPU if they are not used.    |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @memberof PIXI\n */\nexport class Renderer extends AbstractRenderer\n{\n    /**\n     * WebGL context, set by {@link PIXI.ContextSystem this.context}.\n     * @readonly\n     * @member {WebGLRenderingContext}\n     */\n    public gl: IRenderingContext;\n\n    /** Global uniforms */\n    public globalUniforms: UniformGroup;\n\n    /** Unique UID assigned to the renderer's WebGL context. */\n    public CONTEXT_UID: number;\n\n    /**\n     * Flag if we are rendering to the screen vs renderTexture\n     * @readonly\n     * @default true\n     */\n    public renderingToScreen: boolean;\n\n    /**\n     * The number of msaa samples of the canvas.\n     * @readonly\n     */\n    public multisample: MSAA_QUALITY;\n    // systems\n\n    /**\n     * Mask system instance\n     * @readonly\n     */\n    public mask: MaskSystem;\n\n    /**\n     * Context system instance\n     * @readonly\n     */\n    public context: ContextSystem;\n\n    /**\n     * State system instance\n     * @readonly\n     */\n    public state: StateSystem;\n\n    /**\n     * Shader system instance\n     * @readonly\n     */\n    public shader: ShaderSystem;\n\n    /**\n     * Texture system instance\n     * @readonly\n     */\n    public texture: TextureSystem;\n\n    /**\n     * Buffer system instance\n     * @readonly\n     */\n    public buffer: BufferSystem;\n\n    /**\n     * Geometry system instance\n     * @readonly\n     */\n    public geometry: GeometrySystem;\n\n    /**\n     * Framebuffer system instance\n     * @readonly\n     */\n    public framebuffer: FramebufferSystem;\n\n    /**\n     * Scissor system instance\n     * @readonly\n     */\n    public scissor: ScissorSystem;\n\n    /**\n     * Stencil system instance\n     * @readonly\n     */\n    public stencil: StencilSystem;\n\n    /**\n     * Projection system instance\n     * @readonly\n     */\n    public projection: ProjectionSystem;\n\n    /**\n     * Texture garbage collector system instance\n     * @readonly\n     */\n    public textureGC: TextureGCSystem;\n\n    /**\n     * Filter system instance\n     * @readonly\n     */\n    public filter: FilterSystem;\n\n    /**\n     * RenderTexture system instance\n     * @readonly\n     */\n    public renderTexture: RenderTextureSystem;\n\n    /**\n     * Batch system instance\n     * @readonly\n     */\n    public batch: BatchSystem;\n\n    /**\n     * Internal signal instances of **runner**, these\n     * are assigned to each system created.\n     * @see PIXI.Runner\n     * @name runners\n     * @private\n     * @type {object}\n     * @readonly\n     * @property {PIXI.Runner} destroy - Destroy runner\n     * @property {PIXI.Runner} contextChange - Context change runner\n     * @property {PIXI.Runner} reset - Reset runner\n     * @property {PIXI.Runner} update - Update runner\n     * @property {PIXI.Runner} postrender - Post-render runner\n     * @property {PIXI.Runner} prerender - Pre-render runner\n     * @property {PIXI.Runner} resize - Resize runner\n     */\n    runners: {[key: string]: Runner};\n\n    /**\n     * Create renderer if WebGL is available. Overrideable\n     * by the **@pixi/canvas-renderer** package to allow fallback.\n     * throws error if WebGL is not available.\n     * @param options\n     * @private\n     */\n    static create(options?: IRendererOptions): AbstractRenderer\n    {\n        if (isWebGLSupported())\n        {\n            return new Renderer(options);\n        }\n\n        throw new Error('WebGL unsupported in this browser, use \"pixi.js-legacy\" for fallback canvas2d support.');\n    }\n\n    /**\n     * @param {PIXI.IRendererOptions} [options] - The optional renderer parameters.\n     * @param {boolean} [options.antialias=false] -\n     *  **WebGL Only.** Whether to enable anti-aliasing. This may affect performance.\n     * @param {boolean} [options.autoDensity=false] -\n     *  Whether the CSS dimensions of the renderer's view should be resized automatically.\n     * @param {number} [options.backgroundAlpha=1] -\n     *  Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @param {number} [options.backgroundColor=0x000000] -\n     *  The background color used to clear the canvas. It accepts hex numbers (e.g. `0xff0000`).\n     * @param {boolean} [options.clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n     * @param {PIXI.IRenderingContext} [options.context] - **WebGL Only.** User-provided WebGL rendering context object.\n     * @param {number} [options.height=600] - The height of the renderer's view.\n     * @param {string} [options.powerPreference] -\n     *  **WebGL Only.** A hint indicating what configuration of GPU is suitable for the WebGL context,\n     *  can be `'default'`, `'high-performance'` or `'low-power'`.\n     *  Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     *  while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @param {boolean} [options.premultipliedAlpha=true] -\n     *  **WebGL Only.** Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n     * @param {boolean} [options.preserveDrawingBuffer=false] -\n     *  **WebGL Only.** Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     *  its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @param {number} [options.resolution=PIXI.settings.RESOLUTION] -\n     *  The resolution / device pixel ratio of the renderer.\n     * @param {boolean} [options.transparent] -\n     *  **Deprecated since 6.0.0, Use `backgroundAlpha` instead.** \\\n     *  `true` sets `backgroundAlpha` to `0`, `false` sets `backgroundAlpha` to `1`.\n     * @param {boolean|'notMultiplied'} [options.useContextAlpha=true] -\n     *  Pass-through value for canvas' context attribute `alpha`. This option is for cases where the\n     *  canvas needs to be opaque, possibly for performance reasons on some older devices.\n     *  If you want to set transparency, please use `backgroundAlpha`. \\\n     *  **WebGL Only:** When set to `'notMultiplied'`, the canvas' context attribute `alpha` will be\n     *  set to `true` and `premultipliedAlpha` will be to `false`.\n     * @param {HTMLCanvasElement} [options.view=null] -\n     *  The canvas to use as the view. If omitted, a new canvas will be created.\n     * @param {number} [options.width=800] - The width of the renderer's view.\n     */\n    constructor(options?: IRendererOptions)\n    {\n        super(RENDERER_TYPE.WEBGL, options);\n\n        // the options will have been modified here in the super constructor with pixi's default settings..\n        options = this.options;\n\n        this.gl = null;\n\n        this.CONTEXT_UID = 0;\n\n        this.runners = {\n            destroy: new Runner('destroy'),\n            contextChange: new Runner('contextChange'),\n            reset: new Runner('reset'),\n            update: new Runner('update'),\n            postrender: new Runner('postrender'),\n            prerender: new Runner('prerender'),\n            resize: new Runner('resize'),\n        };\n\n        this.runners.contextChange.add(this);\n\n        this.globalUniforms = new UniformGroup({\n            projectionMatrix: new Matrix(),\n        }, true);\n\n        this.addSystem(MaskSystem, 'mask')\n            .addSystem(ContextSystem, 'context')\n            .addSystem(StateSystem, 'state')\n            .addSystem(ShaderSystem, 'shader')\n            .addSystem(TextureSystem, 'texture')\n            .addSystem(BufferSystem, 'buffer')\n            .addSystem(GeometrySystem, 'geometry')\n            .addSystem(FramebufferSystem, 'framebuffer')\n            .addSystem(ScissorSystem, 'scissor')\n            .addSystem(StencilSystem, 'stencil')\n            .addSystem(ProjectionSystem, 'projection')\n            .addSystem(TextureGCSystem, 'textureGC')\n            .addSystem(FilterSystem, 'filter')\n            .addSystem(RenderTextureSystem, 'renderTexture')\n            .addSystem(BatchSystem, 'batch');\n\n        this.initPlugins(Renderer.__plugins);\n\n        this.multisample = undefined;\n\n        /*\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.context.initFromContext(options.context);\n        }\n        else\n        {\n            this.context.initFromOptions({\n                alpha: !!this.useContextAlpha,\n                antialias: options.antialias,\n                premultipliedAlpha: this.useContextAlpha && this.useContextAlpha !== 'notMultiplied',\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: this.options.powerPreference,\n            });\n        }\n\n        this.renderingToScreen = true;\n\n        sayHello(this.context.webGLVersion === 2 ? 'WebGL 2' : 'WebGL 1');\n\n        this.resize(this.options.width, this.options.height);\n    }\n\n    protected contextChange(): void\n    {\n        const gl = this.gl;\n\n        let samples;\n\n        if (this.context.webGLVersion === 1)\n        {\n            const framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n            samples = gl.getParameter(gl.SAMPLES);\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n        }\n        else\n        {\n            const framebuffer = gl.getParameter(gl.DRAW_FRAMEBUFFER_BINDING);\n\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);\n\n            samples = gl.getParameter(gl.SAMPLES);\n\n            gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, framebuffer);\n        }\n\n        if (samples >= MSAA_QUALITY.HIGH)\n        {\n            this.multisample = MSAA_QUALITY.HIGH;\n        }\n        else if (samples >= MSAA_QUALITY.MEDIUM)\n        {\n            this.multisample = MSAA_QUALITY.MEDIUM;\n        }\n        else if (samples >= MSAA_QUALITY.LOW)\n        {\n            this.multisample = MSAA_QUALITY.LOW;\n        }\n        else\n        {\n            this.multisample = MSAA_QUALITY.NONE;\n        }\n    }\n\n    /**\n     * Add a new system to the renderer.\n     * @param ClassRef - Class reference\n     * @param name - Property name for system, if not specified\n     *        will use a static `name` property on the class itself. This\n     *        name will be assigned as s property on the Renderer so make\n     *        sure it doesn't collide with properties on Renderer.\n     * @returns Return instance of renderer\n     */\n    addSystem(ClassRef: ISystemConstructor, name: string): this\n    {\n        const system = new ClassRef(this);\n\n        if ((this as any)[name])\n        {\n            throw new Error(`Whoops! The name \"${name}\" is already in use`);\n        }\n\n        (this as any)[name] = system;\n\n        for (const i in this.runners)\n        {\n            this.runners[i].add(system);\n        }\n\n        /**\n         * Fired after rendering finishes.\n         * @event PIXI.Renderer#postrender\n         */\n\n        /**\n         * Fired before rendering starts.\n         * @event PIXI.Renderer#prerender\n         */\n\n        /**\n         * Fired when the WebGL context is set.\n         * @event PIXI.Renderer#context\n         * @param {WebGLRenderingContext} gl - WebGL context.\n         */\n\n        return this;\n    }\n\n    /**\n     * Renders the object to its WebGL view.\n     * @param displayObject - The object to be rendered.\n     * @param {object} [options] - Object to use for render options.\n     * @param {PIXI.RenderTexture} [options.renderTexture] - The render texture to render to.\n     * @param {boolean} [options.clear=true] - Should the canvas be cleared before the new render.\n     * @param {PIXI.Matrix} [options.transform] - A transform to apply to the render texture before rendering.\n     * @param {boolean} [options.skipUpdateTransform=false] - Should we skip the update transform pass?\n     */\n    render(displayObject: IRenderableObject, options?: IRendererRenderOptions): void;\n\n    /**\n     * Please use the `option` render arguments instead.\n     * @deprecated Since 6.0.0\n     * @param displayObject\n     * @param renderTexture\n     * @param clear\n     * @param transform\n     * @param skipUpdateTransform\n     */\n    render(displayObject: IRenderableObject, renderTexture?: RenderTexture,\n        clear?: boolean, transform?: Matrix, skipUpdateTransform?: boolean): void;\n\n    /**\n     * @ignore\n     */\n    render(displayObject: IRenderableObject, options?: IRendererRenderOptions | RenderTexture): void\n    {\n        let renderTexture: RenderTexture;\n        let clear: boolean;\n        let transform: Matrix;\n        let skipUpdateTransform: boolean;\n\n        if (options)\n        {\n            if (options instanceof RenderTexture)\n            {\n                // #if _DEBUG\n                deprecation('6.0.0', 'Renderer#render arguments changed, use options instead.');\n                // #endif\n\n                /* eslint-disable prefer-rest-params */\n                renderTexture = options;\n                clear = arguments[2];\n                transform = arguments[3];\n                skipUpdateTransform = arguments[4];\n                /* eslint-enable prefer-rest-params */\n            }\n            else\n            {\n                renderTexture = options.renderTexture;\n                clear = options.clear;\n                transform = options.transform;\n                skipUpdateTransform = options.skipUpdateTransform;\n            }\n        }\n\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.runners.prerender.emit();\n        this.emit('prerender');\n\n        // apply a transform at a GPU level\n        this.projection.transform = transform;\n\n        // no point rendering if our context has been blown up!\n        if (this.context.isLost)\n        {\n            return;\n        }\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.enableTempParent();\n\n            displayObject.updateTransform();\n            displayObject.disableTempParent(cacheParent);\n            // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        this.renderTexture.bind(renderTexture);\n        this.batch.currentRenderer.start();\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            this.renderTexture.clear();\n        }\n\n        displayObject.render(this);\n\n        // apply transform..\n        this.batch.currentRenderer.flush();\n\n        if (renderTexture)\n        {\n            renderTexture.baseTexture.update();\n        }\n\n        this.runners.postrender.emit();\n\n        // reset transform after render\n        this.projection.transform = null;\n\n        this.emit('postrender');\n    }\n\n    /**\n     * @override\n     * @ignore\n     */\n    generateTexture(displayObject: IRenderableObject,\n        options: IGenerateTextureOptions | SCALE_MODES = {},\n        resolution?: number, region?: Rectangle): RenderTexture\n    {\n        const renderTexture = super.generateTexture(displayObject, options as any, resolution, region);\n\n        this.framebuffer.blit();\n\n        return renderTexture;\n    }\n\n    /**\n     * Resizes the WebGL view to the specified width and height.\n     * @param desiredScreenWidth - The desired width of the screen.\n     * @param desiredScreenHeight - The desired height of the screen.\n     */\n    resize(desiredScreenWidth: number, desiredScreenHeight: number): void\n    {\n        super.resize(desiredScreenWidth, desiredScreenHeight);\n\n        this.runners.resize.emit(this.screen.height, this.screen.width);\n    }\n\n    /**\n     * Resets the WebGL state so you can render things however you fancy!\n     * @returns Returns itself.\n     */\n    reset(): this\n    {\n        this.runners.reset.emit();\n\n        return this;\n    }\n\n    /** Clear the frame buffer. */\n    clear(): void\n    {\n        this.renderTexture.bind();\n        this.renderTexture.clear();\n    }\n\n    /**\n     * Removes everything from the renderer (event listeners, spritebatch, etc...)\n     * @param [removeView=false] - Removes the Canvas element from the DOM.\n     *  See: https://github.com/pixijs/pixi.js/issues/2233\n     */\n    destroy(removeView?: boolean): void\n    {\n        this.runners.destroy.emit();\n\n        for (const r in this.runners)\n        {\n            this.runners[r].destroy();\n        }\n\n        // call base destroy\n        super.destroy(removeView);\n\n        // TODO nullify all the managers..\n        this.gl = null;\n    }\n\n    /**\n     * Please use `plugins.extract` instead.\n     * @member {PIXI.Extract} extract\n     * @deprecated since 6.0.0\n     * @readonly\n     */\n    public get extract(): any\n    {\n        // #if _DEBUG\n        deprecation('6.0.0', 'Renderer#extract has been deprecated, please use Renderer#plugins.extract instead.');\n        // #endif\n\n        return this.plugins.extract;\n    }\n\n    /**\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n     * by creating a custom build. Consult the README for more information about creating custom\n     * builds and excluding plugins.\n     * @readonly\n     * @property {PIXI.AccessibilityManager} accessibility Support tabbing interactive elements.\n     * @property {PIXI.Extract} extract Extract image data from renderer.\n     * @property {PIXI.InteractionManager} interaction Handles mouse, touch and pointer events.\n     * @property {PIXI.ParticleRenderer} particle Renderer for ParticleContainer objects.\n     * @property {PIXI.Prepare} prepare Pre-render display objects.\n     * @property {PIXI.BatchRenderer} batch Batching of Sprite, Graphics and Mesh objects.\n     * @property {PIXI.TilingSpriteRenderer} tilingSprite Renderer for TilingSprite objects.\n     */\n    static __plugins: IRendererPlugins = {};\n\n    /**\n     * Use the {@link PIXI.extensions.add} API to register plugins.\n     * @deprecated since 6.5.0\n     * @param pluginName - The name of the plugin.\n     * @param ctor - The constructor function or class for the plugin.\n     */\n    static registerPlugin(pluginName: string, ctor: IRendererPluginConstructor): void\n    {\n        // #if _DEBUG\n        deprecation('6.5.0', 'Renderer.registerPlugin() has been deprecated, please use extensions.add() instead.');\n        // #endif\n        extensions.add({\n            name: pluginName,\n            type: ExtensionType.RendererPlugin,\n            ref: ctor,\n        });\n    }\n}\n\n// Handle registration of extensions\nextensions.handleByMap(ExtensionType.RendererPlugin, Renderer.__plugins);\n","import type { Renderer } from './Renderer';\nimport { deprecation } from '@pixi/utils';\n\n/**\n * Interface for systems used by the {@link PIXI.Renderer}.\n * @memberof PIXI\n */\nexport interface ISystem\n{\n    /** Generic destroy methods to be overridden by the subclass */\n    destroy(): void;\n}\n\n/**\n * Types for system and pipe classes.\n * @ignore\n */\nexport interface ISystemConstructor<R = Renderer>\n{\n    new (renderer: R): ISystem;\n}\n\n/**\n * Use the ISystem interface instead.\n * @deprecated since 6.1.0\n * @memberof PIXI\n */\nexport class System implements ISystem\n{\n    /** Reference to the main renderer */\n    public renderer: Renderer;\n\n    /**\n     * @param renderer - Reference to Renderer\n     */\n    constructor(renderer: Renderer)\n    {\n        // #if _DEBUG\n        deprecation('6.1.0', 'System class is deprecated, implemement ISystem interface instead.');\n        // #endif\n\n        this.renderer = renderer;\n    }\n\n    /** Destroy and don't use after this. */\n    destroy(): void\n    {\n        this.renderer = null;\n    }\n}\n","import { DRAW_MODES } from '@pixi/constants';\n\nimport type { BLEND_MODES } from '@pixi/constants';\nimport type { BatchTextureArray } from './BatchTextureArray';\n\n/**\n * Used by the batcher to draw batches.\n * Each one of these contains all information required to draw a bound geometry.\n * @memberof PIXI\n */\nexport class BatchDrawCall\n{\n    texArray: BatchTextureArray;\n    type: DRAW_MODES;\n    blend: BLEND_MODES;\n    start: number;\n    size: number;\n\n    /** Data for uniforms or custom webgl state. */\n    data: any;\n\n    constructor()\n    {\n        this.texArray = null;\n        this.blend = 0;\n        this.type = DRAW_MODES.TRIANGLES;\n\n        this.start = 0;\n        this.size = 0;\n\n        this.data = null;\n    }\n}\n","import type { BaseTexture } from '@pixi/core';\n\n/**\n * Used by the batcher to build texture batches.\n * Holds list of textures and their respective locations.\n * @memberof PIXI\n */\nexport class BatchTextureArray\n{\n    /** Inside textures array. */\n    public elements: BaseTexture[];\n\n    /** Respective locations for textures. */\n    public ids: number[];\n\n    /** Number of filled elements. */\n    public count: number;\n\n    constructor()\n    {\n        this.elements = [];\n        this.ids = [];\n        this.count = 0;\n    }\n\n    clear(): void\n    {\n        for (let i = 0; i < this.count; i++)\n        {\n            this.elements[i] = null;\n        }\n        this.count = 0;\n    }\n}\n","import type { ITypedArray } from './Buffer';\n\n/**\n * Flexible wrapper around `ArrayBuffer` that also provides typed array views on demand.\n * @memberof PIXI\n */\nexport class ViewableBuffer\n{\n    public size: number;\n\n    /** Underlying `ArrayBuffer` that holds all the data and is of capacity `this.size`. */\n    public rawBinaryData: ArrayBuffer;\n\n    /** View on the raw binary data as a `Uint32Array`. */\n    public uint32View: Uint32Array;\n\n    /** View on the raw binary data as a `Float32Array`. */\n    public float32View: Float32Array;\n\n    private _int8View: Int8Array;\n    private _uint8View: Uint8Array;\n    private _int16View: Int16Array;\n    private _uint16View: Uint16Array;\n    private _int32View: Int32Array;\n\n    /**\n     * @param length - The size of the buffer in bytes.\n     */\n    constructor(length: number);\n\n    /**\n     * @param arrayBuffer - The source array buffer.\n     */\n    constructor(arrayBuffer: ArrayBuffer);\n\n    constructor(sizeOrBuffer: number | ArrayBuffer | Uint8Array)\n    {\n        if (typeof sizeOrBuffer === 'number')\n        {\n            this.rawBinaryData = new ArrayBuffer(sizeOrBuffer);\n        }\n        else if (sizeOrBuffer instanceof Uint8Array)\n        {\n            this.rawBinaryData = sizeOrBuffer.buffer;\n        }\n        else\n        {\n            this.rawBinaryData = sizeOrBuffer;\n        }\n\n        this.uint32View = new Uint32Array(this.rawBinaryData);\n        this.float32View = new Float32Array(this.rawBinaryData);\n    }\n\n    /** View on the raw binary data as a `Int8Array`. */\n    get int8View(): Int8Array\n    {\n        if (!this._int8View)\n        {\n            this._int8View = new Int8Array(this.rawBinaryData);\n        }\n\n        return this._int8View;\n    }\n\n    /** View on the raw binary data as a `Uint8Array`. */\n    get uint8View(): Uint8Array\n    {\n        if (!this._uint8View)\n        {\n            this._uint8View = new Uint8Array(this.rawBinaryData);\n        }\n\n        return this._uint8View;\n    }\n\n    /**  View on the raw binary data as a `Int16Array`. */\n    get int16View(): Int16Array\n    {\n        if (!this._int16View)\n        {\n            this._int16View = new Int16Array(this.rawBinaryData);\n        }\n\n        return this._int16View;\n    }\n\n    /** View on the raw binary data as a `Uint16Array`. */\n    get uint16View(): Uint16Array\n    {\n        if (!this._uint16View)\n        {\n            this._uint16View = new Uint16Array(this.rawBinaryData);\n        }\n\n        return this._uint16View;\n    }\n\n    /** View on the raw binary data as a `Int32Array`. */\n    get int32View(): Int32Array\n    {\n        if (!this._int32View)\n        {\n            this._int32View = new Int32Array(this.rawBinaryData);\n        }\n\n        return this._int32View;\n    }\n\n    /**\n     * Returns the view of the given type.\n     * @param type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @returns - typed array of given type\n     */\n    view(type: string): ITypedArray\n    {\n        return (this as any)[`${type}View`];\n    }\n\n    /** Destroys all buffer references. Do not use after calling this. */\n    destroy(): void\n    {\n        this.rawBinaryData = null;\n        this._int8View = null;\n        this._uint8View = null;\n        this._int16View = null;\n        this._uint16View = null;\n        this._int32View = null;\n        this.uint32View = null;\n        this.float32View = null;\n    }\n\n    static sizeOf(type: string): number\n    {\n        switch (type)\n        {\n            case 'int8':\n            case 'uint8':\n                return 1;\n            case 'int16':\n            case 'uint16':\n                return 2;\n            case 'int32':\n            case 'uint32':\n            case 'float32':\n                return 4;\n            default:\n                throw new Error(`${type} isn't a valid view type`);\n        }\n    }\n}\n","import { BatchDrawCall } from './BatchDrawCall';\nimport { BatchTextureArray } from './BatchTextureArray';\nimport { BaseTexture } from '../textures/BaseTexture';\nimport { ObjectRenderer } from './ObjectRenderer';\nimport { State } from '../state/State';\nimport { ViewableBuffer } from '../geometry/ViewableBuffer';\n\nimport { checkMaxIfStatementsInShader } from '../shader/utils/checkMaxIfStatementsInShader';\n\nimport { settings } from '@pixi/settings';\nimport { premultiplyBlendMode, premultiplyTint, nextPow2, log2 } from '@pixi/utils';\nimport { ENV } from '@pixi/constants';\n\nimport type { Renderer } from '../Renderer';\nimport type { Shader } from '../shader/Shader';\nimport type { BatchShaderGenerator } from './BatchShaderGenerator';\nimport type { BatchGeometry } from './BatchGeometry';\nimport type { Texture } from '../textures/Texture';\nimport type { BLEND_MODES } from '@pixi/constants';\n\n/**\n * Interface for elements like Sprite, Mesh etc. for batching.\n * @memberof PIXI\n */\nexport interface IBatchableElement\n{\n    _texture: Texture;\n    vertexData: Float32Array;\n    indices: Uint16Array | Uint32Array | Array<number>;\n    uvs: Float32Array;\n    worldAlpha: number;\n    _tintRGB: number;\n    blendMode: BLEND_MODES;\n}\n\n/**\n * Renderer dedicated to drawing and batching sprites.\n *\n * This is the default batch renderer. It buffers objects\n * with texture-based geometries and renders them in\n * batches. It uploads multiple textures to the GPU to\n * reduce to the number of draw calls.\n * @memberof PIXI\n */\nexport class AbstractBatchRenderer extends ObjectRenderer\n{\n    /** The WebGL state in which this renderer will work. */\n    public readonly state: State;\n\n    /**\n     * The number of bufferable objects before a flush\n     * occurs automatically.\n     * @default settings.SPRITE_BATCH_SIZE * 4\n     */\n    public size: number;\n\n    /**\n     * Maximum number of textures that can be uploaded to\n     * the GPU under the current context. It is initialized\n     * properly in `this.contextChange`.\n     * @see PIXI.AbstractBatchRenderer#contextChange\n     * @readonly\n     */\n    public MAX_TEXTURES: number;\n\n    /**\n     * This is used to generate a shader that can\n     * color each vertex based on a `aTextureId`\n     * attribute that points to an texture in `uSampler`.\n     *\n     * This enables the objects with different textures\n     * to be drawn in the same draw call.\n     *\n     * You can customize your shader by creating your\n     * custom shader generator.\n     */\n    protected shaderGenerator: BatchShaderGenerator;\n\n    /**\n     * The class that represents the geometry of objects\n     * that are going to be batched with this.\n     * @member {object}\n     * @default PIXI.BatchGeometry\n     */\n    protected geometryClass: typeof BatchGeometry;\n\n    /**\n     * Size of data being buffered per vertex in the\n     * attribute buffers (in floats). By default, the\n     * batch-renderer plugin uses 6:\n     *\n     * | aVertexPosition | 2 |\n     * |-----------------|---|\n     * | aTextureCoords  | 2 |\n     * | aColor          | 1 |\n     * | aTextureId      | 1 |\n     * @readonly\n     */\n    protected vertexSize: number;\n\n    /** Total count of all vertices used by the currently buffered objects. */\n    protected _vertexCount: number;\n\n    /** Total count of all indices used by the currently buffered objects. */\n    protected _indexCount: number;\n\n    /**\n     * Buffer of objects that are yet to be rendered.\n     * @member {PIXI.DisplayObject[]}\n     */\n    protected _bufferedElements: Array<IBatchableElement>;\n\n    /**\n     * Data for texture batch builder, helps to save a bit of CPU on a pass.\n     * @member {PIXI.BaseTexture[]}\n     */\n    protected _bufferedTextures: Array<BaseTexture>;\n\n    /** Number of elements that are buffered and are waiting to be flushed. */\n    protected _bufferSize: number;\n\n    /**\n     * This shader is generated by `this.shaderGenerator`.\n     *\n     * It is generated specifically to handle the required\n     * number of textures being batched together.\n     */\n    protected _shader: Shader;\n\n    /**\n     * A flush may occur multiple times in a single\n     * frame. On iOS devices or when\n     * `settings.CAN_UPLOAD_SAME_BUFFER` is false, the\n     * batch renderer does not upload data to the same\n     * `WebGLBuffer` for performance reasons.\n     *\n     * This is the index into `packedGeometries` that points to\n     * geometry holding the most recent buffers.\n     */\n    protected _flushId: number;\n\n    /**\n     * Pool of `ViewableBuffer` objects that are sorted in\n     * order of increasing size. The flush method uses\n     * the buffer with the least size above the amount\n     * it requires. These are used for passing attributes.\n     *\n     * The first buffer has a size of 8; each subsequent\n     * buffer has double capacity of its previous.\n     * @member {PIXI.ViewableBuffer[]}\n     * @see PIXI.AbstractBatchRenderer#getAttributeBuffer\n     */\n    protected _aBuffers: Array<ViewableBuffer>;\n\n    /**\n     * Pool of `Uint16Array` objects that are sorted in\n     * order of increasing size. The flush method uses\n     * the buffer with the least size above the amount\n     * it requires. These are used for passing indices.\n     *\n     * The first buffer has a size of 12; each subsequent\n     * buffer has double capacity of its previous.\n     * @member {Uint16Array[]}\n     * @see PIXI.AbstractBatchRenderer#getIndexBuffer\n     */\n    protected _iBuffers: Array<Uint16Array>;\n    protected _dcIndex: number;\n    protected _aIndex: number;\n    protected _iIndex: number;\n    protected _attributeBuffer: ViewableBuffer;\n    protected _indexBuffer: Uint16Array;\n    protected _tempBoundTextures: BaseTexture[];\n\n    /**\n     * Pool of `this.geometryClass` geometry objects\n     * that store buffers. They are used to pass data\n     * to the shader on each draw call.\n     *\n     * These are never re-allocated again, unless a\n     * context change occurs; however, the pool may\n     * be expanded if required.\n     * @member {PIXI.Geometry[]}\n     * @see PIXI.AbstractBatchRenderer.contextChange\n     */\n    private _packedGeometries: Array<BatchGeometry>;\n\n    /**\n     * Size of `this._packedGeometries`. It can be expanded\n     * if more than `this._packedGeometryPoolSize` flushes\n     * occur in a single frame.\n     */\n    private _packedGeometryPoolSize: number;\n\n    /**\n     * This will hook onto the renderer's `contextChange`\n     * and `prerender` signals.\n     * @param {PIXI.Renderer} renderer - The renderer this works for.\n     */\n    constructor(renderer: Renderer)\n    {\n        super(renderer);\n\n        this.shaderGenerator = null;\n        this.geometryClass = null;\n        this.vertexSize = null;\n        this.state = State.for2d();\n        this.size = settings.SPRITE_BATCH_SIZE * 4;\n        this._vertexCount = 0;\n        this._indexCount = 0;\n        this._bufferedElements = [];\n        this._bufferedTextures = [];\n        this._bufferSize = 0;\n        this._shader = null;\n        this._packedGeometries = [];\n        this._packedGeometryPoolSize = 2;\n        this._flushId = 0;\n        this._aBuffers = {} as any;\n        this._iBuffers = {} as any;\n\n        this.MAX_TEXTURES = 1;\n\n        this.renderer.on('prerender', this.onPrerender, this);\n        renderer.runners.contextChange.add(this);\n\n        this._dcIndex = 0;\n        this._aIndex = 0;\n        this._iIndex = 0;\n        this._attributeBuffer = null;\n        this._indexBuffer = null;\n        this._tempBoundTextures = [];\n    }\n\n    /**\n     * Handles the `contextChange` signal.\n     *\n     * It calculates `this.MAX_TEXTURES` and allocating the packed-geometry object pool.\n     */\n    contextChange(): void\n    {\n        const gl = this.renderer.gl;\n\n        if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n        {\n            this.MAX_TEXTURES = 1;\n        }\n        else\n        {\n            // step 1: first check max textures the GPU can handle.\n            this.MAX_TEXTURES = Math.min(\n                gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),\n                settings.SPRITE_MAX_TEXTURES);\n\n            // step 2: check the maximum number of if statements the shader can have too..\n            this.MAX_TEXTURES = checkMaxIfStatementsInShader(\n                this.MAX_TEXTURES, gl);\n        }\n\n        this._shader = this.shaderGenerator.generateShader(this.MAX_TEXTURES);\n\n        // we use the second shader as the first one depending on your browser\n        // may omit aTextureId as it is not used by the shader so is optimized out.\n        for (let i = 0; i < this._packedGeometryPoolSize; i++)\n        {\n            /* eslint-disable max-len */\n            this._packedGeometries[i] = new (this.geometryClass)();\n        }\n\n        this.initFlushBuffers();\n    }\n\n    /** Makes sure that static and dynamic flush pooled objects have correct dimensions. */\n    initFlushBuffers(): void\n    {\n        const {\n            _drawCallPool,\n            _textureArrayPool,\n        } = AbstractBatchRenderer;\n        // max draw calls\n        const MAX_SPRITES = this.size / 4;\n        // max texture arrays\n        const MAX_TA = Math.floor(MAX_SPRITES / this.MAX_TEXTURES) + 1;\n\n        while (_drawCallPool.length < MAX_SPRITES)\n        {\n            _drawCallPool.push(new BatchDrawCall());\n        }\n        while (_textureArrayPool.length < MAX_TA)\n        {\n            _textureArrayPool.push(new BatchTextureArray());\n        }\n        for (let i = 0; i < this.MAX_TEXTURES; i++)\n        {\n            this._tempBoundTextures[i] = null;\n        }\n    }\n\n    /** Handles the `prerender` signal. It ensures that flushes start from the first geometry object again. */\n    onPrerender(): void\n    {\n        this._flushId = 0;\n    }\n\n    /**\n     * Buffers the \"batchable\" object. It need not be rendered immediately.\n     * @param {PIXI.DisplayObject} element - the element to render when\n     *    using this renderer\n     */\n    render(element: IBatchableElement): void\n    {\n        if (!element._texture.valid)\n        {\n            return;\n        }\n\n        if (this._vertexCount + (element.vertexData.length / 2) > this.size)\n        {\n            this.flush();\n        }\n\n        this._vertexCount += element.vertexData.length / 2;\n        this._indexCount += element.indices.length;\n        this._bufferedTextures[this._bufferSize] = element._texture.baseTexture;\n        this._bufferedElements[this._bufferSize++] = element;\n    }\n\n    buildTexturesAndDrawCalls(): void\n    {\n        const {\n            _bufferedTextures: textures,\n            MAX_TEXTURES,\n        } = this;\n        const textureArrays = AbstractBatchRenderer._textureArrayPool;\n        const batch = this.renderer.batch;\n        const boundTextures = this._tempBoundTextures;\n        const touch = this.renderer.textureGC.count;\n\n        let TICK = ++BaseTexture._globalBatch;\n        let countTexArrays = 0;\n        let texArray = textureArrays[0];\n        let start = 0;\n\n        batch.copyBoundTextures(boundTextures, MAX_TEXTURES);\n\n        for (let i = 0; i < this._bufferSize; ++i)\n        {\n            const tex = textures[i];\n\n            textures[i] = null;\n            if (tex._batchEnabled === TICK)\n            {\n                continue;\n            }\n\n            if (texArray.count >= MAX_TEXTURES)\n            {\n                batch.boundArray(texArray, boundTextures, TICK, MAX_TEXTURES);\n                this.buildDrawCalls(texArray, start, i);\n                start = i;\n                texArray = textureArrays[++countTexArrays];\n                ++TICK;\n            }\n\n            tex._batchEnabled = TICK;\n            tex.touched = touch;\n            texArray.elements[texArray.count++] = tex;\n        }\n\n        if (texArray.count > 0)\n        {\n            batch.boundArray(texArray, boundTextures, TICK, MAX_TEXTURES);\n            this.buildDrawCalls(texArray, start, this._bufferSize);\n            ++countTexArrays;\n            ++TICK;\n        }\n\n        // Clean-up\n\n        for (let i = 0; i < boundTextures.length; i++)\n        {\n            boundTextures[i] = null;\n        }\n        BaseTexture._globalBatch = TICK;\n    }\n\n    /**\n     * Populating drawcalls for rendering\n     * @param texArray\n     * @param start\n     * @param finish\n     */\n    buildDrawCalls(texArray: BatchTextureArray, start: number, finish: number): void\n    {\n        const {\n            _bufferedElements: elements,\n            _attributeBuffer,\n            _indexBuffer,\n            vertexSize,\n        } = this;\n        const drawCalls = AbstractBatchRenderer._drawCallPool;\n\n        let dcIndex = this._dcIndex;\n        let aIndex = this._aIndex;\n        let iIndex = this._iIndex;\n\n        let drawCall = drawCalls[dcIndex];\n\n        drawCall.start = this._iIndex;\n        drawCall.texArray = texArray;\n\n        for (let i = start; i < finish; ++i)\n        {\n            const sprite = elements[i];\n            const tex = sprite._texture.baseTexture;\n            const spriteBlendMode = premultiplyBlendMode[\n                tex.alphaMode ? 1 : 0][sprite.blendMode];\n\n            elements[i] = null;\n\n            if (start < i && drawCall.blend !== spriteBlendMode)\n            {\n                drawCall.size = iIndex - drawCall.start;\n                start = i;\n                drawCall = drawCalls[++dcIndex];\n                drawCall.texArray = texArray;\n                drawCall.start = iIndex;\n            }\n\n            this.packInterleavedGeometry(sprite, _attributeBuffer, _indexBuffer, aIndex, iIndex);\n            aIndex += sprite.vertexData.length / 2 * vertexSize;\n            iIndex += sprite.indices.length;\n\n            drawCall.blend = spriteBlendMode;\n        }\n\n        if (start < finish)\n        {\n            drawCall.size = iIndex - drawCall.start;\n            ++dcIndex;\n        }\n\n        this._dcIndex = dcIndex;\n        this._aIndex = aIndex;\n        this._iIndex = iIndex;\n    }\n\n    /**\n     * Bind textures for current rendering\n     * @param texArray\n     */\n    bindAndClearTexArray(texArray: BatchTextureArray): void\n    {\n        const textureSystem = this.renderer.texture;\n\n        for (let j = 0; j < texArray.count; j++)\n        {\n            textureSystem.bind(texArray.elements[j], texArray.ids[j]);\n            texArray.elements[j] = null;\n        }\n        texArray.count = 0;\n    }\n\n    updateGeometry(): void\n    {\n        const {\n            _packedGeometries: packedGeometries,\n            _attributeBuffer: attributeBuffer,\n            _indexBuffer: indexBuffer,\n        } = this;\n\n        if (!settings.CAN_UPLOAD_SAME_BUFFER)\n        { /* Usually on iOS devices, where the browser doesn't\n            like uploads to the same buffer in a single frame. */\n            if (this._packedGeometryPoolSize <= this._flushId)\n            {\n                this._packedGeometryPoolSize++;\n                packedGeometries[this._flushId] = new (this.geometryClass)();\n            }\n\n            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData);\n            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer);\n\n            this.renderer.geometry.bind(packedGeometries[this._flushId]);\n            this.renderer.geometry.updateBuffers();\n            this._flushId++;\n        }\n        else\n        {\n            // lets use the faster option, always use buffer number 0\n            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData);\n            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer);\n\n            this.renderer.geometry.updateBuffers();\n        }\n    }\n\n    drawBatches(): void\n    {\n        const dcCount = this._dcIndex;\n        const { gl, state: stateSystem } = this.renderer;\n        const drawCalls = AbstractBatchRenderer._drawCallPool;\n\n        let curTexArray = null;\n\n        // Upload textures and do the draw calls\n        for (let i = 0; i < dcCount; i++)\n        {\n            const { texArray, type, size, start, blend } = drawCalls[i];\n\n            if (curTexArray !== texArray)\n            {\n                curTexArray = texArray;\n                this.bindAndClearTexArray(texArray);\n            }\n\n            this.state.blendMode = blend;\n            stateSystem.set(this.state);\n            gl.drawElements(type, size, gl.UNSIGNED_SHORT, start * 2);\n        }\n    }\n\n    /** Renders the content _now_ and empties the current batch. */\n    flush(): void\n    {\n        if (this._vertexCount === 0)\n        {\n            return;\n        }\n\n        this._attributeBuffer = this.getAttributeBuffer(this._vertexCount);\n        this._indexBuffer = this.getIndexBuffer(this._indexCount);\n        this._aIndex = 0;\n        this._iIndex = 0;\n        this._dcIndex = 0;\n\n        this.buildTexturesAndDrawCalls();\n        this.updateGeometry();\n        this.drawBatches();\n\n        // reset elements buffer for the next flush\n        this._bufferSize = 0;\n        this._vertexCount = 0;\n        this._indexCount = 0;\n    }\n\n    /** Starts a new sprite batch. */\n    start(): void\n    {\n        this.renderer.state.set(this.state);\n\n        this.renderer.texture.ensureSamplerType(this.MAX_TEXTURES);\n\n        this.renderer.shader.bind(this._shader);\n\n        if (settings.CAN_UPLOAD_SAME_BUFFER)\n        {\n            // bind buffer #0, we don't need others\n            this.renderer.geometry.bind(this._packedGeometries[this._flushId]);\n        }\n    }\n\n    /** Stops and flushes the current batch. */\n    stop(): void\n    {\n        this.flush();\n    }\n\n    /** Destroys this `AbstractBatchRenderer`. It cannot be used again. */\n    destroy(): void\n    {\n        for (let i = 0; i < this._packedGeometryPoolSize; i++)\n        {\n            if (this._packedGeometries[i])\n            {\n                this._packedGeometries[i].destroy();\n            }\n        }\n\n        this.renderer.off('prerender', this.onPrerender, this);\n\n        this._aBuffers = null;\n        this._iBuffers = null;\n        this._packedGeometries = null;\n        this._attributeBuffer = null;\n        this._indexBuffer = null;\n\n        if (this._shader)\n        {\n            this._shader.destroy();\n            this._shader = null;\n        }\n\n        super.destroy();\n    }\n\n    /**\n     * Fetches an attribute buffer from `this._aBuffers` that can hold atleast `size` floats.\n     * @param size - minimum capacity required\n     * @returns - buffer than can hold atleast `size` floats\n     */\n    getAttributeBuffer(size: number): ViewableBuffer\n    {\n        // 8 vertices is enough for 2 quads\n        const roundedP2 = nextPow2(Math.ceil(size / 8));\n        const roundedSizeIndex = log2(roundedP2);\n        const roundedSize = roundedP2 * 8;\n\n        if (this._aBuffers.length <= roundedSizeIndex)\n        {\n            this._iBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._aBuffers[roundedSize];\n\n        if (!buffer)\n        {\n            this._aBuffers[roundedSize] = buffer = new ViewableBuffer(roundedSize * this.vertexSize * 4);\n        }\n\n        return buffer;\n    }\n\n    /**\n     * Fetches an index buffer from `this._iBuffers` that can\n     * have at least `size` capacity.\n     * @param size - minimum required capacity\n     * @returns - buffer that can fit `size` indices.\n     */\n    getIndexBuffer(size: number): Uint16Array\n    {\n        // 12 indices is enough for 2 quads\n        const roundedP2 = nextPow2(Math.ceil(size / 12));\n        const roundedSizeIndex = log2(roundedP2);\n        const roundedSize = roundedP2 * 12;\n\n        if (this._iBuffers.length <= roundedSizeIndex)\n        {\n            this._iBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._iBuffers[roundedSizeIndex];\n\n        if (!buffer)\n        {\n            this._iBuffers[roundedSizeIndex] = buffer = new Uint16Array(roundedSize);\n        }\n\n        return buffer;\n    }\n\n    /**\n     * Takes the four batching parameters of `element`, interleaves\n     * and pushes them into the batching attribute/index buffers given.\n     *\n     * It uses these properties: `vertexData` `uvs`, `textureId` and\n     * `indicies`. It also uses the \"tint\" of the base-texture, if\n     * present.\n     * @param {PIXI.DisplayObject} element - element being rendered\n     * @param attributeBuffer - attribute buffer.\n     * @param indexBuffer - index buffer\n     * @param aIndex - number of floats already in the attribute buffer\n     * @param iIndex - number of indices already in `indexBuffer`\n     */\n    packInterleavedGeometry(element: IBatchableElement, attributeBuffer: ViewableBuffer, indexBuffer: Uint16Array,\n        aIndex: number, iIndex: number): void\n    {\n        const {\n            uint32View,\n            float32View,\n        } = attributeBuffer;\n\n        const packedVertices = aIndex / this.vertexSize;\n        const uvs = element.uvs;\n        const indicies = element.indices;\n        const vertexData = element.vertexData;\n        const textureId = element._texture.baseTexture._batchLocation;\n\n        const alpha = Math.min(element.worldAlpha, 1.0);\n        const argb = (alpha < 1.0\n            && element._texture.baseTexture.alphaMode)\n            ? premultiplyTint(element._tintRGB, alpha)\n            : element._tintRGB + (alpha * 255 << 24);\n\n        // lets not worry about tint! for now..\n        for (let i = 0; i < vertexData.length; i += 2)\n        {\n            float32View[aIndex++] = vertexData[i];\n            float32View[aIndex++] = vertexData[i + 1];\n            float32View[aIndex++] = uvs[i];\n            float32View[aIndex++] = uvs[i + 1];\n            uint32View[aIndex++] = argb;\n            float32View[aIndex++] = textureId;\n        }\n\n        for (let i = 0; i < indicies.length; i++)\n        {\n            indexBuffer[iIndex++] = packedVertices + indicies[i];\n        }\n    }\n\n    /**\n     * Pool of `BatchDrawCall` objects that `flush` used\n     * to create \"batches\" of the objects being rendered.\n     *\n     * These are never re-allocated again.\n     * Shared between all batch renderers because it can be only one \"flush\" working at the moment.\n     * @member {PIXI.BatchDrawCall[]}\n     */\n    static _drawCallPool: Array<BatchDrawCall> = [];\n\n    /**\n     * Pool of `BatchDrawCall` objects that `flush` used\n     * to create \"batches\" of the objects being rendered.\n     *\n     * These are never re-allocated again.\n     * Shared between all batch renderers because it can be only one \"flush\" working at the moment.\n     * @member {PIXI.BatchTextureArray[]}\n     */\n    static _textureArrayPool: Array<BatchTextureArray> = [];\n}\n","import { Shader } from '../shader/Shader';\nimport { Program } from '../shader/Program';\nimport { UniformGroup } from '../shader/UniformGroup';\nimport { Matrix } from '@pixi/math';\n\n/**\n * Helper that generates batching multi-texture shader. Use it with your new BatchRenderer\n * @memberof PIXI\n */\nexport class BatchShaderGenerator\n{\n    /** Reference to the vertex shader source. */\n    public vertexSrc: string;\n\n    /** Reference to the fragment shader template. Must contain \"%count%\" and \"%forloop%\". */\n    public fragTemplate: string;\n\n    programCache: {[key: number]: Program};\n    defaultGroupCache: {[key: number]: UniformGroup};\n\n    /**\n     * @param vertexSrc - Vertex shader\n     * @param fragTemplate - Fragment shader template\n     */\n    constructor(vertexSrc: string, fragTemplate: string)\n    {\n        this.vertexSrc = vertexSrc;\n        this.fragTemplate = fragTemplate;\n\n        this.programCache = {};\n        this.defaultGroupCache = {};\n\n        if (fragTemplate.indexOf('%count%') < 0)\n        {\n            throw new Error('Fragment template must contain \"%count%\".');\n        }\n\n        if (fragTemplate.indexOf('%forloop%') < 0)\n        {\n            throw new Error('Fragment template must contain \"%forloop%\".');\n        }\n    }\n\n    generateShader(maxTextures: number): Shader\n    {\n        if (!this.programCache[maxTextures])\n        {\n            const sampleValues = new Int32Array(maxTextures);\n\n            for (let i = 0; i < maxTextures; i++)\n            {\n                sampleValues[i] = i;\n            }\n\n            this.defaultGroupCache[maxTextures] = UniformGroup.from({ uSamplers: sampleValues }, true);\n\n            let fragmentSrc = this.fragTemplate;\n\n            fragmentSrc = fragmentSrc.replace(/%count%/gi, `${maxTextures}`);\n            fragmentSrc = fragmentSrc.replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));\n\n            this.programCache[maxTextures] = new Program(this.vertexSrc, fragmentSrc);\n        }\n\n        const uniforms = {\n            tint: new Float32Array([1, 1, 1, 1]),\n            translationMatrix: new Matrix(),\n            default: this.defaultGroupCache[maxTextures],\n        };\n\n        return new Shader(this.programCache[maxTextures], uniforms);\n    }\n\n    generateSampleSrc(maxTextures: number): string\n    {\n        let src = '';\n\n        src += '\\n';\n        src += '\\n';\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            if (i > 0)\n            {\n                src += '\\nelse ';\n            }\n\n            if (i < maxTextures - 1)\n            {\n                src += `if(vTextureId < ${i}.5)`;\n            }\n\n            src += '\\n{';\n            src += `\\n\\tcolor = texture2D(uSamplers[${i}], vTextureCoord);`;\n            src += '\\n}';\n        }\n\n        src += '\\n';\n        src += '\\n';\n\n        return src;\n    }\n}\n","import { TYPES } from '@pixi/constants';\nimport { Geometry } from '../geometry/Geometry';\nimport { Buffer } from '../geometry/Buffer';\n\n/**\n * Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).\n * @memberof PIXI\n */\nexport class BatchGeometry extends Geometry\n{\n    /**\n     * Buffer used for position, color, texture IDs\n     * @protected\n     */\n    _buffer: Buffer;\n\n    /**\n     * Index buffer data\n     * @protected\n     */\n    _indexBuffer: Buffer;\n\n    /**\n     * @param {boolean} [_static=false] - Optimization flag, where `false`\n     *        is updated every frame, `true` doesn't change frame-to-frame.\n     */\n    constructor(_static = false)\n    {\n        super();\n\n        this._buffer = new Buffer(null, _static, false);\n\n        this._indexBuffer = new Buffer(null, _static, true);\n\n        this.addAttribute('aVertexPosition', this._buffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', this._buffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aColor', this._buffer, 4, true, TYPES.UNSIGNED_BYTE)\n            .addAttribute('aTextureId', this._buffer, 1, true, TYPES.FLOAT)\n            .addIndex(this._indexBuffer);\n    }\n}\n","import { BatchShaderGenerator } from './BatchShaderGenerator';\nimport { BatchGeometry } from './BatchGeometry';\nimport { AbstractBatchRenderer } from './AbstractBatchRenderer';\n\nimport defaultVertex from './texture.vert';\nimport defaultFragment from './texture.frag';\n\nimport type { Renderer } from '../Renderer';\nimport type { ExtensionMetadata } from '@pixi/extensions';\nimport { ExtensionType } from '@pixi/extensions';\n\nexport interface IBatchFactoryOptions\n{\n    vertex?: string;\n    fragment?: string;\n    geometryClass?: typeof BatchGeometry;\n    vertexSize?: number;\n}\n\n/** @memberof PIXI */\nexport class BatchPluginFactory\n{\n    /**\n     * Create a new BatchRenderer plugin for Renderer. this convenience can provide an easy way\n     * to extend BatchRenderer with all the necessary pieces.\n     * @example\n     * const fragment = `\n     * varying vec2 vTextureCoord;\n     * varying vec4 vColor;\n     * varying float vTextureId;\n     * uniform sampler2D uSamplers[%count%];\n     *\n     * void main(void){\n     *     vec4 color;\n     *     %forloop%\n     *     gl_FragColor = vColor * vec4(color.a - color.rgb, color.a);\n     * }\n     * `;\n     * const InvertBatchRenderer = PIXI.BatchPluginFactory.create({ fragment });\n     * PIXI.extensions.add({\n     *  name: 'invert',\n     *  ref: InvertBatchRenderer,\n     *  type: PIXI.ExtensionType.RendererPlugin,\n     * });\n     * const sprite = new PIXI.Sprite();\n     * sprite.pluginName = 'invert';\n     * @param {object} [options]\n     * @param {string} [options.vertex=PIXI.BatchPluginFactory.defaultVertexSrc] - Vertex shader source\n     * @param {string} [options.fragment=PIXI.BatchPluginFactory.defaultFragmentTemplate] - Fragment shader template\n     * @param {number} [options.vertexSize=6] - Vertex size\n     * @param {object} [options.geometryClass=PIXI.BatchGeometry]\n     * @returns {*} New batch renderer plugin\n     */\n    static create(options?: IBatchFactoryOptions): typeof AbstractBatchRenderer\n    {\n        const { vertex, fragment, vertexSize, geometryClass } = Object.assign({\n            vertex: defaultVertex,\n            fragment: defaultFragment,\n            geometryClass: BatchGeometry,\n            vertexSize: 6,\n        }, options);\n\n        return class BatchPlugin extends AbstractBatchRenderer\n        {\n            constructor(renderer: Renderer)\n            {\n                super(renderer);\n\n                this.shaderGenerator = new BatchShaderGenerator(vertex, fragment);\n                this.geometryClass = geometryClass;\n                this.vertexSize = vertexSize;\n            }\n        };\n    }\n\n    /**\n     * The default vertex shader source\n     * @readonly\n     */\n    static get defaultVertexSrc(): string\n    {\n        return defaultVertex;\n    }\n\n    /**\n     * The default fragment shader source\n     * @readonly\n     */\n    static get defaultFragmentTemplate(): string\n    {\n        return defaultFragment;\n    }\n}\n\n// Setup the default BatchRenderer plugin, this is what\n// we'll actually export at the root level\nexport const BatchRenderer = BatchPluginFactory.create();\n\nObject.assign(BatchRenderer, {\n    extension: {\n        name: 'batch',\n        type: ExtensionType.RendererPlugin,\n    } as ExtensionMetadata,\n});\n","import { deprecation } from '@pixi/utils';\nimport * as _systems from './systems';\nimport * as _resources from './textures/resources';\n\n/**\n * @memberof PIXI\n * @namespace resources\n * @see PIXI\n * @deprecated since 6.0.0\n */\nconst resources = {};\n\nfor (const name in _resources)\n{\n    Object.defineProperty(resources, name,\n        {\n            get()\n            {\n                // #if _DEBUG\n                deprecation('6.0.0', `PIXI.systems.${name} has moved to PIXI.${name}`);\n                // #endif\n\n                return (_resources as any)[name];\n            },\n        });\n}\n\n/**\n * @memberof PIXI\n * @namespace systems\n * @see PIXI\n * @deprecated since 6.0.0\n */\nconst systems = {};\n\nfor (const name in _systems)\n{\n    Object.defineProperty(systems, name,\n        {\n            get()\n            {\n                // #if _DEBUG\n                deprecation('6.0.0', `PIXI.resources.${name} has moved to PIXI.${name}`);\n                // #endif\n\n                return (_systems as any)[name];\n            },\n        });\n}\n\nexport { resources, systems };\n","import { settings } from '@pixi/settings';\n\n/**\n * Sets the default value for the container property 'sortableChildren'.\n * If set to true, the container will sort its children by zIndex value\n * when updateTransform() is called, or manually if sortChildren() is called.\n *\n * This actually changes the order of elements in the array, so should be treated\n * as a basic solution that is not performant compared to other solutions,\n * such as @link https://github.com/pixijs/pixi-display\n *\n * Also be aware of that this may not work nicely with the addChildAt() function,\n * as the zIndex sorting may cause the child to automatically sorted to another position.\n * @static\n * @constant\n * @name SORTABLE_CHILDREN\n * @memberof PIXI.settings\n * @type {boolean}\n * @default false\n */\nsettings.SORTABLE_CHILDREN = false;\n\nexport { settings };\n","import { Rectangle } from '@pixi/math';\n\nimport type { IPointData, Transform, Matrix } from '@pixi/math';\n\n/**\n * 'Builder' pattern for bounds rectangles.\n *\n * This could be called an Axis-Aligned Bounding Box.\n * It is not an actual shape. It is a mutable thing; no 'EMPTY' or those kind of problems.\n * @memberof PIXI\n */\nexport class Bounds\n{\n    /** @default Infinity */\n    public minX: number;\n\n    /** @default Infinity */\n    public minY: number;\n\n    /** @default -Infinity */\n    public maxX: number;\n\n    /** @default -Infinity */\n    public maxY: number;\n\n    public rect: Rectangle;\n\n    /**\n     * It is updated to _boundsID of corresponding object to keep bounds in sync with content.\n     * Updated from outside, thus public modifier.\n     */\n    public updateID: number;\n\n    constructor()\n    {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n\n        this.rect = null;\n        this.updateID = -1;\n    }\n\n    /**\n     * Checks if bounds are empty.\n     * @returns - True if empty.\n     */\n    isEmpty(): boolean\n    {\n        return this.minX > this.maxX || this.minY > this.maxY;\n    }\n\n    /** Clears the bounds and resets. */\n    clear(): void\n    {\n        this.minX = Infinity;\n        this.minY = Infinity;\n        this.maxX = -Infinity;\n        this.maxY = -Infinity;\n    }\n\n    /**\n     * Can return Rectangle.EMPTY constant, either construct new rectangle, either use your rectangle\n     * It is not guaranteed that it will return tempRect\n     * @param rect - Temporary object will be used if AABB is not empty\n     * @returns - A rectangle of the bounds\n     */\n    getRectangle(rect?: Rectangle): Rectangle\n    {\n        if (this.minX > this.maxX || this.minY > this.maxY)\n        {\n            return Rectangle.EMPTY;\n        }\n\n        rect = rect || new Rectangle(0, 0, 1, 1);\n\n        rect.x = this.minX;\n        rect.y = this.minY;\n        rect.width = this.maxX - this.minX;\n        rect.height = this.maxY - this.minY;\n\n        return rect;\n    }\n\n    /**\n     * This function should be inlined when its possible.\n     * @param point - The point to add.\n     */\n    addPoint(point: IPointData): void\n    {\n        this.minX = Math.min(this.minX, point.x);\n        this.maxX = Math.max(this.maxX, point.x);\n        this.minY = Math.min(this.minY, point.y);\n        this.maxY = Math.max(this.maxY, point.y);\n    }\n\n    /**\n     * Adds a point, after transformed. This should be inlined when its possible.\n     * @param matrix\n     * @param point\n     */\n    addPointMatrix(matrix: Matrix, point: IPointData): void\n    {\n        const { a, b, c, d, tx, ty } = matrix;\n\n        const x = (a * point.x) + (c * point.y) + tx;\n        const y = (b * point.x) + (d * point.y) + ty;\n\n        this.minX = Math.min(this.minX, x);\n        this.maxX = Math.max(this.maxX, x);\n        this.minY = Math.min(this.minY, y);\n        this.maxY = Math.max(this.maxY, y);\n    }\n\n    /**\n     * Adds a quad, not transformed\n     * @param vertices - The verts to add.\n     */\n    addQuad(vertices: Float32Array): void\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = vertices[0];\n        let y = vertices[1];\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[2];\n        y = vertices[3];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[4];\n        y = vertices[5];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = vertices[6];\n        y = vertices[7];\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds sprite frame, transformed.\n     * @param transform - transform to apply\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     */\n    addFrame(transform: Transform, x0: number, y0: number, x1: number, y1: number): void\n    {\n        this.addFrameMatrix(transform.worldTransform, x0, y0, x1, y1);\n    }\n\n    /**\n     * Adds sprite frame, multiplied by matrix\n     * @param matrix - matrix to apply\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     */\n    addFrameMatrix(matrix: Matrix, x0: number, y0: number, x1: number, y1: number): void\n    {\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        let x = (a * x0) + (c * y0) + tx;\n        let y = (b * x0) + (d * y0) + ty;\n\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y0) + tx;\n        y = (b * x1) + (d * y0) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x0) + (c * y1) + tx;\n        y = (b * x0) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        x = (a * x1) + (c * y1) + tx;\n        y = (b * x1) + (d * y1) + ty;\n        minX = x < minX ? x : minX;\n        minY = y < minY ? y : minY;\n        maxX = x > maxX ? x : maxX;\n        maxY = y > maxY ? y : maxY;\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds screen vertices from array\n     * @param vertexData - calculated vertices\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     */\n    addVertexData(vertexData: Float32Array, beginOffset: number, endOffset: number): void\n    {\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const x = vertexData[i];\n            const y = vertexData[i + 1];\n\n            minX = x < minX ? x : minX;\n            minY = y < minY ? y : minY;\n            maxX = x > maxX ? x : maxX;\n            maxY = y > maxY ? y : maxY;\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Add an array of mesh vertices\n     * @param transform - mesh transform\n     * @param vertices - mesh coordinates in array\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     */\n    addVertices(transform: Transform, vertices: Float32Array, beginOffset: number, endOffset: number): void\n    {\n        this.addVerticesMatrix(transform.worldTransform, vertices, beginOffset, endOffset);\n    }\n\n    /**\n     * Add an array of mesh vertices.\n     * @param matrix - mesh matrix\n     * @param vertices - mesh coordinates in array\n     * @param beginOffset - begin offset\n     * @param endOffset - end offset, excluded\n     * @param padX - x padding\n     * @param padY - y padding\n     */\n    addVerticesMatrix(matrix: Matrix, vertices: Float32Array, beginOffset: number,\n        endOffset: number, padX = 0, padY = padX): void\n    {\n        const a = matrix.a;\n        const b = matrix.b;\n        const c = matrix.c;\n        const d = matrix.d;\n        const tx = matrix.tx;\n        const ty = matrix.ty;\n\n        let minX = this.minX;\n        let minY = this.minY;\n        let maxX = this.maxX;\n        let maxY = this.maxY;\n\n        for (let i = beginOffset; i < endOffset; i += 2)\n        {\n            const rawX = vertices[i];\n            const rawY = vertices[i + 1];\n            const x = (a * rawX) + (c * rawY) + tx;\n            const y = (d * rawY) + (b * rawX) + ty;\n\n            minX = Math.min(minX, x - padX);\n            maxX = Math.max(maxX, x + padX);\n            minY = Math.min(minY, y - padY);\n            maxY = Math.max(maxY, y + padY);\n        }\n\n        this.minX = minX;\n        this.minY = minY;\n        this.maxX = maxX;\n        this.maxY = maxY;\n    }\n\n    /**\n     * Adds other {@link Bounds}.\n     * @param bounds - The Bounds to be added\n     */\n    addBounds(bounds: Bounds): void\n    {\n        const minX = this.minX;\n        const minY = this.minY;\n        const maxX = this.maxX;\n        const maxY = this.maxY;\n\n        this.minX = bounds.minX < minX ? bounds.minX : minX;\n        this.minY = bounds.minY < minY ? bounds.minY : minY;\n        this.maxX = bounds.maxX > maxX ? bounds.maxX : maxX;\n        this.maxY = bounds.maxY > maxY ? bounds.maxY : maxY;\n    }\n\n    /**\n     * Adds other Bounds, masked with Bounds.\n     * @param bounds - The Bounds to be added.\n     * @param mask - TODO\n     */\n    addBoundsMask(bounds: Bounds, mask: Bounds): void\n    {\n        const _minX = bounds.minX > mask.minX ? bounds.minX : mask.minX;\n        const _minY = bounds.minY > mask.minY ? bounds.minY : mask.minY;\n        const _maxX = bounds.maxX < mask.maxX ? bounds.maxX : mask.maxX;\n        const _maxY = bounds.maxY < mask.maxY ? bounds.maxY : mask.maxY;\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n\n    /**\n     * Adds other Bounds, multiplied by matrix. Bounds shouldn't be empty.\n     * @param bounds - other bounds\n     * @param matrix - multiplicator\n     */\n    addBoundsMatrix(bounds: Bounds, matrix: Matrix): void\n    {\n        this.addFrameMatrix(matrix, bounds.minX, bounds.minY, bounds.maxX, bounds.maxY);\n    }\n\n    /**\n     * Adds other Bounds, masked with Rectangle.\n     * @param bounds - TODO\n     * @param area - TODO\n     */\n    addBoundsArea(bounds: Bounds, area: Rectangle): void\n    {\n        const _minX = bounds.minX > area.x ? bounds.minX : area.x;\n        const _minY = bounds.minY > area.y ? bounds.minY : area.y;\n        const _maxX = bounds.maxX < area.x + area.width ? bounds.maxX : (area.x + area.width);\n        const _maxY = bounds.maxY < area.y + area.height ? bounds.maxY : (area.y + area.height);\n\n        if (_minX <= _maxX && _minY <= _maxY)\n        {\n            const minX = this.minX;\n            const minY = this.minY;\n            const maxX = this.maxX;\n            const maxY = this.maxY;\n\n            this.minX = _minX < minX ? _minX : minX;\n            this.minY = _minY < minY ? _minY : minY;\n            this.maxX = _maxX > maxX ? _maxX : maxX;\n            this.maxY = _maxY > maxY ? _maxY : maxY;\n        }\n    }\n\n    /**\n     * Pads bounds object, making it grow in all directions.\n     * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n     * @param paddingX - The horizontal padding amount.\n     * @param paddingY - The vertical padding amount.\n     */\n    pad(paddingX = 0, paddingY = paddingX): void\n    {\n        if (!this.isEmpty())\n        {\n            this.minX -= paddingX;\n            this.maxX += paddingX;\n            this.minY -= paddingY;\n            this.maxY += paddingY;\n        }\n    }\n\n    /**\n     * Adds padded frame. (x0, y0) should be strictly less than (x1, y1)\n     * @param x0 - left X of frame\n     * @param y0 - top Y of frame\n     * @param x1 - right X of frame\n     * @param y1 - bottom Y of frame\n     * @param padX - padding X\n     * @param padY - padding Y\n     */\n    addFramePad(x0: number, y0: number, x1: number, y1: number, padX: number, padY: number): void\n    {\n        x0 -= padX;\n        y0 -= padY;\n        x1 += padX;\n        y1 += padY;\n\n        this.minX = this.minX < x0 ? this.minX : x0;\n        this.maxX = this.maxX > x1 ? this.maxX : x1;\n        this.minY = this.minY < y0 ? this.minY : y0;\n        this.maxY = this.maxY > y1 ? this.maxY : y1;\n    }\n}\n","import { DEG_TO_RAD, RAD_TO_DEG, Rectangle, Transform } from '@pixi/math';\nimport { EventEmitter } from '@pixi/utils';\nimport { Bounds } from './Bounds';\n\nimport type { Container } from './Container';\nimport type { Filter, MaskData, Renderer } from '@pixi/core';\nimport type { IPointData, ObservablePoint, Matrix, Point } from '@pixi/math';\nimport type { Dict } from '@pixi/utils';\n\nexport interface IDestroyOptions\n{\n    children?: boolean;\n    texture?: boolean;\n    baseTexture?: boolean;\n}\n\nexport interface DisplayObject extends Omit<GlobalMixins.DisplayObject, keyof EventEmitter>, EventEmitter {}\n\n/**\n * The base class for all objects that are rendered on the screen.\n *\n * This is an abstract class and can not be used on its own; rather it should be extended.\n *\n * ## Display objects implemented in PixiJS\n *\n * | Display Object                  | Description                                                           |\n * | ------------------------------- | --------------------------------------------------------------------- |\n * | {@link PIXI.Container}          | Adds support for `children` to DisplayObject                          |\n * | {@link PIXI.Graphics}           | Shape-drawing display object similar to the Canvas API                |\n * | {@link PIXI.Sprite}             | Draws textures (i.e. images)                                          |\n * | {@link PIXI.Text}               | Draws text using the Canvas API internally                            |\n * | {@link PIXI.BitmapText}         | More scaleable solution for text rendering, reusing glyph textures    |\n * | {@link PIXI.TilingSprite}       | Draws textures/images in a tiled fashion                              |\n * | {@link PIXI.AnimatedSprite}     | Draws an animation of multiple images                                 |\n * | {@link PIXI.Mesh}               | Provides a lower-level API for drawing meshes with custom data        |\n * | {@link PIXI.NineSlicePlane}     | Mesh-related                                                          |\n * | {@link PIXI.SimpleMesh}         | v4-compatible mesh                                                    |\n * | {@link PIXI.SimplePlane}        | Mesh-related                                                          |\n * | {@link PIXI.SimpleRope}         | Mesh-related                                                          |\n *\n * ## Transforms\n *\n * The [transform]{@link DisplayObject#transform} of a display object describes the projection from its\n * local coordinate space to its parent's local coordinate space. The following properties are derived\n * from the transform:\n *\n * <table>\n *   <thead>\n *     <tr>\n *       <th>Property</th>\n *       <th>Description</th>\n *     </tr>\n *   </thead>\n *   <tbody>\n *     <tr>\n *       <td>[pivot]{@link PIXI.DisplayObject#pivot}</td>\n *       <td>\n *         Invariant under rotation, scaling, and skewing. The projection of into the parent's space of the pivot\n *         is equal to position, regardless of the other three transformations. In other words, It is the center of\n *         rotation, scaling, and skewing.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[position]{@link PIXI.DisplayObject#position}</td>\n *       <td>\n *         Translation. This is the position of the [pivot]{@link PIXI.DisplayObject#pivot} in the parent's local\n *         space. The default value of the pivot is the origin (0,0). If the top-left corner of your display object\n *         is (0,0) in its local space, then the position will be its top-left corner in the parent's local space.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[scale]{@link PIXI.DisplayObject#scale}</td>\n *       <td>\n *         Scaling. This will stretch (or compress) the display object's projection. The scale factors are along the\n *         local coordinate axes. In other words, the display object is scaled before rotated or skewed. The center\n *         of scaling is the [pivot]{@link PIXI.DisplayObject#pivot}.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[rotation]{@link PIXI.DisplayObject#rotation}</td>\n *       <td>\n *          Rotation. This will rotate the display object's projection by this angle (in radians).\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>[skew]{@link PIXI.DisplayObject#skew}</td>\n *       <td>\n *         <p>Skewing. This can be used to deform a rectangular display object into a parallelogram.</p>\n *         <p>\n *         In PixiJS, skew has a slightly different behaviour than the conventional meaning. It can be\n *         thought of the net rotation applied to the coordinate axes (separately). For example, if \"skew.x\" is\n *         ⍺ and \"skew.y\" is β, then the line x = 0 will be rotated by ⍺ (y = -x*cot⍺) and the line y = 0 will be\n *         rotated by β (y = x*tanβ). A line y = x*tanϴ (i.e. a line at angle ϴ to the x-axis in local-space) will\n *         be rotated by an angle between ⍺ and β.\n *         </p>\n *         <p>\n *         It can be observed that if skew is applied equally to both axes, then it will be equivalent to applying\n *         a rotation. Indeed, if \"skew.x\" = -ϴ and \"skew.y\" = ϴ, it will produce an equivalent of \"rotation\" = ϴ.\n *         </p>\n *         <p>\n *         Another quite interesting observation is that \"skew.x\", \"skew.y\", rotation are communtative operations. Indeed,\n *         because rotation is essentially a careful combination of the two.\n *         </p>\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>angle</td>\n *       <td>Rotation. This is an alias for [rotation]{@link PIXI.DisplayObject#rotation}, but in degrees.</td>\n *     </tr>\n *     <tr>\n *       <td>x</td>\n *       <td>Translation. This is an alias for position.x!</td>\n *     </tr>\n *     <tr>\n *       <td>y</td>\n *       <td>Translation. This is an alias for position.y!</td>\n *     </tr>\n *     <tr>\n *       <td>width</td>\n *       <td>\n *         Implemented in [Container]{@link PIXI.Container}. Scaling. The width property calculates scale.x by dividing\n *         the \"requested\" width by the local bounding box width. It is indirectly an abstraction over scale.x, and there\n *         is no concept of user-defined width.\n *       </td>\n *     </tr>\n *     <tr>\n *       <td>height</td>\n *       <td>\n *         Implemented in [Container]{@link PIXI.Container}. Scaling. The height property calculates scale.y by dividing\n *         the \"requested\" height by the local bounding box height. It is indirectly an abstraction over scale.y, and there\n *         is no concept of user-defined height.\n *       </td>\n *     </tr>\n *   </tbody>\n * </table>\n *\n * ## Bounds\n *\n * The bounds of a display object is defined by the minimum axis-aligned rectangle in world space that can fit\n * around it. The abstract `calculateBounds` method is responsible for providing it (and it should use the\n * `worldTransform` to calculate in world space).\n *\n * There are a few additional types of bounding boxes:\n *\n * | Bounds                | Description                                                                              |\n * | --------------------- | ---------------------------------------------------------------------------------------- |\n * | World Bounds          | This is synonymous is the regular bounds described above. See `getBounds()`.             |\n * | Local Bounds          | This the axis-aligned bounding box in the parent's local space. See `getLocalBounds()`.  |\n * | Render Bounds         | The bounds, but including extra rendering effects like filter padding.                   |\n * | Projected Bounds      | The bounds of the projected display object onto the screen. Usually equals world bounds. |\n * | Relative Bounds       | The bounds of a display object when projected onto a ancestor's (or parent's) space.     |\n * | Natural Bounds        | The bounds of an object in its own local space (not parent's space, like in local bounds)|\n * | Content Bounds        | The natural bounds when excluding all children of a `Container`.                         |\n *\n * ### calculateBounds\n *\n * [Container]{@link Container} already implements `calculateBounds` in a manner that includes children.\n *\n * But for a non-Container display object, the `calculateBounds` method must be overridden in order for `getBounds` and\n * `getLocalBounds` to work. This method must write the bounds into `this._bounds`.\n *\n * Generally, the following technique works for most simple cases: take the list of points\n * forming the \"hull\" of the object (i.e. outline of the object's shape), and then add them\n * using {@link PIXI.Bounds#addPointMatrix}.\n *\n * ```js\n * calculateBounds(): void\n * {\n *     const points = [...];\n *\n *     for (let i = 0, j = points.length; i < j; i++)\n *     {\n *         this._bounds.addPointMatrix(this.worldTransform, points[i]);\n *     }\n * }\n * ```\n *\n * You can optimize this for a large number of points by using {@link PIXI.Bounds#addVerticesMatrix} to pass them\n * in one array together.\n *\n * ## Alpha\n *\n * This alpha sets a display object's **relative opacity** w.r.t its parent. For example, if the alpha of a display\n * object is 0.5 and its parent's alpha is 0.5, then it will be rendered with 25% opacity (assuming alpha is not\n * applied on any ancestor further up the chain).\n *\n * The alpha with which the display object will be rendered is called the [worldAlpha]{@link PIXI.DisplayObject#worldAlpha}.\n *\n * ## Renderable vs Visible\n *\n * The `renderable` and `visible` properties can be used to prevent a display object from being rendered to the\n * screen. However, there is a subtle difference between the two. When using `renderable`, the transforms  of the display\n * object (and its children subtree) will continue to be calculated. When using `visible`, the transforms will not\n * be calculated.\n *\n * It is recommended that applications use the `renderable` property for culling. See\n * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} or\n * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull} for more details.\n *\n * Otherwise, to prevent an object from rendering in the general-purpose sense - `visible` is the property to use. This\n * one is also better in terms of performance.\n * @memberof PIXI\n */\nexport abstract class DisplayObject extends EventEmitter\n{\n    abstract sortDirty: boolean;\n\n    /** The display object container that contains this display object. */\n    public parent: Container;\n\n    /**\n     * The multiplied alpha of the displayObject.\n     * @readonly\n     */\n    public worldAlpha: number;\n\n    /**\n     * World transform and local transform of this object.\n     * This will become read-only later, please do not assign anything there unless you know what are you doing.\n     */\n    public transform: Transform;\n\n    /** The opacity of the object. */\n    public alpha: number;\n\n    /**\n     * The visibility of the object. If false the object will not be drawn, and\n     * the updateTransform function will not be called.\n     *\n     * Only affects recursive calls from parent. You can ask for bounds or call updateTransform manually.\n     */\n    public visible: boolean;\n\n    /**\n     * Can this object be rendered, if false the object will not be drawn but the updateTransform\n     * methods will still be called.\n     *\n     * Only affects recursive calls from parent. You can ask for bounds manually.\n     */\n    public renderable: boolean;\n\n    /**\n     * Should this object be rendered if the bounds of this object are out of frame?\n     *\n     * Culling has no effect on whether updateTransform is called.\n     */\n    public cullable: boolean;\n\n    /**\n     * If set, this shape is used for culling instead of the bounds of this object.\n     * It can improve the culling performance of objects with many children.\n     * The culling area is defined in local space.\n     */\n    public cullArea: Rectangle;\n\n    /**\n     * The area the filter is applied to. This is used as more of an optimization\n     * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n     *\n     * Also works as an interaction mask.\n     */\n    public filterArea: Rectangle;\n\n    /**\n     * Sets the filters for the displayObject.\n     * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     * To remove filters simply set this property to `'null'`.\n     */\n    public filters: Filter[] | null;\n\n    /** Used to fast check if a sprite is.. a sprite! */\n    public isSprite: boolean;\n\n    /** Does any other displayObject use this object as a mask? */\n    public isMask: boolean;\n\n    /**\n     * Which index in the children array the display component was before the previous zIndex sort.\n     * Used by containers to help sort objects with the same zIndex, by using previous array index as the decider.\n     * @protected\n     */\n    public _lastSortedIndex: number;\n\n    /**\n     * The original, cached mask of the object.\n     * @protected\n     */\n    public _mask: Container | MaskData;\n\n    /** The bounds object, this is used to calculate and store the bounds of the displayObject. */\n    public _bounds: Bounds;\n\n    /** Local bounds object, swapped with `_bounds` when using `getLocalBounds()`. */\n    public _localBounds: Bounds;\n\n    /**\n     * The zIndex of the displayObject.\n     * A higher value will mean it will be rendered on top of other displayObjects within the same container.\n     * @protected\n     */\n    protected _zIndex: number;\n\n    /**\n     * Currently enabled filters.\n     * @protected\n     */\n    protected _enabledFilters: Filter[];\n\n    /** Flags the cached bounds as dirty. */\n    protected _boundsID: number;\n\n    /** Cache of this display-object's bounds-rectangle. */\n    protected _boundsRect: Rectangle;\n\n    /** Cache of this display-object's local-bounds rectangle. */\n    protected _localBoundsRect: Rectangle;\n\n    /** If the object has been destroyed via destroy(). If true, it should not be used. */\n    protected _destroyed: boolean;\n\n    /** The number of times this object is used as a mask by another object. */\n    private _maskRefCount: number;\n    private tempDisplayObjectParent: TemporaryDisplayObject;\n    public displayObjectUpdateTransform: () => void;\n\n    /**\n     * Mixes all enumerable properties and methods from a source object to DisplayObject.\n     * @param source - The source of properties and methods to mix in.\n     */\n    static mixin(source: Dict<any>): void\n    {\n        // in ES8/ES2017, this would be really easy:\n        // Object.defineProperties(DisplayObject.prototype, Object.getOwnPropertyDescriptors(source));\n\n        // get all the enumerable property keys\n        const keys = Object.keys(source);\n\n        // loop through properties\n        for (let i = 0; i < keys.length; ++i)\n        {\n            const propertyName = keys[i];\n\n            // Set the property using the property descriptor - this works for accessors and normal value properties\n            Object.defineProperty(\n                DisplayObject.prototype,\n                propertyName,\n                Object.getOwnPropertyDescriptor(source, propertyName)\n            );\n        }\n    }\n\n    constructor()\n    {\n        super();\n\n        this.tempDisplayObjectParent = null;\n\n        // TODO: need to create Transform from factory\n        this.transform = new Transform();\n        this.alpha = 1;\n        this.visible = true;\n        this.renderable = true;\n        this.cullable = false;\n        this.cullArea = null;\n\n        this.parent = null;\n        this.worldAlpha = 1;\n\n        this._lastSortedIndex = 0;\n        this._zIndex = 0;\n\n        this.filterArea = null;\n        this.filters = null;\n        this._enabledFilters = null;\n\n        this._bounds = new Bounds();\n        this._localBounds = null;\n        this._boundsID = 0;\n        this._boundsRect = null;\n        this._localBoundsRect = null;\n        this._mask = null;\n        this._maskRefCount = 0;\n        this._destroyed = false;\n\n        this.isSprite = false;\n        this.isMask = false;\n    }\n\n    /**\n     * Fired when this DisplayObject is added to a Container.\n     * @instance\n     * @event added\n     * @param {PIXI.Container} container - The container added to.\n     */\n\n    /**\n     * Fired when this DisplayObject is removed from a Container.\n     * @instance\n     * @event removed\n     * @param {PIXI.Container} container - The container removed from.\n     */\n\n    /**\n     * Fired when this DisplayObject is destroyed. This event is emitted once\n     * destroy is finished.\n     * @instance\n     * @event destroyed\n     */\n\n    /** Readonly flag for destroyed display objects. */\n    get destroyed(): boolean\n    {\n        return this._destroyed;\n    }\n\n    /** Recalculates the bounds of the display object. */\n    abstract calculateBounds(): void;\n\n    abstract removeChild(child: DisplayObject): void;\n\n    /**\n     * Renders the object using the WebGL renderer.\n     * @param renderer - The renderer.\n     */\n    abstract render(renderer: Renderer): void;\n\n    /** Recursively updates transform of all objects from the root to this one internal function for toLocal() */\n    protected _recursivePostUpdateTransform(): void\n    {\n        if (this.parent)\n        {\n            this.parent._recursivePostUpdateTransform();\n            this.transform.updateTransform(this.parent.transform);\n        }\n        else\n        {\n            this.transform.updateTransform(this._tempDisplayObjectParent.transform);\n        }\n    }\n\n    /** Updates the object transform for rendering. TODO - Optimization pass! */\n    updateTransform(): void\n    {\n        this._boundsID++;\n\n        this.transform.updateTransform(this.parent.transform);\n        // multiply the alphas..\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n    }\n\n    /**\n     * Calculates and returns the (world) bounds of the display object as a [Rectangle]{@link PIXI.Rectangle}.\n     *\n     * This method is expensive on containers with a large subtree (like the stage). This is because the bounds\n     * of a container depend on its children's bounds, which recursively causes all bounds in the subtree to\n     * be recalculated. The upside, however, is that calling `getBounds` once on a container will indeed update\n     * the bounds of all children (the whole subtree, in fact). This side effect should be exploited by using\n     * `displayObject._bounds.getRectangle()` when traversing through all the bounds in a scene graph. Otherwise,\n     * calling `getBounds` on each object in a subtree will cause the total cost to increase quadratically as\n     * its height increases.\n     *\n     * The transforms of all objects in a container's **subtree** and of all **ancestors** are updated.\n     * The world bounds of all display objects in a container's **subtree** will also be recalculated.\n     *\n     * The `_bounds` object stores the last calculation of the bounds. You can use to entirely skip bounds\n     * calculation if needed.\n     *\n     * ```js\n     * const lastCalculatedBounds = displayObject._bounds.getRectangle(optionalRect);\n     * ```\n     *\n     * Do know that usage of `getLocalBounds` can corrupt the `_bounds` of children (the whole subtree, actually). This\n     * is a known issue that has not been solved. See [getLocalBounds]{@link PIXI.DisplayObject#getLocalBounds} for more\n     * details.\n     *\n     * `getBounds` should be called with `skipUpdate` equal to `true` in a render() call. This is because the transforms\n     * are guaranteed to be update-to-date. In fact, recalculating inside a render() call may cause corruption in certain\n     * cases.\n     * @param skipUpdate - Setting to `true` will stop the transforms of the scene graph from\n     *  being updated. This means the calculation returned MAY be out of date BUT will give you a\n     *  nice performance boost.\n     * @param rect - Optional rectangle to store the result of the bounds calculation.\n     * @returns - The minimum axis-aligned rectangle in world space that fits around this object.\n     */\n    getBounds(skipUpdate?: boolean, rect?: Rectangle): Rectangle\n    {\n        if (!skipUpdate)\n        {\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent as Container;\n                this.updateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this._recursivePostUpdateTransform();\n                this.updateTransform();\n            }\n        }\n\n        if (this._bounds.updateID !== this._boundsID)\n        {\n            this.calculateBounds();\n            this._bounds.updateID = this._boundsID;\n        }\n\n        if (!rect)\n        {\n            if (!this._boundsRect)\n            {\n                this._boundsRect = new Rectangle();\n            }\n\n            rect = this._boundsRect;\n        }\n\n        return this._bounds.getRectangle(rect);\n    }\n\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     * @param rect - Optional rectangle to store the result of the bounds calculation.\n     * @returns - The rectangular bounding area.\n     */\n    getLocalBounds(rect?: Rectangle): Rectangle\n    {\n        if (!rect)\n        {\n            if (!this._localBoundsRect)\n            {\n                this._localBoundsRect = new Rectangle();\n            }\n\n            rect = this._localBoundsRect;\n        }\n\n        if (!this._localBounds)\n        {\n            this._localBounds = new Bounds();\n        }\n\n        const transformRef = this.transform;\n        const parentRef = this.parent;\n\n        this.parent = null;\n        this.transform = this._tempDisplayObjectParent.transform;\n\n        const worldBounds = this._bounds;\n        const worldBoundsID = this._boundsID;\n\n        this._bounds = this._localBounds;\n\n        const bounds = this.getBounds(false, rect);\n\n        this.parent = parentRef;\n        this.transform = transformRef;\n\n        this._bounds = worldBounds;\n        this._bounds.updateID += this._boundsID - worldBoundsID;// reflect side-effects\n\n        return bounds;\n    }\n\n    /**\n     * Calculates the global position of the display object.\n     * @param position - The world origin to calculate from.\n     * @param point - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param skipUpdate - Should we skip the update transform.\n     * @returns - A point object representing the position of this object.\n     */\n    toGlobal<P extends IPointData = Point>(position: IPointData, point?: P, skipUpdate = false): P\n    {\n        if (!skipUpdate)\n        {\n            this._recursivePostUpdateTransform();\n\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent as Container;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this.displayObjectUpdateTransform();\n            }\n        }\n\n        // don't need to update the lot\n        return this.worldTransform.apply<P>(position, point);\n    }\n\n    /**\n     * Calculates the local position of the display object relative to another point.\n     * @param position - The world origin to calculate from.\n     * @param from - The DisplayObject to calculate the global position from.\n     * @param point - A Point object in which to store the value, optional\n     *  (otherwise will create a new Point).\n     * @param skipUpdate - Should we skip the update transform\n     * @returns - A point object representing the position of this object\n     */\n    toLocal<P extends IPointData = Point>(position: IPointData, from?: DisplayObject, point?: P, skipUpdate?: boolean): P\n    {\n        if (from)\n        {\n            position = from.toGlobal(position, point, skipUpdate);\n        }\n\n        if (!skipUpdate)\n        {\n            this._recursivePostUpdateTransform();\n\n            // this parent check is for just in case the item is a root object.\n            // If it is we need to give it a temporary parent so that displayObjectUpdateTransform works correctly\n            // this is mainly to avoid a parent check in the main loop. Every little helps for performance :)\n            if (!this.parent)\n            {\n                this.parent = this._tempDisplayObjectParent as Container;\n                this.displayObjectUpdateTransform();\n                this.parent = null;\n            }\n            else\n            {\n                this.displayObjectUpdateTransform();\n            }\n        }\n\n        // simply apply the matrix..\n        return this.worldTransform.applyInverse<P>(position, point);\n    }\n\n    /**\n     * Set the parent Container of this DisplayObject.\n     * @param container - The Container to add this DisplayObject to.\n     * @returns - The Container that this DisplayObject was added to.\n     */\n    setParent(container: Container): Container\n    {\n        if (!container || !container.addChild)\n        {\n            throw new Error('setParent: Argument must be a Container');\n        }\n\n        container.addChild(this);\n\n        return container;\n    }\n\n    /**\n     * Convenience function to set the position, scale, skew and pivot at once.\n     * @param x - The X position\n     * @param y - The Y position\n     * @param scaleX - The X scale value\n     * @param scaleY - The Y scale value\n     * @param rotation - The rotation\n     * @param skewX - The X skew value\n     * @param skewY - The Y skew value\n     * @param pivotX - The X pivot value\n     * @param pivotY - The Y pivot value\n     * @returns - The DisplayObject instance\n     */\n    setTransform(x = 0, y = 0, scaleX = 1, scaleY = 1, rotation = 0, skewX = 0, skewY = 0, pivotX = 0, pivotY = 0): this\n    {\n        this.position.x = x;\n        this.position.y = y;\n        this.scale.x = !scaleX ? 1 : scaleX;\n        this.scale.y = !scaleY ? 1 : scaleY;\n        this.rotation = rotation;\n        this.skew.x = skewX;\n        this.skew.y = skewY;\n        this.pivot.x = pivotX;\n        this.pivot.y = pivotY;\n\n        return this;\n    }\n\n    /**\n     * Base destroy method for generic display objects. This will automatically\n     * remove the display object from its parent Container as well as remove\n     * all current event listeners and internal references. Do not use a DisplayObject\n     * after calling `destroy()`.\n     * @param _options\n     */\n    destroy(_options?: IDestroyOptions | boolean): void\n    {\n        if (this.parent)\n        {\n            this.parent.removeChild(this);\n        }\n        this._destroyed = true;\n        this.transform = null;\n\n        this.parent = null;\n        this._bounds = null;\n        this.mask = null;\n\n        this.cullArea = null;\n        this.filters = null;\n        this.filterArea = null;\n        this.hitArea = null;\n\n        this.interactive = false;\n        this.interactiveChildren = false;\n\n        this.emit('destroyed');\n        this.removeAllListeners();\n    }\n\n    /**\n     * @protected\n     * @member {PIXI.Container}\n     */\n    get _tempDisplayObjectParent(): TemporaryDisplayObject\n    {\n        if (this.tempDisplayObjectParent === null)\n        {\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\n            this.tempDisplayObjectParent = new TemporaryDisplayObject();\n        }\n\n        return this.tempDisplayObjectParent;\n    }\n\n    /**\n     * Used in Renderer, cacheAsBitmap and other places where you call an `updateTransform` on root\n     *\n     * ```\n     * const cacheParent = elem.enableTempParent();\n     * elem.updateTransform();\n     * elem.disableTempParent(cacheParent);\n     * ```\n     * @returns - current parent\n     */\n    enableTempParent(): Container\n    {\n        const myParent = this.parent;\n\n        this.parent = this._tempDisplayObjectParent as Container;\n\n        return myParent;\n    }\n\n    /**\n     * Pair method for `enableTempParent`\n     * @param cacheParent - Actual parent of element\n     */\n    disableTempParent(cacheParent: Container): void\n    {\n        this.parent = cacheParent;\n    }\n\n    /**\n     * The position of the displayObject on the x axis relative to the local coordinates of the parent.\n     * An alias to position.x\n     */\n    get x(): number\n    {\n        return this.position.x;\n    }\n\n    set x(value: number)\n    {\n        this.transform.position.x = value;\n    }\n\n    /**\n     * The position of the displayObject on the y axis relative to the local coordinates of the parent.\n     * An alias to position.y\n     */\n    get y(): number\n    {\n        return this.position.y;\n    }\n\n    set y(value: number)\n    {\n        this.transform.position.y = value;\n    }\n\n    /**\n     * Current transform of the object based on world (parent) factors.\n     * @readonly\n     */\n    get worldTransform(): Matrix\n    {\n        return this.transform.worldTransform;\n    }\n\n    /**\n     * Current transform of the object based on local factors: position, scale, other stuff.\n     * @readonly\n     */\n    get localTransform(): Matrix\n    {\n        return this.transform.localTransform;\n    }\n\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * @since 4.0.0\n     */\n    get position(): ObservablePoint\n    {\n        return this.transform.position;\n    }\n\n    set position(value: IPointData)\n    {\n        this.transform.position.copyFrom(value);\n    }\n\n    /**\n     * The scale factors of this object along the local coordinate axes.\n     *\n     * The default scale is (1, 1).\n     * @since 4.0.0\n     */\n    get scale(): ObservablePoint\n    {\n        return this.transform.scale;\n    }\n\n    set scale(value: IPointData)\n    {\n        this.transform.scale.copyFrom(value);\n    }\n\n    /**\n     * The center of rotation, scaling, and skewing for this display object in its local space. The `position`\n     * is the projection of `pivot` in the parent's local space.\n     *\n     * By default, the pivot is the origin (0, 0).\n     * @since 4.0.0\n     */\n    get pivot(): ObservablePoint\n    {\n        return this.transform.pivot;\n    }\n\n    set pivot(value: IPointData)\n    {\n        this.transform.pivot.copyFrom(value);\n    }\n\n    /**\n     * The skew factor for the object in radians.\n     * @since 4.0.0\n     */\n    get skew(): ObservablePoint\n    {\n        return this.transform.skew;\n    }\n\n    set skew(value: IPointData)\n    {\n        this.transform.skew.copyFrom(value);\n    }\n\n    /**\n     * The rotation of the object in radians.\n     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n     */\n    get rotation(): number\n    {\n        return this.transform.rotation;\n    }\n\n    set rotation(value: number)\n    {\n        this.transform.rotation = value;\n    }\n\n    /**\n     * The angle of the object in degrees.\n     * 'rotation' and 'angle' have the same effect on a display object; rotation is in radians, angle is in degrees.\n     */\n    get angle(): number\n    {\n        return this.transform.rotation * RAD_TO_DEG;\n    }\n\n    set angle(value: number)\n    {\n        this.transform.rotation = value * DEG_TO_RAD;\n    }\n\n    /**\n     * The zIndex of the displayObject.\n     *\n     * If a container has the sortableChildren property set to true, children will be automatically\n     * sorted by zIndex value; a higher value will mean it will be moved towards the end of the array,\n     * and thus rendered on top of other display objects within the same container.\n     * @see PIXI.Container#sortableChildren\n     */\n    get zIndex(): number\n    {\n        return this._zIndex;\n    }\n\n    set zIndex(value: number)\n    {\n        this._zIndex = value;\n        if (this.parent)\n        {\n            this.parent.sortDirty = true;\n        }\n    }\n\n    /**\n     * Indicates if the object is globally visible.\n     * @readonly\n     */\n    get worldVisible(): boolean\n    {\n        let item = this as DisplayObject;\n\n        do\n        {\n            if (!item.visible)\n            {\n                return false;\n            }\n\n            item = item.parent;\n        } while (item);\n\n        return true;\n    }\n\n    /**\n     * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n     * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n     * {@link PIXI.Graphics} or a {@link PIXI.Sprite} object. This allows for much faster masking in canvas as it\n     * utilities shape clipping. Furthermore, a mask of an object must be in the subtree of its parent.\n     * Otherwise, `getLocalBounds` may calculate incorrect bounds, which makes the container's width and height wrong.\n     * To remove a mask, set this property to `null`.\n     *\n     * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n     * @example\n     * const graphics = new PIXI.Graphics();\n     * graphics.beginFill(0xFF3300);\n     * graphics.drawRect(50, 250, 100, 100);\n     * graphics.endFill();\n     *\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.mask = graphics;\n     * @todo At the moment, PIXI.CanvasRenderer doesn't support PIXI.Sprite as mask.\n     */\n    get mask(): Container | MaskData | null\n    {\n        return this._mask;\n    }\n\n    set mask(value: Container | MaskData | null)\n    {\n        if (this._mask === value)\n        {\n            return;\n        }\n\n        if (this._mask)\n        {\n            const maskObject = ((this._mask as MaskData).isMaskData\n                ? (this._mask as MaskData).maskObject : this._mask) as Container;\n\n            if (maskObject)\n            {\n                maskObject._maskRefCount--;\n\n                if (maskObject._maskRefCount === 0)\n                {\n                    maskObject.renderable = true;\n                    maskObject.isMask = false;\n                }\n            }\n        }\n\n        this._mask = value;\n\n        if (this._mask)\n        {\n            const maskObject = ((this._mask as MaskData).isMaskData\n                ? (this._mask as MaskData).maskObject : this._mask) as Container;\n\n            if (maskObject)\n            {\n                if (maskObject._maskRefCount === 0)\n                {\n                    maskObject.renderable = false;\n                    maskObject.isMask = true;\n                }\n\n                maskObject._maskRefCount++;\n            }\n        }\n    }\n}\n\n/**\n * @private\n */\nexport class TemporaryDisplayObject extends DisplayObject\n{\n    calculateBounds: () => null;\n    removeChild: (child: DisplayObject) => null;\n    render: (renderer: Renderer) => null;\n    sortDirty: boolean = null;\n}\n\n/**\n * DisplayObject default updateTransform, does not update children of container.\n * Will crash if there's no parent element.\n * @memberof PIXI.DisplayObject#\n * @method displayObjectUpdateTransform\n */\nDisplayObject.prototype.displayObjectUpdateTransform = DisplayObject.prototype.updateTransform;\n","import { settings } from '@pixi/settings';\nimport { removeItems } from '@pixi/utils';\nimport { DisplayObject } from './DisplayObject';\nimport type { Matrix, Rectangle } from '@pixi/math';\nimport { MASK_TYPES } from '@pixi/constants';\n\nimport type { MaskData, Renderer } from '@pixi/core';\nimport type { IDestroyOptions } from './DisplayObject';\n\nfunction sortChildren(a: DisplayObject, b: DisplayObject): number\n{\n    if (a.zIndex === b.zIndex)\n    {\n        return a._lastSortedIndex - b._lastSortedIndex;\n    }\n\n    return a.zIndex - b.zIndex;\n}\n\nexport interface Container extends GlobalMixins.Container, DisplayObject {}\n\n/**\n * Container is a general-purpose display object that holds children. It also adds built-in support for advanced\n * rendering features like masking and filtering.\n *\n * It is the base class of all display objects that act as a container for other objects, including Graphics\n * and Sprite.\n *\n * ```js\n * import { BlurFilter } from '@pixi/filter-blur';\n * import { Container } from '@pixi/display';\n * import { Graphics } from '@pixi/graphics';\n * import { Sprite } from '@pixi/sprite';\n *\n * let container = new Container();\n * let sprite = Sprite.from(\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/693612/IaUrttj.png\");\n *\n * sprite.width = 512;\n * sprite.height = 512;\n *\n * // Adds a sprite as a child to this container. As a result, the sprite will be rendered whenever the container\n * // is rendered.\n * container.addChild(sprite);\n *\n * // Blurs whatever is rendered by the container\n * container.filters = [new BlurFilter()];\n *\n * // Only the contents within a circle at the center should be rendered onto the screen.\n * container.mask = new Graphics()\n *  .beginFill(0xffffff)\n *  .drawCircle(sprite.width / 2, sprite.height / 2, Math.min(sprite.width, sprite.height) / 2)\n *  .endFill();\n * ```\n * @memberof PIXI\n */\nexport class Container<T extends DisplayObject = DisplayObject> extends DisplayObject\n{\n    /**\n     * The array of children of this container.\n     * @readonly\n     */\n    public readonly children: T[];\n\n    /**\n     * If set to true, the container will sort its children by zIndex value\n     * when updateTransform() is called, or manually if sortChildren() is called.\n     *\n     * This actually changes the order of elements in the array, so should be treated\n     * as a basic solution that is not performant compared to other solutions,\n     * such as @link https://github.com/pixijs/pixi-display\n     *\n     * Also be aware of that this may not work nicely with the addChildAt() function,\n     * as the zIndex sorting may cause the child to automatically sorted to another position.\n     * @see PIXI.settings.SORTABLE_CHILDREN\n     */\n    public sortableChildren: boolean;\n\n    /**\n     * Should children be sorted by zIndex at the next updateTransform call.\n     *\n     * Will get automatically set to true if a new child is added, or if a child's zIndex changes.\n     */\n    public sortDirty: boolean;\n    public parent: Container;\n    public containerUpdateTransform: () => void;\n\n    protected _width: number;\n    protected _height: number;\n\n    constructor()\n    {\n        super();\n\n        this.children = [];\n        this.sortableChildren = settings.SORTABLE_CHILDREN;\n        this.sortDirty = false;\n\n        /**\n         * Fired when a DisplayObject is added to this Container.\n         * @event PIXI.Container#childAdded\n         * @param {PIXI.DisplayObject} child - The child added to the Container.\n         * @param {PIXI.Container} container - The container that added the child.\n         * @param {number} index - The children's index of the added child.\n         */\n\n        /**\n         * Fired when a DisplayObject is removed from this Container.\n         * @event PIXI.DisplayObject#childRemoved\n         * @param {PIXI.DisplayObject} child - The child removed from the Container.\n         * @param {PIXI.Container} container - The container that removed the child.\n         * @param {number} index - The former children's index of the removed child\n         */\n    }\n\n    /**\n     * Overridable method that can be used by Container subclasses whenever the children array is modified.\n     * @param _length\n     */\n    protected onChildrenChange(_length?: number): void\n    {\n        /* empty */\n    }\n\n    /**\n     * Adds one or more children to the container.\n     *\n     * Multiple items can be added like so: `myContainer.addChild(thingOne, thingTwo, thingThree)`\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to add to the container\n     * @returns {PIXI.DisplayObject} - The first child that was added.\n     */\n    addChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the array and add all children\n            for (let i = 0; i < children.length; i++)\n            {\n                // eslint-disable-next-line prefer-rest-params\n                this.addChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            // if the child has a parent then lets remove it as PixiJS objects can only exist in one place\n\n            if (child.parent)\n            {\n                child.parent.removeChild(child);\n            }\n\n            child.parent = this;\n            this.sortDirty = true;\n\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n\n            this.children.push(child);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(this.children.length - 1);\n            this.emit('childAdded', child, this, this.children.length - 1);\n            child.emit('added', this);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Adds a child to the container at a specified index. If the index is out of bounds an error will be thrown\n     * @param {PIXI.DisplayObject} child - The child to add\n     * @param {number} index - The index to place the child in\n     * @returns {PIXI.DisplayObject} The child that was added.\n     */\n    addChildAt<U extends T>(child: U, index: number): U\n    {\n        if (index < 0 || index > this.children.length)\n        {\n            throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        if (child.parent)\n        {\n            child.parent.removeChild(child);\n        }\n\n        child.parent = this;\n        this.sortDirty = true;\n\n        // ensure child transform will be recalculated\n        child.transform._parentID = -1;\n\n        this.children.splice(index, 0, child);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('added', this);\n        this.emit('childAdded', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Swaps the position of 2 Display Objects within this container.\n     * @param child - First display object to swap\n     * @param child2 - Second display object to swap\n     */\n    swapChildren(child: T, child2: T): void\n    {\n        if (child === child2)\n        {\n            return;\n        }\n\n        const index1 = this.getChildIndex(child);\n        const index2 = this.getChildIndex(child2);\n\n        this.children[index1] = child2;\n        this.children[index2] = child;\n        this.onChildrenChange(index1 < index2 ? index1 : index2);\n    }\n\n    /**\n     * Returns the index position of a child DisplayObject instance\n     * @param child - The DisplayObject instance to identify\n     * @returns - The index position of the child display object to identify\n     */\n    getChildIndex(child: T): number\n    {\n        const index = this.children.indexOf(child);\n\n        if (index === -1)\n        {\n            throw new Error('The supplied DisplayObject must be a child of the caller');\n        }\n\n        return index;\n    }\n\n    /**\n     * Changes the position of an existing child in the display object container\n     * @param child - The child DisplayObject instance for which you want to change the index number\n     * @param index - The resulting index number for the child display object\n     */\n    setChildIndex(child: T, index: number): void\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n        }\n\n        const currentIndex = this.getChildIndex(child);\n\n        removeItems(this.children, currentIndex, 1); // remove from old position\n        this.children.splice(index, 0, child); // add at new position\n\n        this.onChildrenChange(index);\n    }\n\n    /**\n     * Returns the child at the specified index\n     * @param index - The index to get the child at\n     * @returns - The child at the given index, if any.\n     */\n    getChildAt(index: number): T\n    {\n        if (index < 0 || index >= this.children.length)\n        {\n            throw new Error(`getChildAt: Index (${index}) does not exist.`);\n        }\n\n        return this.children[index];\n    }\n\n    /**\n     * Removes one or more children from the container.\n     * @param {...PIXI.DisplayObject} children - The DisplayObject(s) to remove\n     * @returns {PIXI.DisplayObject} The first child that was removed.\n     */\n    removeChild<U extends T[]>(...children: U): U[0]\n    {\n        // if there is only one argument we can bypass looping through the them\n        if (children.length > 1)\n        {\n            // loop through the arguments property and remove all children\n            for (let i = 0; i < children.length; i++)\n            {\n                this.removeChild(children[i]);\n            }\n        }\n        else\n        {\n            const child = children[0];\n            const index = this.children.indexOf(child);\n\n            if (index === -1) return null;\n\n            child.parent = null;\n            // ensure child transform will be recalculated\n            child.transform._parentID = -1;\n            removeItems(this.children, index, 1);\n\n            // ensure bounds will be recalculated\n            this._boundsID++;\n\n            // TODO - lets either do all callbacks or all events.. not both!\n            this.onChildrenChange(index);\n            child.emit('removed', this);\n            this.emit('childRemoved', child, this, index);\n        }\n\n        return children[0];\n    }\n\n    /**\n     * Removes a child from the specified index position.\n     * @param index - The index to get the child from\n     * @returns The child that was removed.\n     */\n    removeChildAt(index: number): T\n    {\n        const child = this.getChildAt(index);\n\n        // ensure child transform will be recalculated..\n        child.parent = null;\n        child.transform._parentID = -1;\n        removeItems(this.children, index, 1);\n\n        // ensure bounds will be recalculated\n        this._boundsID++;\n\n        // TODO - lets either do all callbacks or all events.. not both!\n        this.onChildrenChange(index);\n        child.emit('removed', this);\n        this.emit('childRemoved', child, this, index);\n\n        return child;\n    }\n\n    /**\n     * Removes all children from this container that are within the begin and end indexes.\n     * @param beginIndex - The beginning position.\n     * @param endIndex - The ending position. Default value is size of the container.\n     * @returns - List of removed children\n     */\n    removeChildren(beginIndex = 0, endIndex = this.children.length): T[]\n    {\n        const begin = beginIndex;\n        const end = endIndex;\n        const range = end - begin;\n        let removed;\n\n        if (range > 0 && range <= end)\n        {\n            removed = this.children.splice(begin, range);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].parent = null;\n                if (removed[i].transform)\n                {\n                    removed[i].transform._parentID = -1;\n                }\n            }\n\n            this._boundsID++;\n\n            this.onChildrenChange(beginIndex);\n\n            for (let i = 0; i < removed.length; ++i)\n            {\n                removed[i].emit('removed', this);\n                this.emit('childRemoved', removed[i], this, i);\n            }\n\n            return removed;\n        }\n        else if (range === 0 && this.children.length === 0)\n        {\n            return [];\n        }\n\n        throw new RangeError('removeChildren: numeric values are outside the acceptable range.');\n    }\n\n    /** Sorts children by zIndex. Previous order is maintained for 2 children with the same zIndex. */\n    sortChildren(): void\n    {\n        let sortRequired = false;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            child._lastSortedIndex = i;\n\n            if (!sortRequired && child.zIndex !== 0)\n            {\n                sortRequired = true;\n            }\n        }\n\n        if (sortRequired && this.children.length > 1)\n        {\n            this.children.sort(sortChildren);\n        }\n\n        this.sortDirty = false;\n    }\n\n    /** Updates the transform on all children of this container for rendering. */\n    updateTransform(): void\n    {\n        if (this.sortableChildren && this.sortDirty)\n        {\n            this.sortChildren();\n        }\n\n        this._boundsID++;\n\n        this.transform.updateTransform(this.parent.transform);\n\n        // TODO: check render flags, how to process stuff here\n        this.worldAlpha = this.alpha * this.parent.worldAlpha;\n\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n\n            if (child.visible)\n            {\n                child.updateTransform();\n            }\n        }\n    }\n\n    /**\n     * Recalculates the bounds of the container.\n     *\n     * This implementation will automatically fit the children's bounds into the calculation. Each child's bounds\n     * is limited to its mask's bounds or filterArea, if any is applied.\n     */\n    calculateBounds(): void\n    {\n        this._bounds.clear();\n\n        this._calculateBounds();\n\n        for (let i = 0; i < this.children.length; i++)\n        {\n            const child = this.children[i];\n\n            if (!child.visible || !child.renderable)\n            {\n                continue;\n            }\n\n            child.calculateBounds();\n\n            // TODO: filter+mask, need to mask both somehow\n            if (child._mask)\n            {\n                const maskObject = ((child._mask as MaskData).isMaskData\n                    ? (child._mask as MaskData).maskObject : child._mask) as Container;\n\n                if (maskObject)\n                {\n                    maskObject.calculateBounds();\n                    this._bounds.addBoundsMask(child._bounds, maskObject._bounds);\n                }\n                else\n                {\n                    this._bounds.addBounds(child._bounds);\n                }\n            }\n            else if (child.filterArea)\n            {\n                this._bounds.addBoundsArea(child._bounds, child.filterArea);\n            }\n            else\n            {\n                this._bounds.addBounds(child._bounds);\n            }\n        }\n\n        this._bounds.updateID = this._boundsID;\n    }\n\n    /**\n     * Retrieves the local bounds of the displayObject as a rectangle object.\n     *\n     * Calling `getLocalBounds` may invalidate the `_bounds` of the whole subtree below. If using it inside a render()\n     * call, it is advised to call `getBounds()` immediately after to recalculate the world bounds of the subtree.\n     * @param rect - Optional rectangle to store the result of the bounds calculation.\n     * @param skipChildrenUpdate - Setting to `true` will stop re-calculation of children transforms,\n     *  it was default behaviour of pixi 4.0-5.2 and caused many problems to users.\n     * @returns - The rectangular bounding area.\n     */\n    public getLocalBounds(rect?: Rectangle, skipChildrenUpdate = false): Rectangle\n    {\n        const result = super.getLocalBounds(rect);\n\n        if (!skipChildrenUpdate)\n        {\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                const child = this.children[i];\n\n                if (child.visible)\n                {\n                    child.updateTransform();\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * Recalculates the content bounds of this object. This should be overriden to\n     * calculate the bounds of this specific object (not including children).\n     * @protected\n     */\n    protected _calculateBounds(): void\n    {\n        // FILL IN//\n    }\n\n    /**\n     * Renders this object and its children with culling.\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    protected _renderWithCulling(renderer: Renderer): void\n    {\n        const sourceFrame = renderer.renderTexture.sourceFrame;\n\n        // If the source frame is empty, stop rendering.\n        if (!(sourceFrame.width > 0 && sourceFrame.height > 0))\n        {\n            return;\n        }\n\n        // Render the content of the container only if its bounds intersect with the source frame.\n        // All filters are on the stack at this point, and the filter source frame is bound:\n        // therefore, even if the bounds to non intersect the filter frame, the filter\n        // is still applied and any filter padding that is in the frame is rendered correctly.\n\n        let bounds: Rectangle;\n        let transform: Matrix;\n\n        // If cullArea is set, we use this rectangle instead of the bounds of the object. The cullArea\n        // rectangle must completely contain the container and its children including filter padding.\n        if (this.cullArea)\n        {\n            bounds = this.cullArea;\n            transform = this.worldTransform;\n        }\n        // If the container doesn't override _render, we can skip the bounds calculation and intersection test.\n        else if (this._render !== Container.prototype._render)\n        {\n            bounds = this.getBounds(true);\n        }\n\n        // Render the container if the source frame intersects the bounds.\n        if (bounds && sourceFrame.intersects(bounds, transform))\n        {\n            this._render(renderer);\n        }\n        // If the bounds are defined by cullArea and do not intersect with the source frame, stop rendering.\n        else if (this.cullArea)\n        {\n            return;\n        }\n\n        // Unless cullArea is set, we cannot skip the children if the bounds of the container do not intersect\n        // the source frame, because the children might have filters with nonzero padding, which may intersect\n        // with the source frame while the bounds do not: filter padding is not included in the bounds.\n\n        // If cullArea is not set, render the children with culling temporarily enabled so that they are not rendered\n        // if they are out of frame; otherwise, render the children normally.\n        for (let i = 0, j = this.children.length; i < j; ++i)\n        {\n            const child = this.children[i];\n            const childCullable = child.cullable;\n\n            child.cullable = childCullable || !this.cullArea;\n            child.render(renderer);\n            child.cullable = childCullable;\n        }\n    }\n\n    /**\n     * Renders the object using the WebGL renderer.\n     *\n     * The [_render]{@link PIXI.Container#_render} method is be overriden for rendering the contents of the\n     * container itself. This `render` method will invoke it, and also invoke the `render` methods of all\n     * children afterward.\n     *\n     * If `renderable` or `visible` is false or if `worldAlpha` is not positive or if `cullable` is true and\n     * the bounds of this object are out of frame, this implementation will entirely skip rendering.\n     * See {@link PIXI.DisplayObject} for choosing between `renderable` or `visible`. Generally,\n     * setting alpha to zero is not recommended for purely skipping rendering.\n     *\n     * When your scene becomes large (especially when it is larger than can be viewed in a single screen), it is\n     * advised to employ **culling** to automatically skip rendering objects outside of the current screen.\n     * See [cullable]{@link PIXI.DisplayObject#cullable} and [cullArea]{@link PIXI.DisplayObject#cullArea}.\n     * Other culling methods might be better suited for a large number static objects; see\n     * [@pixi-essentials/cull]{@link https://www.npmjs.com/package/@pixi-essentials/cull} and\n     * [pixi-cull]{@link https://www.npmjs.com/package/pixi-cull}.\n     *\n     * The [renderAdvanced]{@link PIXI.Container#renderAdvanced} method is internally used when when masking or\n     * filtering is applied on a container. This does, however, break batching and can affect performance when\n     * masking and filtering is applied extensively throughout the scene graph.\n     * @param renderer - The renderer\n     */\n    render(renderer: Renderer): void\n    {\n        // if the object is not visible or the alpha is 0 then no need to render this element\n        if (!this.visible || this.worldAlpha <= 0 || !this.renderable)\n        {\n            return;\n        }\n\n        // do a quick check to see if this element has a mask or a filter.\n        if (this._mask || (this.filters && this.filters.length))\n        {\n            this.renderAdvanced(renderer);\n        }\n        else if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n    }\n\n    /**\n     * Render the object using the WebGL renderer and advanced features.\n     * @param renderer - The renderer\n     */\n    protected renderAdvanced(renderer: Renderer): void\n    {\n        const filters = this.filters;\n        const mask = this._mask as MaskData;\n\n        // push filter first as we need to ensure the stencil buffer is correct for any masking\n        if (filters)\n        {\n            if (!this._enabledFilters)\n            {\n                this._enabledFilters = [];\n            }\n\n            this._enabledFilters.length = 0;\n\n            for (let i = 0; i < filters.length; i++)\n            {\n                if (filters[i].enabled)\n                {\n                    this._enabledFilters.push(filters[i]);\n                }\n            }\n        }\n\n        const flush = (filters && this._enabledFilters && this._enabledFilters.length)\n            || (mask && (!mask.isMaskData\n                || (mask.enabled && (mask.autoDetect || mask.type !== MASK_TYPES.NONE))));\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (filters && this._enabledFilters && this._enabledFilters.length)\n        {\n            renderer.filter.push(this, this._enabledFilters);\n        }\n\n        if (mask)\n        {\n            renderer.mask.push(this, this._mask);\n        }\n\n        if (this.cullable)\n        {\n            this._renderWithCulling(renderer);\n        }\n        else\n        {\n            this._render(renderer);\n\n            for (let i = 0, j = this.children.length; i < j; ++i)\n            {\n                this.children[i].render(renderer);\n            }\n        }\n\n        if (flush)\n        {\n            renderer.batch.flush();\n        }\n\n        if (mask)\n        {\n            renderer.mask.pop(this);\n        }\n\n        if (filters && this._enabledFilters && this._enabledFilters.length)\n        {\n            renderer.filter.pop();\n        }\n    }\n\n    /**\n     * To be overridden by the subclasses.\n     * @param _renderer - The renderer\n     */\n    protected _render(_renderer: Renderer): void // eslint-disable-line no-unused-vars\n    {\n        // this is where content itself gets rendered...\n    }\n\n    /**\n     * Removes all internal references and listeners as well as removes children from the display list.\n     * Do not use a Container after calling `destroy`.\n     * @param options - Options parameter. A boolean will act as if all options\n     *  have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have their destroy\n     *  method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options?: IDestroyOptions | boolean): void\n    {\n        super.destroy();\n\n        this.sortDirty = false;\n\n        const destroyChildren = typeof options === 'boolean' ? options : options && options.children;\n\n        const oldChildren = this.removeChildren(0, this.children.length);\n\n        if (destroyChildren)\n        {\n            for (let i = 0; i < oldChildren.length; ++i)\n            {\n                oldChildren[i].destroy(options);\n            }\n        }\n    }\n\n    /** The width of the Container, setting this will actually modify the scale to achieve the value set. */\n    get width(): number\n    {\n        return this.scale.x * this.getLocalBounds().width;\n    }\n\n    set width(value: number)\n    {\n        const width = this.getLocalBounds().width;\n\n        if (width !== 0)\n        {\n            this.scale.x = value / width;\n        }\n        else\n        {\n            this.scale.x = 1;\n        }\n\n        this._width = value;\n    }\n\n    /** The height of the Container, setting this will actually modify the scale to achieve the value set. */\n    get height(): number\n    {\n        return this.scale.y * this.getLocalBounds().height;\n    }\n\n    set height(value: number)\n    {\n        const height = this.getLocalBounds().height;\n\n        if (height !== 0)\n        {\n            this.scale.y = value / height;\n        }\n        else\n        {\n            this.scale.y = 1;\n        }\n\n        this._height = value;\n    }\n}\n\n/**\n * Container default updateTransform, does update children of container.\n * Will crash if there's no parent element.\n * @memberof PIXI.Container#\n * @method containerUpdateTransform\n */\nContainer.prototype.containerUpdateTransform = Container.prototype.updateTransform;\n","var __pow = Math.pow;\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\nimport { EventEmitter, url } from \"@pixi/utils\";\nimport { Matrix, Transform, Point, ObservablePoint } from \"@pixi/math\";\nimport { Texture } from \"@pixi/core\";\nimport { Container } from \"@pixi/display\";\nconst LOGICAL_WIDTH = 2;\nconst LOGICAL_HEIGHT = 2;\nvar CubismConfig;\n((CubismConfig2) => {\n  CubismConfig2.supportMoreMaskDivisions = true;\n  CubismConfig2.setOpacityFromMotion = false;\n})(CubismConfig || (CubismConfig = {}));\nvar config;\n((config2) => {\n  config2.LOG_LEVEL_VERBOSE = 0;\n  config2.LOG_LEVEL_WARNING = 1;\n  config2.LOG_LEVEL_ERROR = 2;\n  config2.LOG_LEVEL_NONE = 999;\n  config2.logLevel = config2.LOG_LEVEL_WARNING;\n  config2.sound = true;\n  config2.motionSync = true;\n  config2.motionFadingDuration = 500;\n  config2.idleMotionFadingDuration = 2e3;\n  config2.expressionFadingDuration = 500;\n  config2.preserveExpressionOnMotion = true;\n  config2.cubism4 = CubismConfig;\n})(config || (config = {}));\nconst VERSION = \"0.4.0\";\nconst logger = {\n  log(tag, ...messages) {\n    if (config.logLevel <= config.LOG_LEVEL_VERBOSE) {\n      console.log(`[${tag}]`, ...messages);\n    }\n  },\n  warn(tag, ...messages) {\n    if (config.logLevel <= config.LOG_LEVEL_WARNING) {\n      console.warn(`[${tag}]`, ...messages);\n    }\n  },\n  error(tag, ...messages) {\n    if (config.logLevel <= config.LOG_LEVEL_ERROR) {\n      console.error(`[${tag}]`, ...messages);\n    }\n  }\n};\nfunction clamp(num, lower, upper) {\n  return num < lower ? lower : num > upper ? upper : num;\n}\nfunction rand(min, max) {\n  return Math.random() * (max - min) + min;\n}\nfunction copyProperty(type, from, to, fromKey, toKey) {\n  const value = from[fromKey];\n  if (value !== null && typeof value === type) {\n    to[toKey] = value;\n  }\n}\nfunction copyArray(type, from, to, fromKey, toKey) {\n  const array = from[fromKey];\n  if (Array.isArray(array)) {\n    to[toKey] = array.filter((item) => item !== null && typeof item === type);\n  }\n}\nfunction applyMixins(derivedCtor, baseCtors) {\n  baseCtors.forEach((baseCtor) => {\n    Object.getOwnPropertyNames(baseCtor.prototype).forEach((name) => {\n      if (name !== \"constructor\") {\n        Object.defineProperty(derivedCtor.prototype, name, Object.getOwnPropertyDescriptor(baseCtor.prototype, name));\n      }\n    });\n  });\n}\nfunction folderName(url2) {\n  let lastSlashIndex = url2.lastIndexOf(\"/\");\n  if (lastSlashIndex != -1) {\n    url2 = url2.slice(0, lastSlashIndex);\n  }\n  lastSlashIndex = url2.lastIndexOf(\"/\");\n  if (lastSlashIndex !== -1) {\n    url2 = url2.slice(lastSlashIndex + 1);\n  }\n  return url2;\n}\nfunction remove(array, item) {\n  const index = array.indexOf(item);\n  if (index !== -1) {\n    array.splice(index, 1);\n  }\n}\nclass ExpressionManager extends EventEmitter {\n  constructor(settings, options) {\n    super();\n    this.expressions = [];\n    this.reserveExpressionIndex = -1;\n    this.destroyed = false;\n    this.settings = settings;\n    this.tag = `ExpressionManager(${settings.name})`;\n  }\n  init() {\n    this.defaultExpression = this.createExpression({}, void 0);\n    this.currentExpression = this.defaultExpression;\n    this.stopAllExpressions();\n  }\n  loadExpression(index) {\n    return __async(this, null, function* () {\n      if (!this.definitions[index]) {\n        logger.warn(this.tag, `Undefined expression at [${index}]`);\n        return void 0;\n      }\n      if (this.expressions[index] === null) {\n        logger.warn(this.tag, `Cannot set expression at [${index}] because it's already failed in loading.`);\n        return void 0;\n      }\n      if (this.expressions[index]) {\n        return this.expressions[index];\n      }\n      const expression = yield this._loadExpression(index);\n      this.expressions[index] = expression;\n      return expression;\n    });\n  }\n  _loadExpression(index) {\n    throw new Error(\"Not implemented.\");\n  }\n  setRandomExpression() {\n    return __async(this, null, function* () {\n      if (this.definitions.length) {\n        const availableIndices = [];\n        for (let i = 0; i < this.definitions.length; i++) {\n          if (this.expressions[i] !== null && this.expressions[i] !== this.currentExpression && i !== this.reserveExpressionIndex) {\n            availableIndices.push(i);\n          }\n        }\n        if (availableIndices.length) {\n          const index = Math.floor(Math.random() * availableIndices.length);\n          return this.setExpression(index);\n        }\n      }\n      return false;\n    });\n  }\n  resetExpression() {\n    this._setExpression(this.defaultExpression);\n  }\n  restoreExpression() {\n    this._setExpression(this.currentExpression);\n  }\n  setExpression(index) {\n    return __async(this, null, function* () {\n      if (typeof index !== \"number\") {\n        index = this.getExpressionIndex(index);\n      }\n      if (!(index > -1 && index < this.definitions.length)) {\n        return false;\n      }\n      if (index === this.expressions.indexOf(this.currentExpression)) {\n        return false;\n      }\n      this.reserveExpressionIndex = index;\n      const expression = yield this.loadExpression(index);\n      if (!expression || this.reserveExpressionIndex !== index) {\n        return false;\n      }\n      this.reserveExpressionIndex = -1;\n      this.currentExpression = expression;\n      this._setExpression(expression);\n      return true;\n    });\n  }\n  update(model, now) {\n    if (!this.isFinished()) {\n      return this.updateParameters(model, now);\n    }\n    return false;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\");\n    const self = this;\n    self.definitions = void 0;\n    self.expressions = void 0;\n  }\n}\nconst EPSILON = 0.01;\nconst MAX_SPEED = 40 / 7.5;\nconst ACCELERATION_TIME = 1 / (0.15 * 1e3);\nclass FocusController {\n  constructor() {\n    this.targetX = 0;\n    this.targetY = 0;\n    this.x = 0;\n    this.y = 0;\n    this.vx = 0;\n    this.vy = 0;\n  }\n  focus(x, y, instant = false) {\n    this.targetX = clamp(x, -1, 1);\n    this.targetY = clamp(y, -1, 1);\n    if (instant) {\n      this.x = this.targetX;\n      this.y = this.targetY;\n    }\n  }\n  update(dt) {\n    const dx = this.targetX - this.x;\n    const dy = this.targetY - this.y;\n    if (Math.abs(dx) < EPSILON && Math.abs(dy) < EPSILON)\n      return;\n    const d = Math.sqrt(__pow(dx, 2) + __pow(dy, 2));\n    const maxSpeed = MAX_SPEED / (1e3 / dt);\n    let ax = maxSpeed * (dx / d) - this.vx;\n    let ay = maxSpeed * (dy / d) - this.vy;\n    const a = Math.sqrt(__pow(ax, 2) + __pow(ay, 2));\n    const maxA = maxSpeed * ACCELERATION_TIME * dt;\n    if (a > maxA) {\n      ax *= maxA / a;\n      ay *= maxA / a;\n    }\n    this.vx += ax;\n    this.vy += ay;\n    const v = Math.sqrt(__pow(this.vx, 2) + __pow(this.vy, 2));\n    const maxV = 0.5 * (Math.sqrt(__pow(maxA, 2) + 8 * maxA * d) - maxA);\n    if (v > maxV) {\n      this.vx *= maxV / v;\n      this.vy *= maxV / v;\n    }\n    this.x += this.vx;\n    this.y += this.vy;\n  }\n}\nclass ModelSettings {\n  constructor(json) {\n    this.json = json;\n    let url2 = json.url;\n    if (typeof url2 !== \"string\") {\n      throw new TypeError(\"The `url` field in settings JSON must be defined as a string.\");\n    }\n    this.url = url2;\n    this.name = folderName(this.url);\n  }\n  resolveURL(path) {\n    return url.resolve(this.url, path);\n  }\n  replaceFiles(replacer) {\n    this.moc = replacer(this.moc, \"moc\");\n    if (this.pose !== void 0) {\n      this.pose = replacer(this.pose, \"pose\");\n    }\n    if (this.physics !== void 0) {\n      this.physics = replacer(this.physics, \"physics\");\n    }\n    for (let i = 0; i < this.textures.length; i++) {\n      this.textures[i] = replacer(this.textures[i], `textures[${i}]`);\n    }\n  }\n  getDefinedFiles() {\n    const files = [];\n    this.replaceFiles((file) => {\n      files.push(file);\n      return file;\n    });\n    return files;\n  }\n  validateFiles(files) {\n    const assertFileExists = (expectedFile, shouldThrow) => {\n      const actualPath = this.resolveURL(expectedFile);\n      if (!files.includes(actualPath)) {\n        if (shouldThrow) {\n          throw new Error(`File \"${expectedFile}\" is defined in settings, but doesn't exist in given files`);\n        }\n        return false;\n      }\n      return true;\n    };\n    const essentialFiles = [this.moc, ...this.textures];\n    essentialFiles.forEach((texture) => assertFileExists(texture, true));\n    const definedFiles = this.getDefinedFiles();\n    return definedFiles.filter((file) => assertFileExists(file, false));\n  }\n}\nvar MotionPriority = /* @__PURE__ */ ((MotionPriority2) => {\n  MotionPriority2[MotionPriority2[\"NONE\"] = 0] = \"NONE\";\n  MotionPriority2[MotionPriority2[\"IDLE\"] = 1] = \"IDLE\";\n  MotionPriority2[MotionPriority2[\"NORMAL\"] = 2] = \"NORMAL\";\n  MotionPriority2[MotionPriority2[\"FORCE\"] = 3] = \"FORCE\";\n  return MotionPriority2;\n})(MotionPriority || {});\nclass MotionState {\n  constructor() {\n    this.debug = false;\n    this.currentPriority = 0;\n    this.reservePriority = 0;\n  }\n  reserve(group, index, priority) {\n    if (priority <= 0) {\n      logger.log(this.tag, `Cannot start a motion with MotionPriority.NONE.`);\n      return false;\n    }\n    if (group === this.currentGroup && index === this.currentIndex) {\n      logger.log(this.tag, `Motion is already playing.`, this.dump(group, index));\n      return false;\n    }\n    if (group === this.reservedGroup && index === this.reservedIndex || group === this.reservedIdleGroup && index === this.reservedIdleIndex) {\n      logger.log(this.tag, `Motion is already reserved.`, this.dump(group, index));\n      return false;\n    }\n    if (priority === 1) {\n      if (this.currentPriority !== 0) {\n        logger.log(this.tag, `Cannot start idle motion because another motion is playing.`, this.dump(group, index));\n        return false;\n      }\n      if (this.reservedIdleGroup !== void 0) {\n        logger.log(this.tag, `Cannot start idle motion because another idle motion has reserved.`, this.dump(group, index));\n        return false;\n      }\n      this.setReservedIdle(group, index);\n    } else {\n      if (priority < 3) {\n        if (priority <= this.currentPriority) {\n          logger.log(this.tag, \"Cannot start motion because another motion is playing as an equivalent or higher priority.\", this.dump(group, index));\n          return false;\n        }\n        if (priority <= this.reservePriority) {\n          logger.log(this.tag, \"Cannot start motion because another motion has reserved as an equivalent or higher priority.\", this.dump(group, index));\n          return false;\n        }\n      }\n      this.setReserved(group, index, priority);\n    }\n    return true;\n  }\n  start(motion, group, index, priority) {\n    if (priority === 1) {\n      this.setReservedIdle(void 0, void 0);\n      if (this.currentPriority !== 0) {\n        logger.log(this.tag, \"Cannot start idle motion because another motion is playing.\", this.dump(group, index));\n        return false;\n      }\n    } else {\n      if (group !== this.reservedGroup || index !== this.reservedIndex) {\n        logger.log(this.tag, \"Cannot start motion because another motion has taken the place.\", this.dump(group, index));\n        return false;\n      }\n      this.setReserved(void 0, void 0, 0);\n    }\n    if (!motion) {\n      return false;\n    }\n    this.setCurrent(group, index, priority);\n    return true;\n  }\n  complete() {\n    this.setCurrent(void 0, void 0, 0);\n  }\n  setCurrent(group, index, priority) {\n    this.currentPriority = priority;\n    this.currentGroup = group;\n    this.currentIndex = index;\n  }\n  setReserved(group, index, priority) {\n    this.reservePriority = priority;\n    this.reservedGroup = group;\n    this.reservedIndex = index;\n  }\n  setReservedIdle(group, index) {\n    this.reservedIdleGroup = group;\n    this.reservedIdleIndex = index;\n  }\n  isActive(group, index) {\n    return group === this.currentGroup && index === this.currentIndex || group === this.reservedGroup && index === this.reservedIndex || group === this.reservedIdleGroup && index === this.reservedIdleIndex;\n  }\n  reset() {\n    this.setCurrent(void 0, void 0, 0);\n    this.setReserved(void 0, void 0, 0);\n    this.setReservedIdle(void 0, void 0);\n  }\n  shouldRequestIdleMotion() {\n    return this.currentGroup === void 0 && this.reservedIdleGroup === void 0;\n  }\n  shouldOverrideExpression() {\n    return !config.preserveExpressionOnMotion && this.currentPriority > 1;\n  }\n  dump(requestedGroup, requestedIndex) {\n    if (this.debug) {\n      const keys = [\n        \"currentPriority\",\n        \"reservePriority\",\n        \"currentGroup\",\n        \"currentIndex\",\n        \"reservedGroup\",\n        \"reservedIndex\",\n        \"reservedIdleGroup\",\n        \"reservedIdleIndex\"\n      ];\n      return `\n<Requested> group = \"${requestedGroup}\", index = ${requestedIndex}\n` + keys.map((key) => \"[\" + key + \"] \" + this[key]).join(\"\\n\");\n    }\n    return \"\";\n  }\n}\nconst TAG$2 = \"SoundManager\";\nconst VOLUME = 0.5;\nclass SoundManager {\n  static get volume() {\n    return this._volume;\n  }\n  static set volume(value) {\n    this._volume = (value > 1 ? 1 : value < 0 ? 0 : value) || 0;\n    this.audios.forEach((audio) => audio.volume = this._volume);\n  }\n  static add(file, onFinish, onError) {\n    const audio = new Audio(file);\n    audio.volume = this._volume;\n    audio.preload = \"auto\";\n    audio.addEventListener(\"ended\", () => {\n      this.dispose(audio);\n      onFinish == null ? void 0 : onFinish();\n    });\n    audio.addEventListener(\"error\", (e) => {\n      this.dispose(audio);\n      logger.warn(TAG$2, `Error occurred on \"${file}\"`, e.error);\n      onError == null ? void 0 : onError(e.error);\n    });\n    this.audios.push(audio);\n    return audio;\n  }\n  static play(audio) {\n    return new Promise((resolve, reject) => {\n      var _a;\n      (_a = audio.play()) == null ? void 0 : _a.catch((e) => {\n        audio.dispatchEvent(new ErrorEvent(\"error\", { error: e }));\n        reject(e);\n      });\n      if (audio.readyState === audio.HAVE_ENOUGH_DATA) {\n        resolve();\n      } else {\n        audio.addEventListener(\"canplaythrough\", resolve);\n      }\n    });\n  }\n  static dispose(audio) {\n    audio.pause();\n    audio.removeAttribute(\"src\");\n    remove(this.audios, audio);\n  }\n  static destroy() {\n    for (let i = this.audios.length - 1; i >= 0; i--) {\n      this.dispose(this.audios[i]);\n    }\n  }\n}\nSoundManager.audios = [];\nSoundManager._volume = VOLUME;\nvar MotionPreloadStrategy = /* @__PURE__ */ ((MotionPreloadStrategy2) => {\n  MotionPreloadStrategy2[\"ALL\"] = \"ALL\";\n  MotionPreloadStrategy2[\"IDLE\"] = \"IDLE\";\n  MotionPreloadStrategy2[\"NONE\"] = \"NONE\";\n  return MotionPreloadStrategy2;\n})(MotionPreloadStrategy || {});\nclass MotionManager extends EventEmitter {\n  constructor(settings, options) {\n    super();\n    this.motionGroups = {};\n    this.state = new MotionState();\n    this.playing = false;\n    this.destroyed = false;\n    this.settings = settings;\n    this.tag = `MotionManager(${settings.name})`;\n    this.state.tag = this.tag;\n  }\n  init(options) {\n    if (options == null ? void 0 : options.idleMotionGroup) {\n      this.groups.idle = options.idleMotionGroup;\n    }\n    this.setupMotions(options);\n    this.stopAllMotions();\n  }\n  setupMotions(options) {\n    for (const group of Object.keys(this.definitions)) {\n      this.motionGroups[group] = [];\n    }\n    let groups;\n    switch (options == null ? void 0 : options.motionPreload) {\n      case \"NONE\":\n        return;\n      case \"ALL\":\n        groups = Object.keys(this.definitions);\n        break;\n      case \"IDLE\":\n      default:\n        groups = [this.groups.idle];\n        break;\n    }\n    for (const group of groups) {\n      if (this.definitions[group]) {\n        for (let i = 0; i < this.definitions[group].length; i++) {\n          this.loadMotion(group, i).then();\n        }\n      }\n    }\n  }\n  loadMotion(group, index) {\n    return __async(this, null, function* () {\n      var _a;\n      if (!((_a = this.definitions[group]) == null ? void 0 : _a[index])) {\n        logger.warn(this.tag, `Undefined motion at \"${group}\"[${index}]`);\n        return void 0;\n      }\n      if (this.motionGroups[group][index] === null) {\n        logger.warn(this.tag, `Cannot start motion at \"${group}\"[${index}] because it's already failed in loading.`);\n        return void 0;\n      }\n      if (this.motionGroups[group][index]) {\n        return this.motionGroups[group][index];\n      }\n      const motion = yield this._loadMotion(group, index);\n      if (this.destroyed) {\n        return;\n      }\n      this.motionGroups[group][index] = motion != null ? motion : null;\n      return motion;\n    });\n  }\n  _loadMotion(group, index) {\n    throw new Error(\"Not implemented.\");\n  }\n  startMotion(_0, _1) {\n    return __async(this, arguments, function* (group, index, priority = MotionPriority.NORMAL) {\n      var _a;\n      if (!this.state.reserve(group, index, priority)) {\n        return false;\n      }\n      const definition = (_a = this.definitions[group]) == null ? void 0 : _a[index];\n      if (!definition) {\n        return false;\n      }\n      if (this.currentAudio) {\n        SoundManager.dispose(this.currentAudio);\n      }\n      let audio;\n      if (config.sound) {\n        const soundURL = this.getSoundFile(definition);\n        if (soundURL) {\n          try {\n            audio = SoundManager.add(this.settings.resolveURL(soundURL), () => this.currentAudio = void 0, () => this.currentAudio = void 0);\n            this.currentAudio = audio;\n          } catch (e) {\n            logger.warn(this.tag, \"Failed to create audio\", soundURL, e);\n          }\n        }\n      }\n      const motion = yield this.loadMotion(group, index);\n      if (audio) {\n        const readyToPlay = SoundManager.play(audio).catch((e) => logger.warn(this.tag, \"Failed to play audio\", audio.src, e));\n        if (config.motionSync) {\n          yield readyToPlay;\n        }\n      }\n      if (!this.state.start(motion, group, index, priority)) {\n        if (audio) {\n          SoundManager.dispose(audio);\n          this.currentAudio = void 0;\n        }\n        return false;\n      }\n      logger.log(this.tag, \"Start motion:\", this.getMotionName(definition));\n      this.emit(\"motionStart\", group, index, audio);\n      if (this.state.shouldOverrideExpression()) {\n        this.expressionManager && this.expressionManager.resetExpression();\n      }\n      this.playing = true;\n      this._startMotion(motion);\n      return true;\n    });\n  }\n  startRandomMotion(group, priority) {\n    return __async(this, null, function* () {\n      const groupDefs = this.definitions[group];\n      if (groupDefs == null ? void 0 : groupDefs.length) {\n        const availableIndices = [];\n        for (let i = 0; i < groupDefs.length; i++) {\n          if (this.motionGroups[group][i] !== null && !this.state.isActive(group, i)) {\n            availableIndices.push(i);\n          }\n        }\n        if (availableIndices.length) {\n          const index = Math.floor(Math.random() * availableIndices.length);\n          return this.startMotion(group, availableIndices[index], priority);\n        }\n      }\n      return false;\n    });\n  }\n  stopAllMotions() {\n    this._stopAllMotions();\n    this.state.reset();\n    if (this.currentAudio) {\n      SoundManager.dispose(this.currentAudio);\n      this.currentAudio = void 0;\n    }\n  }\n  update(model, now) {\n    var _a;\n    if (this.isFinished()) {\n      if (this.playing) {\n        this.playing = false;\n        this.emit(\"motionFinish\");\n      }\n      if (this.state.shouldOverrideExpression()) {\n        (_a = this.expressionManager) == null ? void 0 : _a.restoreExpression();\n      }\n      this.state.complete();\n      if (this.state.shouldRequestIdleMotion()) {\n        this.startRandomMotion(this.groups.idle, MotionPriority.IDLE);\n      }\n    }\n    return this.updateParameters(model, now);\n  }\n  destroy() {\n    var _a;\n    this.destroyed = true;\n    this.emit(\"destroy\");\n    this.stopAllMotions();\n    (_a = this.expressionManager) == null ? void 0 : _a.destroy();\n    const self = this;\n    self.definitions = void 0;\n    self.motionGroups = void 0;\n  }\n}\nconst tempBounds = { x: 0, y: 0, width: 0, height: 0 };\nclass InternalModel extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.focusController = new FocusController();\n    this.originalWidth = 0;\n    this.originalHeight = 0;\n    this.width = 0;\n    this.height = 0;\n    this.localTransform = new Matrix();\n    this.drawingMatrix = new Matrix();\n    this.hitAreas = {};\n    this.textureFlipY = false;\n    this.viewport = [0, 0, 0, 0];\n    this.destroyed = false;\n  }\n  init() {\n    this.setupLayout();\n    this.setupHitAreas();\n  }\n  setupLayout() {\n    const self = this;\n    const size = this.getSize();\n    self.originalWidth = size[0];\n    self.originalHeight = size[1];\n    const layout = Object.assign({\n      width: LOGICAL_WIDTH,\n      height: LOGICAL_HEIGHT\n    }, this.getLayout());\n    this.localTransform.scale(layout.width / LOGICAL_WIDTH, layout.height / LOGICAL_HEIGHT);\n    self.width = this.originalWidth * this.localTransform.a;\n    self.height = this.originalHeight * this.localTransform.d;\n    const offsetX = layout.x !== void 0 && layout.x - layout.width / 2 || layout.centerX !== void 0 && layout.centerX || layout.left !== void 0 && layout.left - layout.width / 2 || layout.right !== void 0 && layout.right + layout.width / 2 || 0;\n    const offsetY = layout.y !== void 0 && layout.y - layout.height / 2 || layout.centerY !== void 0 && layout.centerY || layout.top !== void 0 && layout.top - layout.height / 2 || layout.bottom !== void 0 && layout.bottom + layout.height / 2 || 0;\n    this.localTransform.translate(this.width * offsetX, -this.height * offsetY);\n  }\n  setupHitAreas() {\n    const definitions = this.getHitAreaDefs().filter((hitArea) => hitArea.index >= 0);\n    for (const def of definitions) {\n      this.hitAreas[def.name] = def;\n    }\n  }\n  hitTest(x, y) {\n    return Object.keys(this.hitAreas).filter((hitAreaName) => this.isHit(hitAreaName, x, y));\n  }\n  isHit(hitAreaName, x, y) {\n    if (!this.hitAreas[hitAreaName]) {\n      return false;\n    }\n    const drawIndex = this.hitAreas[hitAreaName].index;\n    const bounds = this.getDrawableBounds(drawIndex, tempBounds);\n    return bounds.x <= x && x <= bounds.x + bounds.width && bounds.y <= y && y <= bounds.y + bounds.height;\n  }\n  getDrawableBounds(index, bounds) {\n    const vertices = this.getDrawableVertices(index);\n    let left = vertices[0];\n    let right = vertices[0];\n    let top = vertices[1];\n    let bottom = vertices[1];\n    for (let i = 0; i < vertices.length; i += 2) {\n      const vx = vertices[i];\n      const vy = vertices[i + 1];\n      left = Math.min(vx, left);\n      right = Math.max(vx, right);\n      top = Math.min(vy, top);\n      bottom = Math.max(vy, bottom);\n    }\n    bounds != null ? bounds : bounds = {};\n    bounds.x = left;\n    bounds.y = top;\n    bounds.width = right - left;\n    bounds.height = bottom - top;\n    return bounds;\n  }\n  updateTransform(transform) {\n    this.drawingMatrix.copyFrom(transform).append(this.localTransform);\n  }\n  update(dt, now) {\n    this.focusController.update(dt);\n  }\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\");\n    this.motionManager.destroy();\n    this.motionManager = void 0;\n  }\n}\nconst TAG$1 = \"XHRLoader\";\nclass NetworkError extends Error {\n  constructor(message, url2, status, aborted = false) {\n    super(message);\n    this.url = url2;\n    this.status = status;\n    this.aborted = aborted;\n  }\n}\nconst _XHRLoader = class {\n  static createXHR(target, url2, type, onload, onerror) {\n    const xhr = new XMLHttpRequest();\n    _XHRLoader.allXhrSet.add(xhr);\n    if (target) {\n      let xhrSet = _XHRLoader.xhrMap.get(target);\n      if (!xhrSet) {\n        xhrSet = /* @__PURE__ */ new Set([xhr]);\n        _XHRLoader.xhrMap.set(target, xhrSet);\n      } else {\n        xhrSet.add(xhr);\n      }\n      if (!target.listeners(\"destroy\").includes(_XHRLoader.cancelXHRs)) {\n        target.once(\"destroy\", _XHRLoader.cancelXHRs);\n      }\n    }\n    xhr.open(\"GET\", url2);\n    xhr.responseType = type;\n    xhr.onload = () => {\n      if ((xhr.status === 200 || xhr.status === 0) && xhr.response) {\n        onload(xhr.response);\n      } else {\n        xhr.onerror();\n      }\n    };\n    xhr.onerror = () => {\n      logger.warn(TAG$1, `Failed to load resource as ${xhr.responseType} (Status ${xhr.status}): ${url2}`);\n      onerror(new NetworkError(\"Network error.\", url2, xhr.status));\n    };\n    xhr.onabort = () => onerror(new NetworkError(\"Aborted.\", url2, xhr.status, true));\n    xhr.onloadend = () => {\n      var _a;\n      _XHRLoader.allXhrSet.delete(xhr);\n      if (target) {\n        (_a = _XHRLoader.xhrMap.get(target)) == null ? void 0 : _a.delete(xhr);\n      }\n    };\n    return xhr;\n  }\n  static cancelXHRs() {\n    var _a;\n    (_a = _XHRLoader.xhrMap.get(this)) == null ? void 0 : _a.forEach((xhr) => {\n      xhr.abort();\n      _XHRLoader.allXhrSet.delete(xhr);\n    });\n    _XHRLoader.xhrMap.delete(this);\n  }\n  static release() {\n    _XHRLoader.allXhrSet.forEach((xhr) => xhr.abort());\n    _XHRLoader.allXhrSet.clear();\n    _XHRLoader.xhrMap = /* @__PURE__ */ new WeakMap();\n  }\n};\nlet XHRLoader = _XHRLoader;\nXHRLoader.xhrMap = /* @__PURE__ */ new WeakMap();\nXHRLoader.allXhrSet = /* @__PURE__ */ new Set();\nXHRLoader.loader = (context, next) => {\n  return new Promise((resolve, reject) => {\n    const xhr = _XHRLoader.createXHR(context.target, context.settings ? context.settings.resolveURL(context.url) : context.url, context.type, (data) => {\n      context.result = data;\n      resolve();\n    }, reject);\n    xhr.send();\n  });\n};\nfunction runMiddlewares(middleware, context) {\n  let index = -1;\n  return dispatch(0);\n  function dispatch(i, err) {\n    if (err)\n      return Promise.reject(err);\n    if (i <= index)\n      return Promise.reject(new Error(\"next() called multiple times\"));\n    index = i;\n    const fn = middleware[i];\n    if (!fn)\n      return Promise.resolve();\n    try {\n      return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\n    } catch (err2) {\n      return Promise.reject(err2);\n    }\n  }\n}\nclass Live2DLoader {\n  static load(context) {\n    return runMiddlewares(this.middlewares, context).then(() => context.result);\n  }\n}\nLive2DLoader.middlewares = [XHRLoader.loader];\nfunction createTexture(url2, options = {}) {\n  var _a;\n  const textureOptions = { resourceOptions: { crossorigin: options.crossOrigin } };\n  if (Texture.fromURL) {\n    return Texture.fromURL(url2, textureOptions).catch((e) => {\n      if (e instanceof Error) {\n        throw e;\n      }\n      const err = new Error(\"Texture loading error\");\n      err.event = e;\n      throw err;\n    });\n  }\n  textureOptions.resourceOptions.autoLoad = false;\n  const texture = Texture.from(url2, textureOptions);\n  if (texture.baseTexture.valid) {\n    return Promise.resolve(texture);\n  }\n  const resource = texture.baseTexture.resource;\n  (_a = resource._live2d_load) != null ? _a : resource._live2d_load = new Promise((resolve, reject) => {\n    const errorHandler = (event) => {\n      resource.source.removeEventListener(\"error\", errorHandler);\n      const err = new Error(\"Texture loading error\");\n      err.event = event;\n      reject(err);\n    };\n    resource.source.addEventListener(\"error\", errorHandler);\n    resource.load().then(() => resolve(texture)).catch(errorHandler);\n  });\n  return resource._live2d_load;\n}\nconst TAG = \"Live2DFactory\";\nconst urlToJSON = (context, next) => __async(void 0, null, function* () {\n  if (typeof context.source === \"string\") {\n    const data = yield Live2DLoader.load({\n      url: context.source,\n      type: \"json\",\n      target: context.live2dModel\n    });\n    data.url = context.source;\n    context.source = data;\n    context.live2dModel.emit(\"settingsJSONLoaded\", data);\n  }\n  return next();\n});\nconst jsonToSettings = (context, next) => __async(void 0, null, function* () {\n  if (context.source instanceof ModelSettings) {\n    context.settings = context.source;\n    return next();\n  } else if (typeof context.source === \"object\") {\n    const runtime = Live2DFactory.findRuntime(context.source);\n    if (runtime) {\n      const settings = runtime.createModelSettings(context.source);\n      context.settings = settings;\n      context.live2dModel.emit(\"settingsLoaded\", settings);\n      return next();\n    }\n  }\n  throw new TypeError(\"Unknown settings format.\");\n});\nconst waitUntilReady = (context, next) => {\n  if (context.settings) {\n    const runtime = Live2DFactory.findRuntime(context.settings);\n    if (runtime) {\n      return runtime.ready().then(next);\n    }\n  }\n  return next();\n};\nconst setupOptionals = (context, next) => __async(void 0, null, function* () {\n  yield next();\n  const internalModel = context.internalModel;\n  if (internalModel) {\n    const settings = context.settings;\n    const runtime = Live2DFactory.findRuntime(settings);\n    if (runtime) {\n      const tasks = [];\n      if (settings.pose) {\n        tasks.push(Live2DLoader.load({\n          settings,\n          url: settings.pose,\n          type: \"json\",\n          target: internalModel\n        }).then((data) => {\n          internalModel.pose = runtime.createPose(internalModel.coreModel, data);\n          context.live2dModel.emit(\"poseLoaded\", internalModel.pose);\n        }).catch((e) => {\n          context.live2dModel.emit(\"poseLoadError\", e);\n          logger.warn(TAG, \"Failed to load pose.\", e);\n        }));\n      }\n      if (settings.physics) {\n        tasks.push(Live2DLoader.load({\n          settings,\n          url: settings.physics,\n          type: \"json\",\n          target: internalModel\n        }).then((data) => {\n          internalModel.physics = runtime.createPhysics(internalModel.coreModel, data);\n          context.live2dModel.emit(\"physicsLoaded\", internalModel.physics);\n        }).catch((e) => {\n          context.live2dModel.emit(\"physicsLoadError\", e);\n          logger.warn(TAG, \"Failed to load physics.\", e);\n        }));\n      }\n      if (tasks.length) {\n        yield Promise.all(tasks);\n      }\n    }\n  }\n});\nconst setupEssentials = (context, next) => __async(void 0, null, function* () {\n  if (context.settings) {\n    const live2DModel = context.live2dModel;\n    const textureLoadings = context.settings.textures.map((tex) => {\n      const url2 = context.settings.resolveURL(tex);\n      return createTexture(url2, { crossOrigin: context.options.crossOrigin });\n    });\n    yield next();\n    if (context.internalModel) {\n      live2DModel.internalModel = context.internalModel;\n      live2DModel.emit(\"modelLoaded\", context.internalModel);\n    } else {\n      throw new TypeError(\"Missing internal model.\");\n    }\n    live2DModel.textures = yield Promise.all(textureLoadings);\n    live2DModel.emit(\"textureLoaded\", live2DModel.textures);\n  } else {\n    throw new TypeError(\"Missing settings.\");\n  }\n});\nconst createInternalModel = (context, next) => __async(void 0, null, function* () {\n  const settings = context.settings;\n  if (settings instanceof ModelSettings) {\n    const runtime = Live2DFactory.findRuntime(settings);\n    if (!runtime) {\n      throw new TypeError(\"Unknown model settings.\");\n    }\n    const modelData = yield Live2DLoader.load({\n      settings,\n      url: settings.moc,\n      type: \"arraybuffer\",\n      target: context.live2dModel\n    });\n    if (!runtime.isValidMoc(modelData)) {\n      throw new Error(\"Invalid moc data\");\n    }\n    const coreModel = runtime.createCoreModel(modelData);\n    context.internalModel = runtime.createInternalModel(coreModel, settings, context.options);\n    return next();\n  }\n  throw new TypeError(\"Missing settings.\");\n});\nconst _Live2DFactory = class {\n  static registerRuntime(runtime) {\n    _Live2DFactory.runtimes.push(runtime);\n    _Live2DFactory.runtimes.sort((a, b) => b.version - a.version);\n  }\n  static findRuntime(source) {\n    for (const runtime of _Live2DFactory.runtimes) {\n      if (runtime.test(source)) {\n        return runtime;\n      }\n    }\n  }\n  static setupLive2DModel(live2dModel, source, options) {\n    return __async(this, null, function* () {\n      const textureLoaded = new Promise((resolve) => live2dModel.once(\"textureLoaded\", resolve));\n      const modelLoaded = new Promise((resolve) => live2dModel.once(\"modelLoaded\", resolve));\n      const readyEventEmitted = Promise.all([textureLoaded, modelLoaded]).then(() => live2dModel.emit(\"ready\"));\n      yield runMiddlewares(_Live2DFactory.live2DModelMiddlewares, {\n        live2dModel,\n        source,\n        options: options || {}\n      });\n      yield readyEventEmitted;\n      live2dModel.emit(\"load\");\n    });\n  }\n  static loadMotion(motionManager, group, index) {\n    var _a, _b;\n    const handleError = (e) => motionManager.emit(\"motionLoadError\", group, index, e);\n    try {\n      const definition = (_a = motionManager.definitions[group]) == null ? void 0 : _a[index];\n      if (!definition) {\n        return Promise.resolve(void 0);\n      }\n      if (!motionManager.listeners(\"destroy\").includes(_Live2DFactory.releaseTasks)) {\n        motionManager.once(\"destroy\", _Live2DFactory.releaseTasks);\n      }\n      let tasks = _Live2DFactory.motionTasksMap.get(motionManager);\n      if (!tasks) {\n        tasks = {};\n        _Live2DFactory.motionTasksMap.set(motionManager, tasks);\n      }\n      let taskGroup = tasks[group];\n      if (!taskGroup) {\n        taskGroup = [];\n        tasks[group] = taskGroup;\n      }\n      const path = motionManager.getMotionFile(definition);\n      (_b = taskGroup[index]) != null ? _b : taskGroup[index] = Live2DLoader.load({\n        url: path,\n        settings: motionManager.settings,\n        type: motionManager.motionDataType,\n        target: motionManager\n      }).then((data) => {\n        var _a2;\n        const taskGroup2 = (_a2 = _Live2DFactory.motionTasksMap.get(motionManager)) == null ? void 0 : _a2[group];\n        if (taskGroup2) {\n          delete taskGroup2[index];\n        }\n        const motion = motionManager.createMotion(data, group, definition);\n        motionManager.emit(\"motionLoaded\", group, index, motion);\n        return motion;\n      }).catch((e) => {\n        logger.warn(motionManager.tag, `Failed to load motion: ${path}\n`, e);\n        handleError(e);\n      });\n      return taskGroup[index];\n    } catch (e) {\n      logger.warn(motionManager.tag, `Failed to load motion at \"${group}\"[${index}]\n`, e);\n      handleError(e);\n    }\n    return Promise.resolve(void 0);\n  }\n  static loadExpression(expressionManager, index) {\n    var _a;\n    const handleError = (e) => expressionManager.emit(\"expressionLoadError\", index, e);\n    try {\n      const definition = expressionManager.definitions[index];\n      if (!definition) {\n        return Promise.resolve(void 0);\n      }\n      if (!expressionManager.listeners(\"destroy\").includes(_Live2DFactory.releaseTasks)) {\n        expressionManager.once(\"destroy\", _Live2DFactory.releaseTasks);\n      }\n      let tasks = _Live2DFactory.expressionTasksMap.get(expressionManager);\n      if (!tasks) {\n        tasks = [];\n        _Live2DFactory.expressionTasksMap.set(expressionManager, tasks);\n      }\n      const path = expressionManager.getExpressionFile(definition);\n      (_a = tasks[index]) != null ? _a : tasks[index] = Live2DLoader.load({\n        url: path,\n        settings: expressionManager.settings,\n        type: \"json\",\n        target: expressionManager\n      }).then((data) => {\n        const tasks2 = _Live2DFactory.expressionTasksMap.get(expressionManager);\n        if (tasks2) {\n          delete tasks2[index];\n        }\n        const expression = expressionManager.createExpression(data, definition);\n        expressionManager.emit(\"expressionLoaded\", index, expression);\n        return expression;\n      }).catch((e) => {\n        logger.warn(expressionManager.tag, `Failed to load expression: ${path}\n`, e);\n        handleError(e);\n      });\n      return tasks[index];\n    } catch (e) {\n      logger.warn(expressionManager.tag, `Failed to load expression at [${index}]\n`, e);\n      handleError(e);\n    }\n    return Promise.resolve(void 0);\n  }\n  static releaseTasks() {\n    if (this instanceof MotionManager) {\n      _Live2DFactory.motionTasksMap.delete(this);\n    } else {\n      _Live2DFactory.expressionTasksMap.delete(this);\n    }\n  }\n};\nlet Live2DFactory = _Live2DFactory;\nLive2DFactory.runtimes = [];\nLive2DFactory.urlToJSON = urlToJSON;\nLive2DFactory.jsonToSettings = jsonToSettings;\nLive2DFactory.waitUntilReady = waitUntilReady;\nLive2DFactory.setupOptionals = setupOptionals;\nLive2DFactory.setupEssentials = setupEssentials;\nLive2DFactory.createInternalModel = createInternalModel;\nLive2DFactory.live2DModelMiddlewares = [\n  urlToJSON,\n  jsonToSettings,\n  waitUntilReady,\n  setupOptionals,\n  setupEssentials,\n  createInternalModel\n];\nLive2DFactory.motionTasksMap = /* @__PURE__ */ new WeakMap();\nLive2DFactory.expressionTasksMap = /* @__PURE__ */ new WeakMap();\nMotionManager.prototype[\"_loadMotion\"] = function(group, index) {\n  return Live2DFactory.loadMotion(this, group, index);\n};\nExpressionManager.prototype[\"_loadExpression\"] = function(index) {\n  return Live2DFactory.loadExpression(this, index);\n};\nclass InteractionMixin {\n  constructor() {\n    this._autoInteract = false;\n  }\n  get autoInteract() {\n    return this._autoInteract;\n  }\n  set autoInteract(autoInteract) {\n    if (autoInteract !== this._autoInteract) {\n      if (autoInteract) {\n        this.on(\"pointertap\", onTap, this);\n      } else {\n        this.off(\"pointertap\", onTap, this);\n      }\n      this._autoInteract = autoInteract;\n    }\n  }\n  registerInteraction(manager) {\n    if (manager !== this.interactionManager) {\n      this.unregisterInteraction();\n      if (this._autoInteract && manager) {\n        this.interactionManager = manager;\n        manager.on(\"pointermove\", onPointerMove, this);\n      }\n    }\n  }\n  unregisterInteraction() {\n    var _a;\n    if (this.interactionManager) {\n      (_a = this.interactionManager) == null ? void 0 : _a.off(\"pointermove\", onPointerMove, this);\n      this.interactionManager = void 0;\n    }\n  }\n}\nfunction onTap(event) {\n  this.tap(event.data.global.x, event.data.global.y);\n}\nfunction onPointerMove(event) {\n  this.focus(event.data.global.x, event.data.global.y);\n}\nclass Live2DTransform extends Transform {\n}\nconst tempPoint = new Point();\nconst tempMatrix$1 = new Matrix();\nlet tickerRef;\nclass Live2DModel extends Container {\n  constructor(options) {\n    super();\n    this.tag = \"Live2DModel(uninitialized)\";\n    this.textures = [];\n    this.transform = new Live2DTransform();\n    this.anchor = new ObservablePoint(this.onAnchorChange, this, 0, 0);\n    this.glContextID = -1;\n    this.elapsedTime = performance.now();\n    this.deltaTime = 0;\n    this._autoUpdate = false;\n    this.once(\"modelLoaded\", () => this.init(options));\n  }\n  static from(source, options) {\n    const model = new this(options);\n    return Live2DFactory.setupLive2DModel(model, source, options).then(() => model);\n  }\n  static fromSync(source, options) {\n    const model = new this(options);\n    Live2DFactory.setupLive2DModel(model, source, options).then(options == null ? void 0 : options.onLoad).catch(options == null ? void 0 : options.onError);\n    return model;\n  }\n  static registerTicker(tickerClass) {\n    tickerRef = tickerClass;\n  }\n  get autoUpdate() {\n    return this._autoUpdate;\n  }\n  set autoUpdate(autoUpdate) {\n    var _a;\n    tickerRef || (tickerRef = (_a = window.PIXI) == null ? void 0 : _a.Ticker);\n    if (autoUpdate) {\n      if (!this._destroyed) {\n        if (tickerRef) {\n          tickerRef.shared.add(this.onTickerUpdate, this);\n          this._autoUpdate = true;\n        } else {\n          logger.warn(this.tag, \"No Ticker registered, please call Live2DModel.registerTicker(Ticker).\");\n        }\n      }\n    } else {\n      tickerRef == null ? void 0 : tickerRef.shared.remove(this.onTickerUpdate, this);\n      this._autoUpdate = false;\n    }\n  }\n  init(options) {\n    this.tag = `Live2DModel(${this.internalModel.settings.name})`;\n    const _options = Object.assign({\n      autoUpdate: true,\n      autoInteract: true\n    }, options);\n    if (_options.autoInteract) {\n      this.interactive = true;\n    }\n    this.autoInteract = _options.autoInteract;\n    this.autoUpdate = _options.autoUpdate;\n  }\n  onAnchorChange() {\n    this.pivot.set(this.anchor.x * this.internalModel.width, this.anchor.y * this.internalModel.height);\n  }\n  motion(group, index, priority) {\n    return index === void 0 ? this.internalModel.motionManager.startRandomMotion(group, priority) : this.internalModel.motionManager.startMotion(group, index, priority);\n  }\n  expression(id) {\n    if (this.internalModel.motionManager.expressionManager) {\n      return id === void 0 ? this.internalModel.motionManager.expressionManager.setRandomExpression() : this.internalModel.motionManager.expressionManager.setExpression(id);\n    }\n    return Promise.resolve(false);\n  }\n  focus(x, y, instant = false) {\n    tempPoint.x = x;\n    tempPoint.y = y;\n    this.toModelPosition(tempPoint, tempPoint, true);\n    let tx = tempPoint.x / this.internalModel.originalWidth * 2 - 1;\n    let ty = tempPoint.y / this.internalModel.originalHeight * 2 - 1;\n    let radian = Math.atan2(ty, tx);\n    this.internalModel.focusController.focus(Math.cos(radian), -Math.sin(radian), instant);\n  }\n  tap(x, y) {\n    const hitAreaNames = this.hitTest(x, y);\n    if (hitAreaNames.length) {\n      logger.log(this.tag, `Hit`, hitAreaNames);\n      this.emit(\"hit\", hitAreaNames);\n    }\n  }\n  hitTest(x, y) {\n    tempPoint.x = x;\n    tempPoint.y = y;\n    this.toModelPosition(tempPoint, tempPoint);\n    return this.internalModel.hitTest(tempPoint.x, tempPoint.y);\n  }\n  toModelPosition(position, result = position.clone(), skipUpdate) {\n    if (!skipUpdate) {\n      this._recursivePostUpdateTransform();\n      if (!this.parent) {\n        this.parent = this._tempDisplayObjectParent;\n        this.displayObjectUpdateTransform();\n        this.parent = null;\n      } else {\n        this.displayObjectUpdateTransform();\n      }\n    }\n    this.transform.worldTransform.applyInverse(position, result);\n    this.internalModel.localTransform.applyInverse(result, result);\n    return result;\n  }\n  containsPoint(point) {\n    return this.getBounds(true).contains(point.x, point.y);\n  }\n  _calculateBounds() {\n    this._bounds.addFrame(this.transform, 0, 0, this.internalModel.width, this.internalModel.height);\n  }\n  onTickerUpdate() {\n    this.update(tickerRef.shared.deltaMS);\n  }\n  update(dt) {\n    this.deltaTime += dt;\n    this.elapsedTime += dt;\n  }\n  _render(renderer) {\n    this.registerInteraction(renderer.plugins.interaction);\n    renderer.batch.reset();\n    renderer.geometry.reset();\n    renderer.shader.reset();\n    renderer.state.reset();\n    let shouldUpdateTexture = false;\n    if (this.glContextID !== renderer.CONTEXT_UID) {\n      this.glContextID = renderer.CONTEXT_UID;\n      this.internalModel.updateWebGLContext(renderer.gl, this.glContextID);\n      shouldUpdateTexture = true;\n    }\n    for (let i = 0; i < this.textures.length; i++) {\n      const texture = this.textures[i];\n      if (!texture.valid) {\n        continue;\n      }\n      if (shouldUpdateTexture || !texture.baseTexture._glTextures[this.glContextID]) {\n        renderer.gl.pixelStorei(WebGLRenderingContext.UNPACK_FLIP_Y_WEBGL, this.internalModel.textureFlipY);\n        renderer.texture.bind(texture.baseTexture, 0);\n      }\n      this.internalModel.bindTexture(i, texture.baseTexture._glTextures[this.glContextID].texture);\n      texture.baseTexture.touched = renderer.textureGC.count;\n    }\n    const viewport = renderer.framebuffer.viewport;\n    this.internalModel.viewport = [viewport.x, viewport.y, viewport.width, viewport.height];\n    if (this.deltaTime) {\n      this.internalModel.update(this.deltaTime, this.elapsedTime);\n      this.deltaTime = 0;\n    }\n    const internalTransform = tempMatrix$1.copyFrom(renderer.globalUniforms.uniforms.projectionMatrix).append(this.worldTransform);\n    this.internalModel.updateTransform(internalTransform);\n    this.internalModel.draw(renderer.gl);\n    renderer.state.reset();\n    renderer.texture.reset();\n  }\n  destroy(options) {\n    this.emit(\"destroy\");\n    this.autoUpdate = false;\n    this.unregisterInteraction();\n    if (options == null ? void 0 : options.texture) {\n      this.textures.forEach((texture) => texture.destroy(options.baseTexture));\n    }\n    this.internalModel.destroy();\n    super.destroy(options);\n  }\n}\napplyMixins(Live2DModel, [InteractionMixin]);\nconst _FileLoader = class {\n  static resolveURL(settingsURL, filePath) {\n    var _a;\n    const resolved = (_a = _FileLoader.filesMap[settingsURL]) == null ? void 0 : _a[filePath];\n    if (resolved === void 0) {\n      throw new Error(\"Cannot find this file from uploaded files: \" + filePath);\n    }\n    return resolved;\n  }\n  static upload(files, settings) {\n    return __async(this, null, function* () {\n      const fileMap = {};\n      for (const definedFile of settings.getDefinedFiles()) {\n        const actualPath = decodeURI(url.resolve(settings.url, definedFile));\n        const actualFile = files.find((file) => file.webkitRelativePath === actualPath);\n        if (actualFile) {\n          fileMap[definedFile] = URL.createObjectURL(actualFile);\n        }\n      }\n      _FileLoader.filesMap[settings._objectURL] = fileMap;\n    });\n  }\n  static createSettings(files) {\n    return __async(this, null, function* () {\n      const settingsFile = files.find((file) => file.name.endsWith(\"model.json\") || file.name.endsWith(\"model3.json\"));\n      if (!settingsFile) {\n        throw new TypeError(\"Settings file not found\");\n      }\n      const settingsText = yield _FileLoader.readText(settingsFile);\n      const settingsJSON = JSON.parse(settingsText);\n      settingsJSON.url = settingsFile.webkitRelativePath;\n      const runtime = Live2DFactory.findRuntime(settingsJSON);\n      if (!runtime) {\n        throw new Error(\"Unknown settings JSON\");\n      }\n      const settings = runtime.createModelSettings(settingsJSON);\n      settings._objectURL = URL.createObjectURL(settingsFile);\n      return settings;\n    });\n  }\n  static readText(file) {\n    return __async(this, null, function* () {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsText(file, \"utf8\");\n      });\n    });\n  }\n};\nlet FileLoader = _FileLoader;\nFileLoader.filesMap = {};\nFileLoader.factory = (context, next) => __async(void 0, null, function* () {\n  if (Array.isArray(context.source) && context.source[0] instanceof File) {\n    const files = context.source;\n    let settings = files.settings;\n    if (!settings) {\n      settings = yield _FileLoader.createSettings(files);\n    } else if (!settings._objectURL) {\n      throw new Error('\"_objectURL\" must be specified in ModelSettings');\n    }\n    settings.validateFiles(files.map((file) => encodeURI(file.webkitRelativePath)));\n    yield _FileLoader.upload(files, settings);\n    settings.resolveURL = function(url2) {\n      return _FileLoader.resolveURL(this._objectURL, url2);\n    };\n    context.source = settings;\n    context.live2dModel.once(\"modelLoaded\", (internalModel) => {\n      internalModel.once(\"destroy\", function() {\n        const objectURL = this.settings._objectURL;\n        URL.revokeObjectURL(objectURL);\n        if (_FileLoader.filesMap[objectURL]) {\n          for (const resourceObjectURL of Object.values(_FileLoader.filesMap[objectURL])) {\n            URL.revokeObjectURL(resourceObjectURL);\n          }\n        }\n        delete _FileLoader.filesMap[objectURL];\n      });\n    });\n  }\n  return next();\n});\nLive2DFactory.live2DModelMiddlewares.unshift(FileLoader.factory);\nconst _ZipLoader = class {\n  static unzip(reader, settings) {\n    return __async(this, null, function* () {\n      const filePaths = yield _ZipLoader.getFilePaths(reader);\n      const requiredFilePaths = [];\n      for (const definedFile of settings.getDefinedFiles()) {\n        const actualPath = decodeURI(url.resolve(settings.url, definedFile));\n        if (filePaths.includes(actualPath)) {\n          requiredFilePaths.push(actualPath);\n        }\n      }\n      const files = yield _ZipLoader.getFiles(reader, requiredFilePaths);\n      for (let i = 0; i < files.length; i++) {\n        const path = requiredFilePaths[i];\n        const file = files[i];\n        Object.defineProperty(file, \"webkitRelativePath\", {\n          value: path\n        });\n      }\n      return files;\n    });\n  }\n  static createSettings(reader) {\n    return __async(this, null, function* () {\n      const filePaths = yield _ZipLoader.getFilePaths(reader);\n      const settingsFilePath = filePaths.find((path) => path.endsWith(\"model.json\") || path.endsWith(\"model3.json\"));\n      if (!settingsFilePath) {\n        throw new Error(\"Settings file not found\");\n      }\n      const settingsText = yield _ZipLoader.readText(reader, settingsFilePath);\n      if (!settingsText) {\n        throw new Error(\"Empty settings file: \" + settingsFilePath);\n      }\n      const settingsJSON = JSON.parse(settingsText);\n      settingsJSON.url = settingsFilePath;\n      const runtime = Live2DFactory.findRuntime(settingsJSON);\n      if (!runtime) {\n        throw new Error(\"Unknown settings JSON\");\n      }\n      return runtime.createModelSettings(settingsJSON);\n    });\n  }\n  static zipReader(data, url2) {\n    return __async(this, null, function* () {\n      throw new Error(\"Not implemented\");\n    });\n  }\n  static getFilePaths(reader) {\n    return __async(this, null, function* () {\n      throw new Error(\"Not implemented\");\n    });\n  }\n  static getFiles(reader, paths) {\n    return __async(this, null, function* () {\n      throw new Error(\"Not implemented\");\n    });\n  }\n  static readText(reader, path) {\n    return __async(this, null, function* () {\n      throw new Error(\"Not implemented\");\n    });\n  }\n  static releaseReader(reader) {\n  }\n};\nlet ZipLoader = _ZipLoader;\nZipLoader.ZIP_PROTOCOL = \"zip://\";\nZipLoader.uid = 0;\nZipLoader.factory = (context, next) => __async(void 0, null, function* () {\n  const source = context.source;\n  let sourceURL;\n  let zipBlob;\n  let settings;\n  if (typeof source === \"string\" && (source.endsWith(\".zip\") || source.startsWith(_ZipLoader.ZIP_PROTOCOL))) {\n    if (source.startsWith(_ZipLoader.ZIP_PROTOCOL)) {\n      sourceURL = source.slice(_ZipLoader.ZIP_PROTOCOL.length);\n    } else {\n      sourceURL = source;\n    }\n    zipBlob = yield Live2DLoader.load({\n      url: sourceURL,\n      type: \"blob\",\n      target: context.live2dModel\n    });\n  } else if (Array.isArray(source) && source.length === 1 && source[0] instanceof File && source[0].name.endsWith(\".zip\")) {\n    zipBlob = source[0];\n    sourceURL = URL.createObjectURL(zipBlob);\n    settings = source.settings;\n  }\n  if (zipBlob) {\n    if (!zipBlob.size) {\n      throw new Error(\"Empty zip file\");\n    }\n    const reader = yield _ZipLoader.zipReader(zipBlob, sourceURL);\n    if (!settings) {\n      settings = yield _ZipLoader.createSettings(reader);\n    }\n    settings._objectURL = _ZipLoader.ZIP_PROTOCOL + _ZipLoader.uid + \"/\" + settings.url;\n    const files = yield _ZipLoader.unzip(reader, settings);\n    files.settings = settings;\n    context.source = files;\n    if (sourceURL.startsWith(\"blob:\")) {\n      context.live2dModel.once(\"modelLoaded\", (internalModel) => {\n        internalModel.once(\"destroy\", function() {\n          URL.revokeObjectURL(sourceURL);\n        });\n      });\n    }\n    _ZipLoader.releaseReader(reader);\n  }\n  return next();\n});\nLive2DFactory.live2DModelMiddlewares.unshift(ZipLoader.factory);\nif (!window.Live2D) {\n  throw new Error(\"Could not find Cubism 2 runtime. This plugin requires live2d.min.js to be loaded.\");\n}\nconst originalUpdateParam = Live2DMotion.prototype.updateParam;\nLive2DMotion.prototype.updateParam = function(model, entry) {\n  originalUpdateParam.call(this, model, entry);\n  if (entry.isFinished() && this.onFinishHandler) {\n    this.onFinishHandler(this);\n    delete this.onFinishHandler;\n  }\n};\nclass Live2DExpression extends AMotion {\n  constructor(json) {\n    super();\n    this.params = [];\n    this.setFadeIn(json.fade_in > 0 ? json.fade_in : config.expressionFadingDuration);\n    this.setFadeOut(json.fade_out > 0 ? json.fade_out : config.expressionFadingDuration);\n    if (Array.isArray(json.params)) {\n      json.params.forEach((param) => {\n        const calc = param.calc || \"add\";\n        if (calc === \"add\") {\n          const defaultValue = param.def || 0;\n          param.val -= defaultValue;\n        } else if (calc === \"mult\") {\n          const defaultValue = param.def || 1;\n          param.val /= defaultValue;\n        }\n        this.params.push({\n          calc,\n          val: param.val,\n          id: param.id\n        });\n      });\n    }\n  }\n  updateParamExe(model, time, weight, motionQueueEnt) {\n    this.params.forEach((param) => {\n      model.setParamFloat(param.id, param.val * weight);\n    });\n  }\n}\nclass Cubism2ExpressionManager extends ExpressionManager {\n  constructor(settings, options) {\n    var _a;\n    super(settings, options);\n    this.queueManager = new MotionQueueManager();\n    this.definitions = (_a = this.settings.expressions) != null ? _a : [];\n    this.init();\n  }\n  isFinished() {\n    return this.queueManager.isFinished();\n  }\n  getExpressionIndex(name) {\n    return this.definitions.findIndex((def) => def.name === name);\n  }\n  getExpressionFile(definition) {\n    return definition.file;\n  }\n  createExpression(data, definition) {\n    return new Live2DExpression(data);\n  }\n  _setExpression(motion) {\n    return this.queueManager.startMotion(motion);\n  }\n  stopAllExpressions() {\n    this.queueManager.stopAllMotions();\n  }\n  updateParameters(model, dt) {\n    return this.queueManager.updateParam(model);\n  }\n}\nclass Cubism2MotionManager extends MotionManager {\n  constructor(settings, options) {\n    super(settings, options);\n    this.groups = { idle: \"idle\" };\n    this.motionDataType = \"arraybuffer\";\n    this.queueManager = new MotionQueueManager();\n    this.definitions = this.settings.motions;\n    this.init(options);\n  }\n  init(options) {\n    super.init(options);\n    if (this.settings.expressions) {\n      this.expressionManager = new Cubism2ExpressionManager(this.settings, options);\n    }\n  }\n  isFinished() {\n    return this.queueManager.isFinished();\n  }\n  createMotion(data, group, definition) {\n    const motion = Live2DMotion.loadMotion(data);\n    const defaultFadingDuration = group === this.groups.idle ? config.idleMotionFadingDuration : config.motionFadingDuration;\n    motion.setFadeIn(definition.fade_in > 0 ? definition.fade_in : defaultFadingDuration);\n    motion.setFadeOut(definition.fade_out > 0 ? definition.fade_out : defaultFadingDuration);\n    return motion;\n  }\n  getMotionFile(definition) {\n    return definition.file;\n  }\n  getMotionName(definition) {\n    return definition.file;\n  }\n  getSoundFile(definition) {\n    return definition.sound;\n  }\n  _startMotion(motion, onFinish) {\n    motion.onFinishHandler = onFinish;\n    this.queueManager.stopAllMotions();\n    return this.queueManager.startMotion(motion);\n  }\n  _stopAllMotions() {\n    this.queueManager.stopAllMotions();\n  }\n  updateParameters(model, now) {\n    return this.queueManager.updateParam(model);\n  }\n  destroy() {\n    super.destroy();\n    this.queueManager = void 0;\n  }\n}\nclass Live2DEyeBlink {\n  constructor(coreModel) {\n    this.coreModel = coreModel;\n    this.blinkInterval = 4e3;\n    this.closingDuration = 100;\n    this.closedDuration = 50;\n    this.openingDuration = 150;\n    this.eyeState = 0;\n    this.eyeParamValue = 1;\n    this.closedTimer = 0;\n    this.nextBlinkTimeLeft = this.blinkInterval;\n    this.leftParam = coreModel.getParamIndex(\"PARAM_EYE_L_OPEN\");\n    this.rightParam = coreModel.getParamIndex(\"PARAM_EYE_R_OPEN\");\n  }\n  setEyeParams(value) {\n    this.eyeParamValue = clamp(value, 0, 1);\n    this.coreModel.setParamFloat(this.leftParam, this.eyeParamValue);\n    this.coreModel.setParamFloat(this.rightParam, this.eyeParamValue);\n  }\n  update(dt) {\n    switch (this.eyeState) {\n      case 0:\n        this.nextBlinkTimeLeft -= dt;\n        if (this.nextBlinkTimeLeft < 0) {\n          this.eyeState = 1;\n          this.nextBlinkTimeLeft = this.blinkInterval + this.closingDuration + this.closedDuration + this.openingDuration + rand(0, 2e3);\n        }\n        break;\n      case 1:\n        this.setEyeParams(this.eyeParamValue + dt / this.closingDuration);\n        if (this.eyeParamValue <= 0) {\n          this.eyeState = 2;\n          this.closedTimer = 0;\n        }\n        break;\n      case 2:\n        this.closedTimer += dt;\n        if (this.closedTimer >= this.closedDuration) {\n          this.eyeState = 3;\n        }\n        break;\n      case 3:\n        this.setEyeParams(this.eyeParamValue + dt / this.openingDuration);\n        if (this.eyeParamValue >= 1) {\n          this.eyeState = 0;\n        }\n    }\n  }\n}\nconst tempMatrixArray = new Float32Array([\n  1,\n  0,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  0,\n  1,\n  0,\n  0,\n  0,\n  0,\n  1\n]);\nclass Cubism2InternalModel extends InternalModel {\n  constructor(coreModel, settings, options) {\n    super();\n    this.textureFlipY = true;\n    this.drawDataCount = 0;\n    this.disableCulling = false;\n    this.coreModel = coreModel;\n    this.settings = settings;\n    this.motionManager = new Cubism2MotionManager(settings, options);\n    this.eyeBlink = new Live2DEyeBlink(coreModel);\n    this.eyeballXParamIndex = coreModel.getParamIndex(\"PARAM_EYE_BALL_X\");\n    this.eyeballYParamIndex = coreModel.getParamIndex(\"PARAM_EYE_BALL_Y\");\n    this.angleXParamIndex = coreModel.getParamIndex(\"PARAM_ANGLE_X\");\n    this.angleYParamIndex = coreModel.getParamIndex(\"PARAM_ANGLE_Y\");\n    this.angleZParamIndex = coreModel.getParamIndex(\"PARAM_ANGLE_Z\");\n    this.bodyAngleXParamIndex = coreModel.getParamIndex(\"PARAM_BODY_ANGLE_X\");\n    this.breathParamIndex = coreModel.getParamIndex(\"PARAM_BREATH\");\n    this.init();\n  }\n  init() {\n    super.init();\n    if (this.settings.initParams) {\n      this.settings.initParams.forEach(({ id, value }) => this.coreModel.setParamFloat(id, value));\n    }\n    if (this.settings.initOpacities) {\n      this.settings.initOpacities.forEach(({ id, value }) => this.coreModel.setPartsOpacity(id, value));\n    }\n    this.coreModel.saveParam();\n    const arr = this.coreModel.getModelContext()._$aS;\n    if (arr == null ? void 0 : arr.length) {\n      this.drawDataCount = arr.length;\n    }\n    let culling = this.coreModel.drawParamWebGL.culling;\n    Object.defineProperty(this.coreModel.drawParamWebGL, \"culling\", {\n      set: (v) => culling = v,\n      get: () => this.disableCulling ? false : culling\n    });\n    const clipManager = this.coreModel.getModelContext().clipManager;\n    const originalSetupClip = clipManager.setupClip;\n    clipManager.setupClip = (modelContext, drawParam) => {\n      originalSetupClip.call(clipManager, modelContext, drawParam);\n      drawParam.gl.viewport(...this.viewport);\n    };\n  }\n  getSize() {\n    return [this.coreModel.getCanvasWidth(), this.coreModel.getCanvasHeight()];\n  }\n  getLayout() {\n    const layout = {};\n    if (this.settings.layout) {\n      for (const key of Object.keys(this.settings.layout)) {\n        let commonKey = key;\n        if (key === \"center_x\") {\n          commonKey = \"centerX\";\n        } else if (key === \"center_y\") {\n          commonKey = \"centerY\";\n        }\n        layout[commonKey] = this.settings.layout[key];\n      }\n    }\n    return layout;\n  }\n  updateWebGLContext(gl, glContextID) {\n    const drawParamWebGL = this.coreModel.drawParamWebGL;\n    drawParamWebGL.firstDraw = true;\n    drawParamWebGL.setGL(gl);\n    drawParamWebGL.glno = glContextID;\n    for (const prop in drawParamWebGL) {\n      if (drawParamWebGL.hasOwnProperty(prop) && drawParamWebGL[prop] instanceof WebGLBuffer) {\n        drawParamWebGL[prop] = null;\n      }\n    }\n    const clipManager = this.coreModel.getModelContext().clipManager;\n    clipManager.curFrameNo = glContextID;\n    const framebuffer = gl.getParameter(gl.FRAMEBUFFER_BINDING);\n    clipManager.getMaskRenderTexture();\n    gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\n  }\n  bindTexture(index, texture) {\n    this.coreModel.setTexture(index, texture);\n  }\n  getHitAreaDefs() {\n    var _a;\n    return ((_a = this.settings.hitAreas) == null ? void 0 : _a.map((hitArea) => ({\n      id: hitArea.id,\n      name: hitArea.name,\n      index: this.coreModel.getDrawDataIndex(hitArea.id)\n    }))) || [];\n  }\n  getDrawableIDs() {\n    const modelContext = this.coreModel.getModelContext();\n    const ids = [];\n    for (let i = 0; i < this.drawDataCount; i++) {\n      const drawData = modelContext.getDrawData(i);\n      if (drawData) {\n        ids.push(drawData.getDrawDataID().id);\n      }\n    }\n    return ids;\n  }\n  getDrawableIndex(id) {\n    return this.coreModel.getDrawDataIndex(id);\n  }\n  getDrawableVertices(drawIndex) {\n    if (typeof drawIndex === \"string\") {\n      drawIndex = this.coreModel.getDrawDataIndex(drawIndex);\n      if (drawIndex === -1)\n        throw new TypeError(\"Unable to find drawable ID: \" + drawIndex);\n    }\n    return this.coreModel.getTransformedPoints(drawIndex).slice();\n  }\n  update(dt, now) {\n    var _a, _b, _c, _d;\n    super.update(dt, now);\n    const model = this.coreModel;\n    this.emit(\"beforeMotionUpdate\");\n    const motionUpdated = this.motionManager.update(this.coreModel, now);\n    this.emit(\"afterMotionUpdate\");\n    model.saveParam();\n    (_a = this.motionManager.expressionManager) == null ? void 0 : _a.update(model, now);\n    if (!motionUpdated) {\n      (_b = this.eyeBlink) == null ? void 0 : _b.update(dt);\n    }\n    this.updateFocus();\n    this.updateNaturalMovements(dt, now);\n    (_c = this.physics) == null ? void 0 : _c.update(now);\n    (_d = this.pose) == null ? void 0 : _d.update(dt);\n    this.emit(\"beforeModelUpdate\");\n    model.update();\n    model.loadParam();\n  }\n  updateFocus() {\n    this.coreModel.addToParamFloat(this.eyeballXParamIndex, this.focusController.x);\n    this.coreModel.addToParamFloat(this.eyeballYParamIndex, this.focusController.y);\n    this.coreModel.addToParamFloat(this.angleXParamIndex, this.focusController.x * 30);\n    this.coreModel.addToParamFloat(this.angleYParamIndex, this.focusController.y * 30);\n    this.coreModel.addToParamFloat(this.angleZParamIndex, this.focusController.x * this.focusController.y * -30);\n    this.coreModel.addToParamFloat(this.bodyAngleXParamIndex, this.focusController.x * 10);\n  }\n  updateNaturalMovements(dt, now) {\n    const t = now / 1e3 * 2 * Math.PI;\n    this.coreModel.addToParamFloat(this.angleXParamIndex, 15 * Math.sin(t / 6.5345) * 0.5);\n    this.coreModel.addToParamFloat(this.angleYParamIndex, 8 * Math.sin(t / 3.5345) * 0.5);\n    this.coreModel.addToParamFloat(this.angleZParamIndex, 10 * Math.sin(t / 5.5345) * 0.5);\n    this.coreModel.addToParamFloat(this.bodyAngleXParamIndex, 4 * Math.sin(t / 15.5345) * 0.5);\n    this.coreModel.setParamFloat(this.breathParamIndex, 0.5 + 0.5 * Math.sin(t / 3.2345));\n  }\n  draw(gl) {\n    const disableCulling = this.disableCulling;\n    if (gl.getParameter(gl.FRAMEBUFFER_BINDING)) {\n      this.disableCulling = true;\n    }\n    const matrix = this.drawingMatrix;\n    tempMatrixArray[0] = matrix.a;\n    tempMatrixArray[1] = matrix.b;\n    tempMatrixArray[4] = matrix.c;\n    tempMatrixArray[5] = matrix.d;\n    tempMatrixArray[12] = matrix.tx;\n    tempMatrixArray[13] = matrix.ty;\n    this.coreModel.setMatrix(tempMatrixArray);\n    this.coreModel.draw();\n    this.disableCulling = disableCulling;\n  }\n  destroy() {\n    super.destroy();\n    this.coreModel = void 0;\n  }\n}\nclass Cubism2ModelSettings extends ModelSettings {\n  constructor(json) {\n    super(json);\n    this.motions = {};\n    if (!Cubism2ModelSettings.isValidJSON(json)) {\n      throw new TypeError(\"Invalid JSON.\");\n    }\n    this.moc = json.model;\n    copyArray(\"string\", json, this, \"textures\", \"textures\");\n    this.copy(json);\n  }\n  static isValidJSON(json) {\n    var _a;\n    return !!json && typeof json.model === \"string\" && ((_a = json.textures) == null ? void 0 : _a.length) > 0 && json.textures.every((item) => typeof item === \"string\");\n  }\n  copy(json) {\n    copyProperty(\"string\", json, this, \"name\", \"name\");\n    copyProperty(\"string\", json, this, \"pose\", \"pose\");\n    copyProperty(\"string\", json, this, \"physics\", \"physics\");\n    copyProperty(\"object\", json, this, \"layout\", \"layout\");\n    copyProperty(\"object\", json, this, \"motions\", \"motions\");\n    copyArray(\"object\", json, this, \"hit_areas\", \"hitAreas\");\n    copyArray(\"object\", json, this, \"expressions\", \"expressions\");\n    copyArray(\"object\", json, this, \"init_params\", \"initParams\");\n    copyArray(\"object\", json, this, \"init_opacities\", \"initOpacities\");\n  }\n  replaceFiles(replace) {\n    super.replaceFiles(replace);\n    for (const [group, motions] of Object.entries(this.motions)) {\n      for (let i = 0; i < motions.length; i++) {\n        motions[i].file = replace(motions[i].file, `motions.${group}[${i}].file`);\n        if (motions[i].sound !== void 0) {\n          motions[i].sound = replace(motions[i].sound, `motions.${group}[${i}].sound`);\n        }\n      }\n    }\n    if (this.expressions) {\n      for (let i = 0; i < this.expressions.length; i++) {\n        this.expressions[i].file = replace(this.expressions[i].file, `expressions[${i}].file`);\n      }\n    }\n  }\n}\nconst SRC_TYPE_MAP = {\n  x: PhysicsHair.Src.SRC_TO_X,\n  y: PhysicsHair.Src.SRC_TO_Y,\n  angle: PhysicsHair.Src.SRC_TO_G_ANGLE\n};\nconst TARGET_TYPE_MAP = {\n  x: PhysicsHair.Src.SRC_TO_X,\n  y: PhysicsHair.Src.SRC_TO_Y,\n  angle: PhysicsHair.Src.SRC_TO_G_ANGLE\n};\nclass Live2DPhysics {\n  constructor(coreModel, json) {\n    this.coreModel = coreModel;\n    this.physicsHairs = [];\n    if (json.physics_hair) {\n      this.physicsHairs = json.physics_hair.map((definition) => {\n        const physicsHair = new PhysicsHair();\n        physicsHair.setup(definition.setup.length, definition.setup.regist, definition.setup.mass);\n        definition.src.forEach(({ id, ptype, scale, weight }) => {\n          const type = SRC_TYPE_MAP[ptype];\n          if (type) {\n            physicsHair.addSrcParam(type, id, scale, weight);\n          }\n        });\n        definition.targets.forEach(({ id, ptype, scale, weight }) => {\n          const type = TARGET_TYPE_MAP[ptype];\n          if (type) {\n            physicsHair.addTargetParam(type, id, scale, weight);\n          }\n        });\n        return physicsHair;\n      });\n    }\n  }\n  update(elapsed) {\n    this.physicsHairs.forEach((physicsHair) => physicsHair.update(this.coreModel, elapsed));\n  }\n}\nclass Live2DPartsParam {\n  constructor(id) {\n    this.id = id;\n    this.paramIndex = -1;\n    this.partsIndex = -1;\n    this.link = [];\n  }\n  initIndex(model) {\n    this.paramIndex = model.getParamIndex(\"VISIBLE:\" + this.id);\n    this.partsIndex = model.getPartsDataIndex(PartsDataID.getID(this.id));\n    model.setParamFloat(this.paramIndex, 1);\n  }\n}\nclass Live2DPose {\n  constructor(coreModel, json) {\n    this.coreModel = coreModel;\n    this.opacityAnimDuration = 500;\n    this.partsGroups = [];\n    if (json.parts_visible) {\n      this.partsGroups = json.parts_visible.map(({ group }) => group.map(({ id, link }) => {\n        const parts = new Live2DPartsParam(id);\n        if (link) {\n          parts.link = link.map((l) => new Live2DPartsParam(l));\n        }\n        return parts;\n      }));\n      this.init();\n    }\n  }\n  init() {\n    this.partsGroups.forEach((group) => {\n      group.forEach((parts) => {\n        parts.initIndex(this.coreModel);\n        if (parts.paramIndex >= 0) {\n          const visible = this.coreModel.getParamFloat(parts.paramIndex) !== 0;\n          this.coreModel.setPartsOpacity(parts.partsIndex, visible ? 1 : 0);\n          this.coreModel.setParamFloat(parts.paramIndex, visible ? 1 : 0);\n          if (parts.link.length > 0) {\n            parts.link.forEach((p) => p.initIndex(this.coreModel));\n          }\n        }\n      });\n    });\n  }\n  normalizePartsOpacityGroup(partsGroup, dt) {\n    const model = this.coreModel;\n    const phi = 0.5;\n    const maxBackOpacity = 0.15;\n    let visibleOpacity = 1;\n    let visibleIndex = partsGroup.findIndex(({ paramIndex, partsIndex }) => partsIndex >= 0 && model.getParamFloat(paramIndex) !== 0);\n    if (visibleIndex >= 0) {\n      const originalOpacity = model.getPartsOpacity(partsGroup[visibleIndex].partsIndex);\n      visibleOpacity = clamp(originalOpacity + dt / this.opacityAnimDuration, 0, 1);\n    } else {\n      visibleIndex = 0;\n      visibleOpacity = 1;\n    }\n    partsGroup.forEach(({ partsIndex }, index) => {\n      if (partsIndex >= 0) {\n        if (visibleIndex == index) {\n          model.setPartsOpacity(partsIndex, visibleOpacity);\n        } else {\n          let opacity = model.getPartsOpacity(partsIndex);\n          let a1;\n          if (visibleOpacity < phi) {\n            a1 = visibleOpacity * (phi - 1) / phi + 1;\n          } else {\n            a1 = (1 - visibleOpacity) * phi / (1 - phi);\n          }\n          let backOp = (1 - a1) * (1 - visibleOpacity);\n          if (backOp > maxBackOpacity) {\n            a1 = 1 - maxBackOpacity / (1 - visibleOpacity);\n          }\n          if (opacity > a1) {\n            opacity = a1;\n          }\n          model.setPartsOpacity(partsIndex, opacity);\n        }\n      }\n    });\n  }\n  copyOpacity(partsGroup) {\n    const model = this.coreModel;\n    partsGroup.forEach(({ partsIndex, link }) => {\n      if (partsIndex >= 0 && link) {\n        const opacity = model.getPartsOpacity(partsIndex);\n        link.forEach(({ partsIndex: partsIndex2 }) => {\n          if (partsIndex2 >= 0) {\n            model.setPartsOpacity(partsIndex2, opacity);\n          }\n        });\n      }\n    });\n  }\n  update(dt) {\n    this.partsGroups.forEach((partGroup) => {\n      this.normalizePartsOpacityGroup(partGroup, dt);\n      this.copyOpacity(partGroup);\n    });\n  }\n}\nLive2DFactory.registerRuntime({\n  version: 2,\n  test(source) {\n    return source instanceof Cubism2ModelSettings || Cubism2ModelSettings.isValidJSON(source);\n  },\n  ready() {\n    return Promise.resolve();\n  },\n  isValidMoc(modelData) {\n    if (modelData.byteLength < 3) {\n      return false;\n    }\n    const view = new Int8Array(modelData, 0, 3);\n    return String.fromCharCode(...view) === \"moc\";\n  },\n  createModelSettings(json) {\n    return new Cubism2ModelSettings(json);\n  },\n  createCoreModel(data) {\n    const model = Live2DModelWebGL.loadModel(data);\n    const error = Live2D.getError();\n    if (error)\n      throw error;\n    return model;\n  },\n  createInternalModel(coreModel, settings, options) {\n    return new Cubism2InternalModel(coreModel, settings, options);\n  },\n  createPose(coreModel, data) {\n    return new Live2DPose(coreModel, data);\n  },\n  createPhysics(coreModel, data) {\n    return new Live2DPhysics(coreModel, data);\n  }\n});\nif (!window.Live2DCubismCore) {\n  throw new Error(\"Could not find Cubism 4 runtime. This plugin requires live2dcubismcore.js to be loaded.\");\n}\nclass CubismVector2 {\n  constructor(x, y) {\n    this.x = x || 0;\n    this.y = y || 0;\n  }\n  add(vector2) {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this.x + vector2.x;\n    ret.y = this.y + vector2.y;\n    return ret;\n  }\n  substract(vector2) {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this.x - vector2.x;\n    ret.y = this.y - vector2.y;\n    return ret;\n  }\n  multiply(vector2) {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this.x * vector2.x;\n    ret.y = this.y * vector2.y;\n    return ret;\n  }\n  multiplyByScaler(scalar) {\n    return this.multiply(new CubismVector2(scalar, scalar));\n  }\n  division(vector2) {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this.x / vector2.x;\n    ret.y = this.y / vector2.y;\n    return ret;\n  }\n  divisionByScalar(scalar) {\n    return this.division(new CubismVector2(scalar, scalar));\n  }\n  getLength() {\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n  getDistanceWith(a) {\n    return Math.sqrt((this.x - a.x) * (this.x - a.x) + (this.y - a.y) * (this.y - a.y));\n  }\n  dot(a) {\n    return this.x * a.x + this.y * a.y;\n  }\n  normalize() {\n    const length = Math.pow(this.x * this.x + this.y * this.y, 0.5);\n    this.x = this.x / length;\n    this.y = this.y / length;\n  }\n  isEqual(rhs) {\n    return this.x == rhs.x && this.y == rhs.y;\n  }\n  isNotEqual(rhs) {\n    return !this.isEqual(rhs);\n  }\n}\nconst _CubismMath = class {\n  static range(value, min, max) {\n    if (value < min) {\n      value = min;\n    } else if (value > max) {\n      value = max;\n    }\n    return value;\n  }\n  static sin(x) {\n    return Math.sin(x);\n  }\n  static cos(x) {\n    return Math.cos(x);\n  }\n  static abs(x) {\n    return Math.abs(x);\n  }\n  static sqrt(x) {\n    return Math.sqrt(x);\n  }\n  static cbrt(x) {\n    if (x === 0) {\n      return x;\n    }\n    let cx = x;\n    const isNegativeNumber = cx < 0;\n    if (isNegativeNumber) {\n      cx = -cx;\n    }\n    let ret;\n    if (cx === Infinity) {\n      ret = Infinity;\n    } else {\n      ret = Math.exp(Math.log(cx) / 3);\n      ret = (cx / (ret * ret) + 2 * ret) / 3;\n    }\n    return isNegativeNumber ? -ret : ret;\n  }\n  static getEasingSine(value) {\n    if (value < 0) {\n      return 0;\n    } else if (value > 1) {\n      return 1;\n    }\n    return 0.5 - 0.5 * this.cos(value * Math.PI);\n  }\n  static max(left, right) {\n    return left > right ? left : right;\n  }\n  static min(left, right) {\n    return left > right ? right : left;\n  }\n  static degreesToRadian(degrees) {\n    return degrees / 180 * Math.PI;\n  }\n  static radianToDegrees(radian) {\n    return radian * 180 / Math.PI;\n  }\n  static directionToRadian(from, to) {\n    const q1 = Math.atan2(to.y, to.x);\n    const q2 = Math.atan2(from.y, from.x);\n    let ret = q1 - q2;\n    while (ret < -Math.PI) {\n      ret += Math.PI * 2;\n    }\n    while (ret > Math.PI) {\n      ret -= Math.PI * 2;\n    }\n    return ret;\n  }\n  static directionToDegrees(from, to) {\n    const radian = this.directionToRadian(from, to);\n    let degree = this.radianToDegrees(radian);\n    if (to.x - from.x > 0) {\n      degree = -degree;\n    }\n    return degree;\n  }\n  static radianToDirection(totalAngle) {\n    const ret = new CubismVector2();\n    ret.x = this.sin(totalAngle);\n    ret.y = this.cos(totalAngle);\n    return ret;\n  }\n  static quadraticEquation(a, b, c) {\n    if (this.abs(a) < _CubismMath.Epsilon) {\n      if (this.abs(b) < _CubismMath.Epsilon) {\n        return -c;\n      }\n      return -c / b;\n    }\n    return -(b + this.sqrt(b * b - 4 * a * c)) / (2 * a);\n  }\n  static cardanoAlgorithmForBezier(a, b, c, d) {\n    if (this.sqrt(a) < _CubismMath.Epsilon) {\n      return this.range(this.quadraticEquation(b, c, d), 0, 1);\n    }\n    const ba = b / a;\n    const ca = c / a;\n    const da = d / a;\n    const p = (3 * ca - ba * ba) / 3;\n    const p3 = p / 3;\n    const q = (2 * ba * ba * ba - 9 * ba * ca + 27 * da) / 27;\n    const q2 = q / 2;\n    const discriminant = q2 * q2 + p3 * p3 * p3;\n    const center = 0.5;\n    const threshold = center + 0.01;\n    if (discriminant < 0) {\n      const mp3 = -p / 3;\n      const mp33 = mp3 * mp3 * mp3;\n      const r = this.sqrt(mp33);\n      const t = -q / (2 * r);\n      const cosphi = this.range(t, -1, 1);\n      const phi = Math.acos(cosphi);\n      const crtr = this.cbrt(r);\n      const t1 = 2 * crtr;\n      const root12 = t1 * this.cos(phi / 3) - ba / 3;\n      if (this.abs(root12 - center) < threshold) {\n        return this.range(root12, 0, 1);\n      }\n      const root2 = t1 * this.cos((phi + 2 * Math.PI) / 3) - ba / 3;\n      if (this.abs(root2 - center) < threshold) {\n        return this.range(root2, 0, 1);\n      }\n      const root3 = t1 * this.cos((phi + 4 * Math.PI) / 3) - ba / 3;\n      return this.range(root3, 0, 1);\n    }\n    if (discriminant == 0) {\n      let u12;\n      if (q2 < 0) {\n        u12 = this.cbrt(-q2);\n      } else {\n        u12 = -this.cbrt(q2);\n      }\n      const root12 = 2 * u12 - ba / 3;\n      if (this.abs(root12 - center) < threshold) {\n        return this.range(root12, 0, 1);\n      }\n      const root2 = -u12 - ba / 3;\n      return this.range(root2, 0, 1);\n    }\n    const sd = this.sqrt(discriminant);\n    const u1 = this.cbrt(sd - q2);\n    const v1 = this.cbrt(sd + q2);\n    const root1 = u1 - v1 - ba / 3;\n    return this.range(root1, 0, 1);\n  }\n  constructor() {\n  }\n};\nlet CubismMath = _CubismMath;\nCubismMath.Epsilon = 1e-5;\nclass CubismMatrix44 {\n  constructor() {\n    this._tr = new Float32Array(16);\n    this.loadIdentity();\n  }\n  static multiply(a, b, dst) {\n    const c = new Float32Array([\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0,\n      0\n    ]);\n    const n = 4;\n    for (let i = 0; i < n; ++i) {\n      for (let j = 0; j < n; ++j) {\n        for (let k = 0; k < n; ++k) {\n          c[j + i * 4] += a[k + i * 4] * b[j + k * 4];\n        }\n      }\n    }\n    for (let i = 0; i < 16; ++i) {\n      dst[i] = c[i];\n    }\n  }\n  loadIdentity() {\n    const c = new Float32Array([\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1\n    ]);\n    this.setMatrix(c);\n  }\n  setMatrix(tr) {\n    for (let i = 0; i < 16; ++i) {\n      this._tr[i] = tr[i];\n    }\n  }\n  getArray() {\n    return this._tr;\n  }\n  getScaleX() {\n    return this._tr[0];\n  }\n  getScaleY() {\n    return this._tr[5];\n  }\n  getTranslateX() {\n    return this._tr[12];\n  }\n  getTranslateY() {\n    return this._tr[13];\n  }\n  transformX(src) {\n    return this._tr[0] * src + this._tr[12];\n  }\n  transformY(src) {\n    return this._tr[5] * src + this._tr[13];\n  }\n  invertTransformX(src) {\n    return (src - this._tr[12]) / this._tr[0];\n  }\n  invertTransformY(src) {\n    return (src - this._tr[13]) / this._tr[5];\n  }\n  translateRelative(x, y) {\n    const tr1 = new Float32Array([\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      x,\n      y,\n      0,\n      1\n    ]);\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n  translate(x, y) {\n    this._tr[12] = x;\n    this._tr[13] = y;\n  }\n  translateX(x) {\n    this._tr[12] = x;\n  }\n  translateY(y) {\n    this._tr[13] = y;\n  }\n  scaleRelative(x, y) {\n    const tr1 = new Float32Array([\n      x,\n      0,\n      0,\n      0,\n      0,\n      y,\n      0,\n      0,\n      0,\n      0,\n      1,\n      0,\n      0,\n      0,\n      0,\n      1\n    ]);\n    CubismMatrix44.multiply(tr1, this._tr, this._tr);\n  }\n  scale(x, y) {\n    this._tr[0] = x;\n    this._tr[5] = y;\n  }\n  multiplyByMatrix(m) {\n    CubismMatrix44.multiply(m.getArray(), this._tr, this._tr);\n  }\n  clone() {\n    const cloneMatrix = new CubismMatrix44();\n    for (let i = 0; i < this._tr.length; i++) {\n      cloneMatrix._tr[i] = this._tr[i];\n    }\n    return cloneMatrix;\n  }\n}\nclass CubismRenderer {\n  initialize(model) {\n    this._model = model;\n  }\n  drawModel() {\n    if (this.getModel() == null)\n      return;\n    this.doDrawModel();\n  }\n  setMvpMatrix(matrix44) {\n    this._mvpMatrix4x4.setMatrix(matrix44.getArray());\n  }\n  getMvpMatrix() {\n    return this._mvpMatrix4x4;\n  }\n  setModelColor(red, green, blue, alpha) {\n    if (red < 0) {\n      red = 0;\n    } else if (red > 1) {\n      red = 1;\n    }\n    if (green < 0) {\n      green = 0;\n    } else if (green > 1) {\n      green = 1;\n    }\n    if (blue < 0) {\n      blue = 0;\n    } else if (blue > 1) {\n      blue = 1;\n    }\n    if (alpha < 0) {\n      alpha = 0;\n    } else if (alpha > 1) {\n      alpha = 1;\n    }\n    this._modelColor.R = red;\n    this._modelColor.G = green;\n    this._modelColor.B = blue;\n    this._modelColor.A = alpha;\n  }\n  getModelColor() {\n    return Object.assign({}, this._modelColor);\n  }\n  setIsPremultipliedAlpha(enable) {\n    this._isPremultipliedAlpha = enable;\n  }\n  isPremultipliedAlpha() {\n    return this._isPremultipliedAlpha;\n  }\n  setIsCulling(culling) {\n    this._isCulling = culling;\n  }\n  isCulling() {\n    return this._isCulling;\n  }\n  setAnisotropy(n) {\n    this._anisortopy = n;\n  }\n  getAnisotropy() {\n    return this._anisortopy;\n  }\n  getModel() {\n    return this._model;\n  }\n  constructor() {\n    this._isCulling = false;\n    this._isPremultipliedAlpha = false;\n    this._anisortopy = 0;\n    this._modelColor = new CubismTextureColor();\n    this._mvpMatrix4x4 = new CubismMatrix44();\n    this._mvpMatrix4x4.loadIdentity();\n  }\n}\nvar CubismBlendMode = /* @__PURE__ */ ((CubismBlendMode2) => {\n  CubismBlendMode2[CubismBlendMode2[\"CubismBlendMode_Normal\"] = 0] = \"CubismBlendMode_Normal\";\n  CubismBlendMode2[CubismBlendMode2[\"CubismBlendMode_Additive\"] = 1] = \"CubismBlendMode_Additive\";\n  CubismBlendMode2[CubismBlendMode2[\"CubismBlendMode_Multiplicative\"] = 2] = \"CubismBlendMode_Multiplicative\";\n  return CubismBlendMode2;\n})(CubismBlendMode || {});\nclass CubismTextureColor {\n  constructor() {\n    this.R = 1;\n    this.G = 1;\n    this.B = 1;\n    this.A = 1;\n  }\n}\nlet s_isStarted = false;\nlet s_isInitialized = false;\nlet s_option = void 0;\nconst Constant = {\n  vertexOffset: 0,\n  vertexStep: 2\n};\nclass CubismFramework {\n  static startUp(option) {\n    if (s_isStarted) {\n      CubismLogInfo(\"CubismFramework.startUp() is already done.\");\n      return s_isStarted;\n    }\n    if (Live2DCubismCore._isStarted) {\n      s_isStarted = true;\n      return true;\n    }\n    Live2DCubismCore._isStarted = true;\n    s_option = option;\n    if (s_option) {\n      Live2DCubismCore.Logging.csmSetLogFunction(s_option.logFunction);\n    }\n    s_isStarted = true;\n    if (s_isStarted) {\n      const version = Live2DCubismCore.Version.csmGetVersion();\n      const major = (version & 4278190080) >> 24;\n      const minor = (version & 16711680) >> 16;\n      const patch = version & 65535;\n      const versionNumber = version;\n      CubismLogInfo(`Live2D Cubism Core version: {0}.{1}.{2} ({3})`, (\"00\" + major).slice(-2), (\"00\" + minor).slice(-2), (\"0000\" + patch).slice(-4), versionNumber);\n    }\n    CubismLogInfo(\"CubismFramework.startUp() is complete.\");\n    return s_isStarted;\n  }\n  static cleanUp() {\n    s_isStarted = false;\n    s_isInitialized = false;\n    s_option = void 0;\n  }\n  static initialize() {\n    if (!s_isStarted) {\n      CubismLogWarning(\"CubismFramework is not started.\");\n      return;\n    }\n    if (s_isInitialized) {\n      CubismLogWarning(\"CubismFramework.initialize() skipped, already initialized.\");\n      return;\n    }\n    s_isInitialized = true;\n    CubismLogInfo(\"CubismFramework.initialize() is complete.\");\n  }\n  static dispose() {\n    if (!s_isStarted) {\n      CubismLogWarning(\"CubismFramework is not started.\");\n      return;\n    }\n    if (!s_isInitialized) {\n      CubismLogWarning(\"CubismFramework.dispose() skipped, not initialized.\");\n      return;\n    }\n    CubismRenderer.staticRelease();\n    s_isInitialized = false;\n    CubismLogInfo(\"CubismFramework.dispose() is complete.\");\n  }\n  static isStarted() {\n    return s_isStarted;\n  }\n  static isInitialized() {\n    return s_isInitialized;\n  }\n  static coreLogFunction(message) {\n    if (!Live2DCubismCore.Logging.csmGetLogFunction()) {\n      return;\n    }\n    Live2DCubismCore.Logging.csmGetLogFunction()(message);\n  }\n  static getLoggingLevel() {\n    if (s_option != null) {\n      return s_option.loggingLevel;\n    }\n    return LogLevel.LogLevel_Off;\n  }\n  constructor() {\n  }\n}\nvar LogLevel = /* @__PURE__ */ ((LogLevel2) => {\n  LogLevel2[LogLevel2[\"LogLevel_Verbose\"] = 0] = \"LogLevel_Verbose\";\n  LogLevel2[LogLevel2[\"LogLevel_Debug\"] = 1] = \"LogLevel_Debug\";\n  LogLevel2[LogLevel2[\"LogLevel_Info\"] = 2] = \"LogLevel_Info\";\n  LogLevel2[LogLevel2[\"LogLevel_Warning\"] = 3] = \"LogLevel_Warning\";\n  LogLevel2[LogLevel2[\"LogLevel_Error\"] = 4] = \"LogLevel_Error\";\n  LogLevel2[LogLevel2[\"LogLevel_Off\"] = 5] = \"LogLevel_Off\";\n  return LogLevel2;\n})(LogLevel || {});\nconst CSM_ASSERT = () => {\n};\nfunction CubismLogDebug(fmt, ...args) {\n  CubismDebug.print(LogLevel.LogLevel_Debug, \"[CSM][D]\" + fmt + \"\\n\", args);\n}\nfunction CubismLogInfo(fmt, ...args) {\n  CubismDebug.print(LogLevel.LogLevel_Info, \"[CSM][I]\" + fmt + \"\\n\", args);\n}\nfunction CubismLogWarning(fmt, ...args) {\n  CubismDebug.print(LogLevel.LogLevel_Warning, \"[CSM][W]\" + fmt + \"\\n\", args);\n}\nfunction CubismLogError(fmt, ...args) {\n  CubismDebug.print(LogLevel.LogLevel_Error, \"[CSM][E]\" + fmt + \"\\n\", args);\n}\nclass CubismDebug {\n  static print(logLevel, format, args) {\n    if (logLevel < CubismFramework.getLoggingLevel()) {\n      return;\n    }\n    const logPrint = CubismFramework.coreLogFunction;\n    if (!logPrint)\n      return;\n    const buffer = format.replace(/{(\\d+)}/g, (m, k) => {\n      return args[k];\n    });\n    logPrint(buffer);\n  }\n  static dumpBytes(logLevel, data, length) {\n    for (let i = 0; i < length; i++) {\n      if (i % 16 == 0 && i > 0)\n        this.print(logLevel, \"\\n\");\n      else if (i % 8 == 0 && i > 0)\n        this.print(logLevel, \"  \");\n      this.print(logLevel, \"{0} \", [data[i] & 255]);\n    }\n    this.print(logLevel, \"\\n\");\n  }\n  constructor() {\n  }\n}\nclass ACubismMotion {\n  constructor() {\n    this._fadeInSeconds = -1;\n    this._fadeOutSeconds = -1;\n    this._weight = 1;\n    this._offsetSeconds = 0;\n    this._firedEventValues = [];\n  }\n  release() {\n    this._weight = 0;\n  }\n  updateParameters(model, motionQueueEntry, userTimeSeconds) {\n    if (!motionQueueEntry.isAvailable() || motionQueueEntry.isFinished()) {\n      return;\n    }\n    if (!motionQueueEntry.isStarted()) {\n      motionQueueEntry.setIsStarted(true);\n      motionQueueEntry.setStartTime(userTimeSeconds - this._offsetSeconds);\n      motionQueueEntry.setFadeInStartTime(userTimeSeconds);\n      const duration = this.getDuration();\n      if (motionQueueEntry.getEndTime() < 0) {\n        motionQueueEntry.setEndTime(duration <= 0 ? -1 : motionQueueEntry.getStartTime() + duration);\n      }\n    }\n    let fadeWeight = this._weight;\n    const fadeIn = this._fadeInSeconds == 0 ? 1 : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / this._fadeInSeconds);\n    const fadeOut = this._fadeOutSeconds == 0 || motionQueueEntry.getEndTime() < 0 ? 1 : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / this._fadeOutSeconds);\n    fadeWeight = fadeWeight * fadeIn * fadeOut;\n    motionQueueEntry.setState(userTimeSeconds, fadeWeight);\n    this.doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry);\n    if (motionQueueEntry.getEndTime() > 0 && motionQueueEntry.getEndTime() < userTimeSeconds) {\n      motionQueueEntry.setIsFinished(true);\n    }\n  }\n  setFadeInTime(fadeInSeconds) {\n    this._fadeInSeconds = fadeInSeconds;\n  }\n  setFadeOutTime(fadeOutSeconds) {\n    this._fadeOutSeconds = fadeOutSeconds;\n  }\n  getFadeOutTime() {\n    return this._fadeOutSeconds;\n  }\n  getFadeInTime() {\n    return this._fadeInSeconds;\n  }\n  setWeight(weight) {\n    this._weight = weight;\n  }\n  getWeight() {\n    return this._weight;\n  }\n  getDuration() {\n    return -1;\n  }\n  getLoopDuration() {\n    return -1;\n  }\n  setOffsetTime(offsetSeconds) {\n    this._offsetSeconds = offsetSeconds;\n  }\n  getFiredEvent(beforeCheckTimeSeconds, motionTimeSeconds) {\n    return this._firedEventValues;\n  }\n  setFinishedMotionHandler(onFinishedMotionHandler) {\n    this._onFinishedMotion = onFinishedMotionHandler;\n  }\n  getFinishedMotionHandler() {\n    return this._onFinishedMotion;\n  }\n}\nconst DefaultFadeTime = 1;\nclass CubismExpressionMotion extends ACubismMotion {\n  constructor() {\n    super();\n    this._parameters = [];\n  }\n  static create(json) {\n    const expression = new CubismExpressionMotion();\n    const fadeInTime = json.FadeInTime;\n    const fadeOutTime = json.FadeOutTime;\n    expression.setFadeInTime(fadeInTime !== void 0 ? fadeInTime : DefaultFadeTime);\n    expression.setFadeOutTime(fadeOutTime !== void 0 ? fadeOutTime : DefaultFadeTime);\n    const parameters = json.Parameters || [];\n    for (let i = 0; i < parameters.length; ++i) {\n      const param = parameters[i];\n      const parameterId = param.Id;\n      const value = param.Value;\n      let blendType;\n      switch (param.Blend) {\n        case \"Multiply\":\n          blendType = ExpressionBlendType.ExpressionBlendType_Multiply;\n          break;\n        case \"Overwrite\":\n          blendType = ExpressionBlendType.ExpressionBlendType_Overwrite;\n          break;\n        case \"Add\":\n        default:\n          blendType = ExpressionBlendType.ExpressionBlendType_Add;\n          break;\n      }\n      const item = {\n        parameterId,\n        blendType,\n        value\n      };\n      expression._parameters.push(item);\n    }\n    return expression;\n  }\n  doUpdateParameters(model, userTimeSeconds, weight, motionQueueEntry) {\n    for (let i = 0; i < this._parameters.length; ++i) {\n      const parameter = this._parameters[i];\n      switch (parameter.blendType) {\n        case ExpressionBlendType.ExpressionBlendType_Add: {\n          model.addParameterValueById(parameter.parameterId, parameter.value, weight);\n          break;\n        }\n        case ExpressionBlendType.ExpressionBlendType_Multiply: {\n          model.multiplyParameterValueById(parameter.parameterId, parameter.value, weight);\n          break;\n        }\n        case ExpressionBlendType.ExpressionBlendType_Overwrite: {\n          model.setParameterValueById(parameter.parameterId, parameter.value, weight);\n          break;\n        }\n      }\n    }\n  }\n}\nvar ExpressionBlendType = /* @__PURE__ */ ((ExpressionBlendType2) => {\n  ExpressionBlendType2[ExpressionBlendType2[\"ExpressionBlendType_Add\"] = 0] = \"ExpressionBlendType_Add\";\n  ExpressionBlendType2[ExpressionBlendType2[\"ExpressionBlendType_Multiply\"] = 1] = \"ExpressionBlendType_Multiply\";\n  ExpressionBlendType2[ExpressionBlendType2[\"ExpressionBlendType_Overwrite\"] = 2] = \"ExpressionBlendType_Overwrite\";\n  return ExpressionBlendType2;\n})(ExpressionBlendType || {});\nclass CubismMotionQueueEntry {\n  constructor() {\n    this._autoDelete = false;\n    this._available = true;\n    this._finished = false;\n    this._started = false;\n    this._startTimeSeconds = -1;\n    this._fadeInStartTimeSeconds = 0;\n    this._endTimeSeconds = -1;\n    this._stateTimeSeconds = 0;\n    this._stateWeight = 0;\n    this._lastEventCheckSeconds = 0;\n    this._motionQueueEntryHandle = this;\n    this._fadeOutSeconds = 0;\n    this._isTriggeredFadeOut = false;\n  }\n  release() {\n    if (this._autoDelete && this._motion) {\n      this._motion.release();\n    }\n  }\n  setFadeOut(fadeOutSeconds) {\n    this._fadeOutSeconds = fadeOutSeconds;\n    this._isTriggeredFadeOut = true;\n  }\n  startFadeOut(fadeOutSeconds, userTimeSeconds) {\n    const newEndTimeSeconds = userTimeSeconds + fadeOutSeconds;\n    this._isTriggeredFadeOut = true;\n    if (this._endTimeSeconds < 0 || newEndTimeSeconds < this._endTimeSeconds) {\n      this._endTimeSeconds = newEndTimeSeconds;\n    }\n  }\n  isFinished() {\n    return this._finished;\n  }\n  isStarted() {\n    return this._started;\n  }\n  getStartTime() {\n    return this._startTimeSeconds;\n  }\n  getFadeInStartTime() {\n    return this._fadeInStartTimeSeconds;\n  }\n  getEndTime() {\n    return this._endTimeSeconds;\n  }\n  setStartTime(startTime) {\n    this._startTimeSeconds = startTime;\n  }\n  setFadeInStartTime(startTime) {\n    this._fadeInStartTimeSeconds = startTime;\n  }\n  setEndTime(endTime) {\n    this._endTimeSeconds = endTime;\n  }\n  setIsFinished(f) {\n    this._finished = f;\n  }\n  setIsStarted(f) {\n    this._started = f;\n  }\n  isAvailable() {\n    return this._available;\n  }\n  setIsAvailable(v) {\n    this._available = v;\n  }\n  setState(timeSeconds, weight) {\n    this._stateTimeSeconds = timeSeconds;\n    this._stateWeight = weight;\n  }\n  getStateTime() {\n    return this._stateTimeSeconds;\n  }\n  getStateWeight() {\n    return this._stateWeight;\n  }\n  getLastCheckEventSeconds() {\n    return this._lastEventCheckSeconds;\n  }\n  setLastCheckEventSeconds(checkSeconds) {\n    this._lastEventCheckSeconds = checkSeconds;\n  }\n  isTriggeredFadeOut() {\n    return this._isTriggeredFadeOut;\n  }\n  getFadeOutSeconds() {\n    return this._fadeOutSeconds;\n  }\n}\nclass CubismMotionQueueManager {\n  constructor() {\n    this._userTimeSeconds = 0;\n    this._eventCustomData = null;\n    this._motions = [];\n  }\n  release() {\n    for (let i = 0; i < this._motions.length; ++i) {\n      if (this._motions[i]) {\n        this._motions[i].release();\n      }\n    }\n    this._motions = void 0;\n  }\n  startMotion(motion, autoDelete, userTimeSeconds) {\n    if (motion == null) {\n      return InvalidMotionQueueEntryHandleValue;\n    }\n    let motionQueueEntry;\n    for (let i = 0; i < this._motions.length; ++i) {\n      motionQueueEntry = this._motions[i];\n      if (motionQueueEntry == null) {\n        continue;\n      }\n      motionQueueEntry.setFadeOut(motionQueueEntry._motion.getFadeOutTime());\n    }\n    motionQueueEntry = new CubismMotionQueueEntry();\n    motionQueueEntry._autoDelete = autoDelete;\n    motionQueueEntry._motion = motion;\n    this._motions.push(motionQueueEntry);\n    return motionQueueEntry._motionQueueEntryHandle;\n  }\n  isFinished() {\n    let i = 0;\n    while (i < this._motions.length) {\n      const motionQueueEntry = this._motions[i];\n      if (motionQueueEntry == null) {\n        this._motions.splice(i, 1);\n        continue;\n      }\n      const motion = motionQueueEntry._motion;\n      if (motion == null) {\n        motionQueueEntry.release();\n        this._motions.splice(i, 1);\n        continue;\n      }\n      if (!motionQueueEntry.isFinished()) {\n        return false;\n      }\n      i++;\n    }\n    return true;\n  }\n  isFinishedByHandle(motionQueueEntryNumber) {\n    for (let i = 0; i < this._motions.length; i++) {\n      const motionQueueEntry = this._motions[i];\n      if (motionQueueEntry == null) {\n        continue;\n      }\n      if (motionQueueEntry._motionQueueEntryHandle == motionQueueEntryNumber && !motionQueueEntry.isFinished()) {\n        return false;\n      }\n    }\n    return true;\n  }\n  stopAllMotions() {\n    for (let i = 0; i < this._motions.length; i++) {\n      const motionQueueEntry = this._motions[i];\n      if (motionQueueEntry != null) {\n        motionQueueEntry.release();\n      }\n    }\n    this._motions = [];\n  }\n  getCubismMotionQueueEntry(motionQueueEntryNumber) {\n    return this._motions.find((entry) => entry != null && entry._motionQueueEntryHandle == motionQueueEntryNumber);\n  }\n  setEventCallback(callback, customData = null) {\n    this._eventCallBack = callback;\n    this._eventCustomData = customData;\n  }\n  doUpdateMotion(model, userTimeSeconds) {\n    let updated = false;\n    let i = 0;\n    while (i < this._motions.length) {\n      const motionQueueEntry = this._motions[i];\n      if (motionQueueEntry == null) {\n        this._motions.splice(i, 1);\n        continue;\n      }\n      const motion = motionQueueEntry._motion;\n      if (motion == null) {\n        motionQueueEntry.release();\n        this._motions.splice(i, 1);\n        continue;\n      }\n      motion.updateParameters(model, motionQueueEntry, userTimeSeconds);\n      updated = true;\n      const firedList = motion.getFiredEvent(motionQueueEntry.getLastCheckEventSeconds() - motionQueueEntry.getStartTime(), userTimeSeconds - motionQueueEntry.getStartTime());\n      for (let i2 = 0; i2 < firedList.length; ++i2) {\n        this._eventCallBack(this, firedList[i2], this._eventCustomData);\n      }\n      motionQueueEntry.setLastCheckEventSeconds(userTimeSeconds);\n      if (motionQueueEntry.isFinished()) {\n        motionQueueEntry.release();\n        this._motions.splice(i, 1);\n      } else {\n        if (motionQueueEntry.isTriggeredFadeOut()) {\n          motionQueueEntry.startFadeOut(motionQueueEntry.getFadeOutSeconds(), userTimeSeconds);\n        }\n        i++;\n      }\n    }\n    return updated;\n  }\n}\nconst InvalidMotionQueueEntryHandleValue = -1;\nclass Cubism4ExpressionManager extends ExpressionManager {\n  constructor(settings, options) {\n    var _a;\n    super(settings, options);\n    this.queueManager = new CubismMotionQueueManager();\n    this.definitions = (_a = settings.expressions) != null ? _a : [];\n    this.init();\n  }\n  isFinished() {\n    return this.queueManager.isFinished();\n  }\n  getExpressionIndex(name) {\n    return this.definitions.findIndex((def) => def.Name === name);\n  }\n  getExpressionFile(definition) {\n    return definition.File;\n  }\n  createExpression(data, definition) {\n    return CubismExpressionMotion.create(data);\n  }\n  _setExpression(motion) {\n    return this.queueManager.startMotion(motion, false, performance.now());\n  }\n  stopAllExpressions() {\n    this.queueManager.stopAllMotions();\n  }\n  updateParameters(model, now) {\n    return this.queueManager.doUpdateMotion(model, now);\n  }\n}\nclass CubismModelSettingsJson {\n  constructor(json) {\n    this.groups = json.Groups;\n    this.hitAreas = json.HitAreas;\n    this.layout = json.Layout;\n    this.moc = json.FileReferences.Moc;\n    this.expressions = json.FileReferences.Expressions;\n    this.motions = json.FileReferences.Motions;\n    this.textures = json.FileReferences.Textures;\n    this.physics = json.FileReferences.Physics;\n    this.pose = json.FileReferences.Pose;\n  }\n  getEyeBlinkParameters() {\n    var _a, _b;\n    return (_b = (_a = this.groups) == null ? void 0 : _a.find((group) => group.Name === \"EyeBlink\")) == null ? void 0 : _b.Ids;\n  }\n  getLipSyncParameters() {\n    var _a, _b;\n    return (_b = (_a = this.groups) == null ? void 0 : _a.find((group) => group.Name === \"LipSync\")) == null ? void 0 : _b.Ids;\n  }\n}\nclass Cubism4ModelSettings extends ModelSettings {\n  constructor(json) {\n    super(json);\n    if (!Cubism4ModelSettings.isValidJSON(json)) {\n      throw new TypeError(\"Invalid JSON.\");\n    }\n    Object.assign(this, new CubismModelSettingsJson(json));\n  }\n  static isValidJSON(json) {\n    var _a;\n    return !!(json == null ? void 0 : json.FileReferences) && typeof json.FileReferences.Moc === \"string\" && ((_a = json.FileReferences.Textures) == null ? void 0 : _a.length) > 0 && json.FileReferences.Textures.every((item) => typeof item === \"string\");\n  }\n  replaceFiles(replace) {\n    super.replaceFiles(replace);\n    if (this.motions) {\n      for (const [group, motions] of Object.entries(this.motions)) {\n        for (let i = 0; i < motions.length; i++) {\n          motions[i].File = replace(motions[i].File, `motions.${group}[${i}].File`);\n          if (motions[i].Sound !== void 0) {\n            motions[i].Sound = replace(motions[i].Sound, `motions.${group}[${i}].Sound`);\n          }\n        }\n      }\n    }\n    if (this.expressions) {\n      for (let i = 0; i < this.expressions.length; i++) {\n        this.expressions[i].File = replace(this.expressions[i].File, `expressions[${i}].File`);\n      }\n    }\n  }\n}\napplyMixins(Cubism4ModelSettings, [CubismModelSettingsJson]);\nvar CubismMotionCurveTarget = /* @__PURE__ */ ((CubismMotionCurveTarget2) => {\n  CubismMotionCurveTarget2[CubismMotionCurveTarget2[\"CubismMotionCurveTarget_Model\"] = 0] = \"CubismMotionCurveTarget_Model\";\n  CubismMotionCurveTarget2[CubismMotionCurveTarget2[\"CubismMotionCurveTarget_Parameter\"] = 1] = \"CubismMotionCurveTarget_Parameter\";\n  CubismMotionCurveTarget2[CubismMotionCurveTarget2[\"CubismMotionCurveTarget_PartOpacity\"] = 2] = \"CubismMotionCurveTarget_PartOpacity\";\n  return CubismMotionCurveTarget2;\n})(CubismMotionCurveTarget || {});\nvar CubismMotionSegmentType = /* @__PURE__ */ ((CubismMotionSegmentType2) => {\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_Linear\"] = 0] = \"CubismMotionSegmentType_Linear\";\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_Bezier\"] = 1] = \"CubismMotionSegmentType_Bezier\";\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_Stepped\"] = 2] = \"CubismMotionSegmentType_Stepped\";\n  CubismMotionSegmentType2[CubismMotionSegmentType2[\"CubismMotionSegmentType_InverseStepped\"] = 3] = \"CubismMotionSegmentType_InverseStepped\";\n  return CubismMotionSegmentType2;\n})(CubismMotionSegmentType || {});\nclass CubismMotionPoint {\n  constructor(time = 0, value = 0) {\n    this.time = time;\n    this.value = value;\n  }\n}\nclass CubismMotionSegment {\n  constructor() {\n    this.basePointIndex = 0;\n    this.segmentType = 0;\n  }\n}\nclass CubismMotionCurve {\n  constructor() {\n    this.id = \"\";\n    this.type = 0;\n    this.segmentCount = 0;\n    this.baseSegmentIndex = 0;\n    this.fadeInTime = 0;\n    this.fadeOutTime = 0;\n  }\n}\nclass CubismMotionEvent {\n  constructor() {\n    this.fireTime = 0;\n    this.value = \"\";\n  }\n}\nclass CubismMotionData {\n  constructor() {\n    this.duration = 0;\n    this.loop = false;\n    this.curveCount = 0;\n    this.eventCount = 0;\n    this.fps = 0;\n    this.curves = [];\n    this.segments = [];\n    this.points = [];\n    this.events = [];\n  }\n}\nclass CubismMotionJson {\n  constructor(json) {\n    this._json = json;\n  }\n  release() {\n    this._json = void 0;\n  }\n  getMotionDuration() {\n    return this._json.Meta.Duration;\n  }\n  isMotionLoop() {\n    return this._json.Meta.Loop || false;\n  }\n  getEvaluationOptionFlag(flagType) {\n    if (EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted == flagType) {\n      return !!this._json.Meta.AreBeziersRestricted;\n    }\n    return false;\n  }\n  getMotionCurveCount() {\n    return this._json.Meta.CurveCount;\n  }\n  getMotionFps() {\n    return this._json.Meta.Fps;\n  }\n  getMotionTotalSegmentCount() {\n    return this._json.Meta.TotalSegmentCount;\n  }\n  getMotionTotalPointCount() {\n    return this._json.Meta.TotalPointCount;\n  }\n  getMotionFadeInTime() {\n    return this._json.Meta.FadeInTime;\n  }\n  getMotionFadeOutTime() {\n    return this._json.Meta.FadeOutTime;\n  }\n  getMotionCurveTarget(curveIndex) {\n    return this._json.Curves[curveIndex].Target;\n  }\n  getMotionCurveId(curveIndex) {\n    return this._json.Curves[curveIndex].Id;\n  }\n  getMotionCurveFadeInTime(curveIndex) {\n    return this._json.Curves[curveIndex].FadeInTime;\n  }\n  getMotionCurveFadeOutTime(curveIndex) {\n    return this._json.Curves[curveIndex].FadeOutTime;\n  }\n  getMotionCurveSegmentCount(curveIndex) {\n    return this._json.Curves[curveIndex].Segments.length;\n  }\n  getMotionCurveSegment(curveIndex, segmentIndex) {\n    return this._json.Curves[curveIndex].Segments[segmentIndex];\n  }\n  getEventCount() {\n    return this._json.Meta.UserDataCount || 0;\n  }\n  getTotalEventValueSize() {\n    return this._json.Meta.TotalUserDataSize;\n  }\n  getEventTime(userDataIndex) {\n    return this._json.UserData[userDataIndex].Time;\n  }\n  getEventValue(userDataIndex) {\n    return this._json.UserData[userDataIndex].Value;\n  }\n}\nvar EvaluationOptionFlag = /* @__PURE__ */ ((EvaluationOptionFlag2) => {\n  EvaluationOptionFlag2[EvaluationOptionFlag2[\"EvaluationOptionFlag_AreBeziersRistricted\"] = 0] = \"EvaluationOptionFlag_AreBeziersRistricted\";\n  return EvaluationOptionFlag2;\n})(EvaluationOptionFlag || {});\nconst EffectNameEyeBlink = \"EyeBlink\";\nconst EffectNameLipSync = \"LipSync\";\nconst TargetNameModel = \"Model\";\nconst TargetNameParameter = \"Parameter\";\nconst TargetNamePartOpacity = \"PartOpacity\";\nconst UseOldBeziersCurveMotion = false;\nfunction lerpPoints(a, b, t) {\n  const result = new CubismMotionPoint();\n  result.time = a.time + (b.time - a.time) * t;\n  result.value = a.value + (b.value - a.value) * t;\n  return result;\n}\nfunction linearEvaluate(points, time) {\n  let t = (time - points[0].time) / (points[1].time - points[0].time);\n  if (t < 0) {\n    t = 0;\n  }\n  return points[0].value + (points[1].value - points[0].value) * t;\n}\nfunction bezierEvaluate(points, time) {\n  let t = (time - points[0].time) / (points[3].time - points[0].time);\n  if (t < 0) {\n    t = 0;\n  }\n  const p01 = lerpPoints(points[0], points[1], t);\n  const p12 = lerpPoints(points[1], points[2], t);\n  const p23 = lerpPoints(points[2], points[3], t);\n  const p012 = lerpPoints(p01, p12, t);\n  const p123 = lerpPoints(p12, p23, t);\n  return lerpPoints(p012, p123, t).value;\n}\nfunction bezierEvaluateCardanoInterpretation(points, time) {\n  const x = time;\n  const x1 = points[0].time;\n  const x2 = points[3].time;\n  const cx1 = points[1].time;\n  const cx2 = points[2].time;\n  const a = x2 - 3 * cx2 + 3 * cx1 - x1;\n  const b = 3 * cx2 - 6 * cx1 + 3 * x1;\n  const c = 3 * cx1 - 3 * x1;\n  const d = x1 - x;\n  const t = CubismMath.cardanoAlgorithmForBezier(a, b, c, d);\n  const p01 = lerpPoints(points[0], points[1], t);\n  const p12 = lerpPoints(points[1], points[2], t);\n  const p23 = lerpPoints(points[2], points[3], t);\n  const p012 = lerpPoints(p01, p12, t);\n  const p123 = lerpPoints(p12, p23, t);\n  return lerpPoints(p012, p123, t).value;\n}\nfunction steppedEvaluate(points, time) {\n  return points[0].value;\n}\nfunction inverseSteppedEvaluate(points, time) {\n  return points[1].value;\n}\nfunction evaluateCurve(motionData, index, time) {\n  const curve = motionData.curves[index];\n  let target = -1;\n  const totalSegmentCount = curve.baseSegmentIndex + curve.segmentCount;\n  let pointPosition = 0;\n  for (let i = curve.baseSegmentIndex; i < totalSegmentCount; ++i) {\n    pointPosition = motionData.segments[i].basePointIndex + (motionData.segments[i].segmentType == CubismMotionSegmentType.CubismMotionSegmentType_Bezier ? 3 : 1);\n    if (motionData.points[pointPosition].time > time) {\n      target = i;\n      break;\n    }\n  }\n  if (target == -1) {\n    return motionData.points[pointPosition].value;\n  }\n  const segment = motionData.segments[target];\n  return segment.evaluate(motionData.points.slice(segment.basePointIndex), time);\n}\nclass CubismMotion extends ACubismMotion {\n  constructor() {\n    super();\n    this._eyeBlinkParameterIds = [];\n    this._lipSyncParameterIds = [];\n    this._sourceFrameRate = 30;\n    this._loopDurationSeconds = -1;\n    this._isLoop = false;\n    this._isLoopFadeIn = true;\n    this._lastWeight = 0;\n  }\n  static create(json, onFinishedMotionHandler) {\n    const ret = new CubismMotion();\n    ret.parse(json);\n    ret._sourceFrameRate = ret._motionData.fps;\n    ret._loopDurationSeconds = ret._motionData.duration;\n    ret._onFinishedMotion = onFinishedMotionHandler;\n    return ret;\n  }\n  doUpdateParameters(model, userTimeSeconds, fadeWeight, motionQueueEntry) {\n    if (this._modelCurveIdEyeBlink == null) {\n      this._modelCurveIdEyeBlink = EffectNameEyeBlink;\n    }\n    if (this._modelCurveIdLipSync == null) {\n      this._modelCurveIdLipSync = EffectNameLipSync;\n    }\n    let timeOffsetSeconds = userTimeSeconds - motionQueueEntry.getStartTime();\n    if (timeOffsetSeconds < 0) {\n      timeOffsetSeconds = 0;\n    }\n    let lipSyncValue = Number.MAX_VALUE;\n    let eyeBlinkValue = Number.MAX_VALUE;\n    const MaxTargetSize = 64;\n    let lipSyncFlags = 0;\n    let eyeBlinkFlags = 0;\n    if (this._eyeBlinkParameterIds.length > MaxTargetSize) {\n      CubismLogDebug(\"too many eye blink targets : {0}\", this._eyeBlinkParameterIds.length);\n    }\n    if (this._lipSyncParameterIds.length > MaxTargetSize) {\n      CubismLogDebug(\"too many lip sync targets : {0}\", this._lipSyncParameterIds.length);\n    }\n    const tmpFadeIn = this._fadeInSeconds <= 0 ? 1 : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / this._fadeInSeconds);\n    const tmpFadeOut = this._fadeOutSeconds <= 0 || motionQueueEntry.getEndTime() < 0 ? 1 : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / this._fadeOutSeconds);\n    let value;\n    let c, parameterIndex;\n    let time = timeOffsetSeconds;\n    if (this._isLoop) {\n      while (time > this._motionData.duration) {\n        time -= this._motionData.duration;\n      }\n    }\n    const curves = this._motionData.curves;\n    for (c = 0; c < this._motionData.curveCount && curves[c].type == CubismMotionCurveTarget.CubismMotionCurveTarget_Model; ++c) {\n      value = evaluateCurve(this._motionData, c, time);\n      if (curves[c].id == this._modelCurveIdEyeBlink) {\n        eyeBlinkValue = value;\n      } else if (curves[c].id == this._modelCurveIdLipSync) {\n        lipSyncValue = value;\n      }\n    }\n    for (; c < this._motionData.curveCount && curves[c].type == CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter; ++c) {\n      parameterIndex = model.getParameterIndex(curves[c].id);\n      if (parameterIndex == -1) {\n        continue;\n      }\n      const sourceValue = model.getParameterValueByIndex(parameterIndex);\n      value = evaluateCurve(this._motionData, c, time);\n      if (eyeBlinkValue != Number.MAX_VALUE) {\n        for (let i = 0; i < this._eyeBlinkParameterIds.length && i < MaxTargetSize; ++i) {\n          if (this._eyeBlinkParameterIds[i] == curves[c].id) {\n            value *= eyeBlinkValue;\n            eyeBlinkFlags |= 1 << i;\n            break;\n          }\n        }\n      }\n      if (lipSyncValue != Number.MAX_VALUE) {\n        for (let i = 0; i < this._lipSyncParameterIds.length && i < MaxTargetSize; ++i) {\n          if (this._lipSyncParameterIds[i] == curves[c].id) {\n            value += lipSyncValue;\n            lipSyncFlags |= 1 << i;\n            break;\n          }\n        }\n      }\n      let v;\n      if (curves[c].fadeInTime < 0 && curves[c].fadeOutTime < 0) {\n        v = sourceValue + (value - sourceValue) * fadeWeight;\n      } else {\n        let fin;\n        let fout;\n        if (curves[c].fadeInTime < 0) {\n          fin = tmpFadeIn;\n        } else {\n          fin = curves[c].fadeInTime == 0 ? 1 : CubismMath.getEasingSine((userTimeSeconds - motionQueueEntry.getFadeInStartTime()) / curves[c].fadeInTime);\n        }\n        if (curves[c].fadeOutTime < 0) {\n          fout = tmpFadeOut;\n        } else {\n          fout = curves[c].fadeOutTime == 0 || motionQueueEntry.getEndTime() < 0 ? 1 : CubismMath.getEasingSine((motionQueueEntry.getEndTime() - userTimeSeconds) / curves[c].fadeOutTime);\n        }\n        const paramWeight = this._weight * fin * fout;\n        v = sourceValue + (value - sourceValue) * paramWeight;\n      }\n      model.setParameterValueByIndex(parameterIndex, v, 1);\n    }\n    {\n      if (eyeBlinkValue != Number.MAX_VALUE) {\n        for (let i = 0; i < this._eyeBlinkParameterIds.length && i < MaxTargetSize; ++i) {\n          const sourceValue = model.getParameterValueById(this._eyeBlinkParameterIds[i]);\n          if (eyeBlinkFlags >> i & 1) {\n            continue;\n          }\n          const v = sourceValue + (eyeBlinkValue - sourceValue) * fadeWeight;\n          model.setParameterValueById(this._eyeBlinkParameterIds[i], v);\n        }\n      }\n      if (lipSyncValue != Number.MAX_VALUE) {\n        for (let i = 0; i < this._lipSyncParameterIds.length && i < MaxTargetSize; ++i) {\n          const sourceValue = model.getParameterValueById(this._lipSyncParameterIds[i]);\n          if (lipSyncFlags >> i & 1) {\n            continue;\n          }\n          const v = sourceValue + (lipSyncValue - sourceValue) * fadeWeight;\n          model.setParameterValueById(this._lipSyncParameterIds[i], v);\n        }\n      }\n    }\n    for (; c < this._motionData.curveCount && curves[c].type == CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity; ++c) {\n      value = evaluateCurve(this._motionData, c, time);\n      if (CubismConfig.setOpacityFromMotion) {\n        model.setPartOpacityById(curves[c].id, value);\n      } else {\n        parameterIndex = model.getParameterIndex(curves[c].id);\n        if (parameterIndex == -1) {\n          continue;\n        }\n        model.setParameterValueByIndex(parameterIndex, value);\n      }\n    }\n    if (timeOffsetSeconds >= this._motionData.duration) {\n      if (this._isLoop) {\n        motionQueueEntry.setStartTime(userTimeSeconds);\n        if (this._isLoopFadeIn) {\n          motionQueueEntry.setFadeInStartTime(userTimeSeconds);\n        }\n      } else {\n        if (this._onFinishedMotion) {\n          this._onFinishedMotion(this);\n        }\n        motionQueueEntry.setIsFinished(true);\n      }\n    }\n    this._lastWeight = fadeWeight;\n  }\n  setIsLoop(loop) {\n    this._isLoop = loop;\n  }\n  isLoop() {\n    return this._isLoop;\n  }\n  setIsLoopFadeIn(loopFadeIn) {\n    this._isLoopFadeIn = loopFadeIn;\n  }\n  isLoopFadeIn() {\n    return this._isLoopFadeIn;\n  }\n  getDuration() {\n    return this._isLoop ? -1 : this._loopDurationSeconds;\n  }\n  getLoopDuration() {\n    return this._loopDurationSeconds;\n  }\n  setParameterFadeInTime(parameterId, value) {\n    const curves = this._motionData.curves;\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves[i].id) {\n        curves[i].fadeInTime = value;\n        return;\n      }\n    }\n  }\n  setParameterFadeOutTime(parameterId, value) {\n    const curves = this._motionData.curves;\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves[i].id) {\n        curves[i].fadeOutTime = value;\n        return;\n      }\n    }\n  }\n  getParameterFadeInTime(parameterId) {\n    const curves = this._motionData.curves;\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves[i].id) {\n        return curves[i].fadeInTime;\n      }\n    }\n    return -1;\n  }\n  getParameterFadeOutTime(parameterId) {\n    const curves = this._motionData.curves;\n    for (let i = 0; i < this._motionData.curveCount; ++i) {\n      if (parameterId == curves[i].id) {\n        return curves[i].fadeOutTime;\n      }\n    }\n    return -1;\n  }\n  setEffectIds(eyeBlinkParameterIds, lipSyncParameterIds) {\n    this._eyeBlinkParameterIds = eyeBlinkParameterIds;\n    this._lipSyncParameterIds = lipSyncParameterIds;\n  }\n  release() {\n    this._motionData = void 0;\n  }\n  parse(motionJson) {\n    this._motionData = new CubismMotionData();\n    let json = new CubismMotionJson(motionJson);\n    this._motionData.duration = json.getMotionDuration();\n    this._motionData.loop = json.isMotionLoop();\n    this._motionData.curveCount = json.getMotionCurveCount();\n    this._motionData.fps = json.getMotionFps();\n    this._motionData.eventCount = json.getEventCount();\n    const areBeziersRestructed = json.getEvaluationOptionFlag(EvaluationOptionFlag.EvaluationOptionFlag_AreBeziersRistricted);\n    const fadeInSeconds = json.getMotionFadeInTime();\n    const fadeOutSeconds = json.getMotionFadeOutTime();\n    if (fadeInSeconds !== void 0) {\n      this._fadeInSeconds = fadeInSeconds < 0 ? 1 : fadeInSeconds;\n    } else {\n      this._fadeInSeconds = 1;\n    }\n    if (fadeOutSeconds !== void 0) {\n      this._fadeOutSeconds = fadeOutSeconds < 0 ? 1 : fadeOutSeconds;\n    } else {\n      this._fadeOutSeconds = 1;\n    }\n    this._motionData.curves = Array.from({ length: this._motionData.curveCount }).map(() => new CubismMotionCurve());\n    this._motionData.segments = Array.from({ length: json.getMotionTotalSegmentCount() }).map(() => new CubismMotionSegment());\n    this._motionData.events = Array.from({ length: this._motionData.eventCount }).map(() => new CubismMotionEvent());\n    this._motionData.points = [];\n    let totalPointCount = 0;\n    let totalSegmentCount = 0;\n    for (let curveCount = 0; curveCount < this._motionData.curveCount; ++curveCount) {\n      const curve = this._motionData.curves[curveCount];\n      switch (json.getMotionCurveTarget(curveCount)) {\n        case TargetNameModel:\n          curve.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Model;\n          break;\n        case TargetNameParameter:\n          curve.type = CubismMotionCurveTarget.CubismMotionCurveTarget_Parameter;\n          break;\n        case TargetNamePartOpacity:\n          curve.type = CubismMotionCurveTarget.CubismMotionCurveTarget_PartOpacity;\n          break;\n        default:\n          CubismLogWarning('Warning : Unable to get segment type from Curve! The number of \"CurveCount\" may be incorrect!');\n      }\n      curve.id = json.getMotionCurveId(curveCount);\n      curve.baseSegmentIndex = totalSegmentCount;\n      const fadeInTime = json.getMotionCurveFadeInTime(curveCount);\n      const fadeOutTime = json.getMotionCurveFadeOutTime(curveCount);\n      curve.fadeInTime = fadeInTime !== void 0 ? fadeInTime : -1;\n      curve.fadeOutTime = fadeOutTime !== void 0 ? fadeOutTime : -1;\n      for (let segmentPosition = 0; segmentPosition < json.getMotionCurveSegmentCount(curveCount); ) {\n        if (segmentPosition == 0) {\n          this._motionData.segments[totalSegmentCount].basePointIndex = totalPointCount;\n          this._motionData.points[totalPointCount] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition), json.getMotionCurveSegment(curveCount, segmentPosition + 1));\n          totalPointCount += 1;\n          segmentPosition += 2;\n        } else {\n          this._motionData.segments[totalSegmentCount].basePointIndex = totalPointCount - 1;\n        }\n        const segment = json.getMotionCurveSegment(curveCount, segmentPosition);\n        switch (segment) {\n          case CubismMotionSegmentType.CubismMotionSegmentType_Linear: {\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Linear;\n            this._motionData.segments[totalSegmentCount].evaluate = linearEvaluate;\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 1), json.getMotionCurveSegment(curveCount, segmentPosition + 2));\n            totalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          }\n          case CubismMotionSegmentType.CubismMotionSegmentType_Bezier: {\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Bezier;\n            if (areBeziersRestructed || UseOldBeziersCurveMotion) {\n              this._motionData.segments[totalSegmentCount].evaluate = bezierEvaluate;\n            } else {\n              this._motionData.segments[totalSegmentCount].evaluate = bezierEvaluateCardanoInterpretation;\n            }\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 1), json.getMotionCurveSegment(curveCount, segmentPosition + 2));\n            this._motionData.points[totalPointCount + 1] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 3), json.getMotionCurveSegment(curveCount, segmentPosition + 4));\n            this._motionData.points[totalPointCount + 2] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 5), json.getMotionCurveSegment(curveCount, segmentPosition + 6));\n            totalPointCount += 3;\n            segmentPosition += 7;\n            break;\n          }\n          case CubismMotionSegmentType.CubismMotionSegmentType_Stepped: {\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_Stepped;\n            this._motionData.segments[totalSegmentCount].evaluate = steppedEvaluate;\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 1), json.getMotionCurveSegment(curveCount, segmentPosition + 2));\n            totalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          }\n          case CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped: {\n            this._motionData.segments[totalSegmentCount].segmentType = CubismMotionSegmentType.CubismMotionSegmentType_InverseStepped;\n            this._motionData.segments[totalSegmentCount].evaluate = inverseSteppedEvaluate;\n            this._motionData.points[totalPointCount] = new CubismMotionPoint(json.getMotionCurveSegment(curveCount, segmentPosition + 1), json.getMotionCurveSegment(curveCount, segmentPosition + 2));\n            totalPointCount += 1;\n            segmentPosition += 3;\n            break;\n          }\n        }\n        ++curve.segmentCount;\n        ++totalSegmentCount;\n      }\n      this._motionData.curves.push(curve);\n    }\n    for (let userdatacount = 0; userdatacount < json.getEventCount(); ++userdatacount) {\n      this._motionData.events[userdatacount].fireTime = json.getEventTime(userdatacount);\n      this._motionData.events[userdatacount].value = json.getEventValue(userdatacount);\n    }\n    json.release();\n  }\n  getFiredEvent(beforeCheckTimeSeconds, motionTimeSeconds) {\n    this._firedEventValues.length = 0;\n    for (let u = 0; u < this._motionData.eventCount; ++u) {\n      if (this._motionData.events[u].fireTime > beforeCheckTimeSeconds && this._motionData.events[u].fireTime <= motionTimeSeconds) {\n        this._firedEventValues.push(this._motionData.events[u].value);\n      }\n    }\n    return this._firedEventValues;\n  }\n}\nclass Cubism4MotionManager extends MotionManager {\n  constructor(settings, options) {\n    var _a;\n    super(settings, options);\n    this.groups = { idle: \"Idle\" };\n    this.motionDataType = \"json\";\n    this.queueManager = new CubismMotionQueueManager();\n    this.definitions = (_a = settings.motions) != null ? _a : {};\n    this.eyeBlinkIds = settings.getEyeBlinkParameters() || [];\n    this.lipSyncIds = settings.getLipSyncParameters() || [];\n    this.init(options);\n  }\n  init(options) {\n    super.init(options);\n    if (this.settings.expressions) {\n      this.expressionManager = new Cubism4ExpressionManager(this.settings, options);\n    }\n    this.queueManager.setEventCallback((caller, eventValue, customData) => {\n      this.emit(\"motion:\" + eventValue);\n    });\n  }\n  isFinished() {\n    return this.queueManager.isFinished();\n  }\n  _startMotion(motion, onFinish) {\n    motion.setFinishedMotionHandler(onFinish);\n    this.queueManager.stopAllMotions();\n    return this.queueManager.startMotion(motion, false, performance.now());\n  }\n  _stopAllMotions() {\n    this.queueManager.stopAllMotions();\n  }\n  createMotion(data, group, definition) {\n    const motion = CubismMotion.create(data);\n    const json = new CubismMotionJson(data);\n    const defaultFadingDuration = (group === this.groups.idle ? config.idleMotionFadingDuration : config.motionFadingDuration) / 1e3;\n    if (json.getMotionFadeInTime() === void 0) {\n      motion.setFadeInTime(definition.FadeInTime > 0 ? definition.FadeInTime : defaultFadingDuration);\n    }\n    if (json.getMotionFadeOutTime() === void 0) {\n      motion.setFadeOutTime(definition.FadeOutTime > 0 ? definition.FadeOutTime : defaultFadingDuration);\n    }\n    motion.setEffectIds(this.eyeBlinkIds, this.lipSyncIds);\n    return motion;\n  }\n  getMotionFile(definition) {\n    return definition.File;\n  }\n  getMotionName(definition) {\n    return definition.File;\n  }\n  getSoundFile(definition) {\n    return definition.Sound;\n  }\n  updateParameters(model, now) {\n    return this.queueManager.doUpdateMotion(model, now);\n  }\n  destroy() {\n    super.destroy();\n    this.queueManager.release();\n    this.queueManager = void 0;\n  }\n}\nconst ParamAngleX = \"ParamAngleX\";\nconst ParamAngleY = \"ParamAngleY\";\nconst ParamAngleZ = \"ParamAngleZ\";\nconst ParamEyeBallX = \"ParamEyeBallX\";\nconst ParamEyeBallY = \"ParamEyeBallY\";\nconst ParamBodyAngleX = \"ParamBodyAngleX\";\nconst ParamBreath = \"ParamBreath\";\nclass CubismBreath {\n  constructor() {\n    this._breathParameters = [];\n    this._currentTime = 0;\n  }\n  static create() {\n    return new CubismBreath();\n  }\n  setParameters(breathParameters) {\n    this._breathParameters = breathParameters;\n  }\n  getParameters() {\n    return this._breathParameters;\n  }\n  updateParameters(model, deltaTimeSeconds) {\n    this._currentTime += deltaTimeSeconds;\n    const t = this._currentTime * 2 * 3.14159;\n    for (let i = 0; i < this._breathParameters.length; ++i) {\n      const data = this._breathParameters[i];\n      model.addParameterValueById(data.parameterId, data.offset + data.peak * Math.sin(t / data.cycle), data.weight);\n    }\n  }\n}\nclass BreathParameterData {\n  constructor(parameterId, offset, peak, cycle, weight) {\n    this.parameterId = parameterId == void 0 ? void 0 : parameterId;\n    this.offset = offset == void 0 ? 0 : offset;\n    this.peak = peak == void 0 ? 0 : peak;\n    this.cycle = cycle == void 0 ? 0 : cycle;\n    this.weight = weight == void 0 ? 0 : weight;\n  }\n}\nconst _CubismEyeBlink = class {\n  static create(modelSetting) {\n    return new _CubismEyeBlink(modelSetting);\n  }\n  setBlinkingInterval(blinkingInterval) {\n    this._blinkingIntervalSeconds = blinkingInterval;\n  }\n  setBlinkingSetting(closing, closed, opening) {\n    this._closingSeconds = closing;\n    this._closedSeconds = closed;\n    this._openingSeconds = opening;\n  }\n  setParameterIds(parameterIds) {\n    this._parameterIds = parameterIds;\n  }\n  getParameterIds() {\n    return this._parameterIds;\n  }\n  updateParameters(model, deltaTimeSeconds) {\n    this._userTimeSeconds += deltaTimeSeconds;\n    let parameterValue;\n    let t = 0;\n    switch (this._blinkingState) {\n      case EyeState.EyeState_Closing:\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._closingSeconds;\n        if (t >= 1) {\n          t = 1;\n          this._blinkingState = EyeState.EyeState_Closed;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n        parameterValue = 1 - t;\n        break;\n      case EyeState.EyeState_Closed:\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._closedSeconds;\n        if (t >= 1) {\n          this._blinkingState = EyeState.EyeState_Opening;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n        parameterValue = 0;\n        break;\n      case EyeState.EyeState_Opening:\n        t = (this._userTimeSeconds - this._stateStartTimeSeconds) / this._openingSeconds;\n        if (t >= 1) {\n          t = 1;\n          this._blinkingState = EyeState.EyeState_Interval;\n          this._nextBlinkingTime = this.determinNextBlinkingTiming();\n        }\n        parameterValue = t;\n        break;\n      case EyeState.EyeState_Interval:\n        if (this._nextBlinkingTime < this._userTimeSeconds) {\n          this._blinkingState = EyeState.EyeState_Closing;\n          this._stateStartTimeSeconds = this._userTimeSeconds;\n        }\n        parameterValue = 1;\n        break;\n      case EyeState.EyeState_First:\n      default:\n        this._blinkingState = EyeState.EyeState_Interval;\n        this._nextBlinkingTime = this.determinNextBlinkingTiming();\n        parameterValue = 1;\n        break;\n    }\n    if (!_CubismEyeBlink.CloseIfZero) {\n      parameterValue = -parameterValue;\n    }\n    for (let i = 0; i < this._parameterIds.length; ++i) {\n      model.setParameterValueById(this._parameterIds[i], parameterValue);\n    }\n  }\n  constructor(modelSetting) {\n    var _a, _b;\n    this._blinkingState = EyeState.EyeState_First;\n    this._nextBlinkingTime = 0;\n    this._stateStartTimeSeconds = 0;\n    this._blinkingIntervalSeconds = 4;\n    this._closingSeconds = 0.1;\n    this._closedSeconds = 0.05;\n    this._openingSeconds = 0.15;\n    this._userTimeSeconds = 0;\n    this._parameterIds = [];\n    if (modelSetting == null) {\n      return;\n    }\n    this._parameterIds = (_b = (_a = modelSetting.getEyeBlinkParameters()) == null ? void 0 : _a.slice()) != null ? _b : this._parameterIds;\n  }\n  determinNextBlinkingTiming() {\n    const r = Math.random();\n    return this._userTimeSeconds + r * (2 * this._blinkingIntervalSeconds - 1);\n  }\n};\nlet CubismEyeBlink = _CubismEyeBlink;\nCubismEyeBlink.CloseIfZero = true;\nvar EyeState = /* @__PURE__ */ ((EyeState2) => {\n  EyeState2[EyeState2[\"EyeState_First\"] = 0] = \"EyeState_First\";\n  EyeState2[EyeState2[\"EyeState_Interval\"] = 1] = \"EyeState_Interval\";\n  EyeState2[EyeState2[\"EyeState_Closing\"] = 2] = \"EyeState_Closing\";\n  EyeState2[EyeState2[\"EyeState_Closed\"] = 3] = \"EyeState_Closed\";\n  EyeState2[EyeState2[\"EyeState_Opening\"] = 4] = \"EyeState_Opening\";\n  return EyeState2;\n})(EyeState || {});\nclass csmRect {\n  constructor(x = 0, y = 0, w = 0, h = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = w;\n    this.height = h;\n  }\n  getCenterX() {\n    return this.x + 0.5 * this.width;\n  }\n  getCenterY() {\n    return this.y + 0.5 * this.height;\n  }\n  getRight() {\n    return this.x + this.width;\n  }\n  getBottom() {\n    return this.y + this.height;\n  }\n  setRect(r) {\n    this.x = r.x;\n    this.y = r.y;\n    this.width = r.width;\n    this.height = r.height;\n  }\n  expand(w, h) {\n    this.x -= w;\n    this.y -= h;\n    this.width += w * 2;\n    this.height += h * 2;\n  }\n}\nconst ColorChannelCount = 4;\nconst shaderCount = 10;\nlet s_instance;\nlet s_viewport;\nlet s_fbo;\nclass CubismClippingManager_WebGL {\n  getChannelFlagAsColor(channelNo) {\n    return this._channelColors[channelNo];\n  }\n  getMaskRenderTexture() {\n    let ret = 0;\n    if (this._maskTexture && this._maskTexture.texture != 0) {\n      this._maskTexture.frameNo = this._currentFrameNo;\n      ret = this._maskTexture.texture;\n    }\n    if (ret == 0) {\n      const size = this._clippingMaskBufferSize;\n      this._colorBuffer = this.gl.createTexture();\n      this.gl.bindTexture(this.gl.TEXTURE_2D, this._colorBuffer);\n      this.gl.texImage2D(this.gl.TEXTURE_2D, 0, this.gl.RGBA, size, size, 0, this.gl.RGBA, this.gl.UNSIGNED_BYTE, null);\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, this.gl.CLAMP_TO_EDGE);\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, this.gl.CLAMP_TO_EDGE);\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, this.gl.LINEAR);\n      this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, this.gl.LINEAR);\n      this.gl.bindTexture(this.gl.TEXTURE_2D, null);\n      ret = this.gl.createFramebuffer();\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, ret);\n      this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER, this.gl.COLOR_ATTACHMENT0, this.gl.TEXTURE_2D, this._colorBuffer, 0);\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\n      this._maskTexture = new CubismRenderTextureResource(this._currentFrameNo, ret);\n    }\n    return ret;\n  }\n  setGL(gl) {\n    this.gl = gl;\n  }\n  calcClippedDrawTotalBounds(model, clippingContext) {\n    let clippedDrawTotalMinX = Number.MAX_VALUE;\n    let clippedDrawTotalMinY = Number.MAX_VALUE;\n    let clippedDrawTotalMaxX = Number.MIN_VALUE;\n    let clippedDrawTotalMaxY = Number.MIN_VALUE;\n    const clippedDrawCount = clippingContext._clippedDrawableIndexList.length;\n    for (let clippedDrawableIndex = 0; clippedDrawableIndex < clippedDrawCount; clippedDrawableIndex++) {\n      const drawableIndex = clippingContext._clippedDrawableIndexList[clippedDrawableIndex];\n      const drawableVertexCount = model.getDrawableVertexCount(drawableIndex);\n      const drawableVertexes = model.getDrawableVertices(drawableIndex);\n      let minX = Number.MAX_VALUE;\n      let minY = Number.MAX_VALUE;\n      let maxX = Number.MIN_VALUE;\n      let maxY = Number.MIN_VALUE;\n      const loop = drawableVertexCount * Constant.vertexStep;\n      for (let pi = Constant.vertexOffset; pi < loop; pi += Constant.vertexStep) {\n        const x = drawableVertexes[pi];\n        const y = drawableVertexes[pi + 1];\n        if (x < minX) {\n          minX = x;\n        }\n        if (x > maxX) {\n          maxX = x;\n        }\n        if (y < minY) {\n          minY = y;\n        }\n        if (y > maxY) {\n          maxY = y;\n        }\n      }\n      if (minX == Number.MAX_VALUE) {\n        continue;\n      }\n      if (minX < clippedDrawTotalMinX) {\n        clippedDrawTotalMinX = minX;\n      }\n      if (minY < clippedDrawTotalMinY) {\n        clippedDrawTotalMinY = minY;\n      }\n      if (maxX > clippedDrawTotalMaxX) {\n        clippedDrawTotalMaxX = maxX;\n      }\n      if (maxY > clippedDrawTotalMaxY) {\n        clippedDrawTotalMaxY = maxY;\n      }\n      if (clippedDrawTotalMinX == Number.MAX_VALUE) {\n        clippingContext._allClippedDrawRect.x = 0;\n        clippingContext._allClippedDrawRect.y = 0;\n        clippingContext._allClippedDrawRect.width = 0;\n        clippingContext._allClippedDrawRect.height = 0;\n        clippingContext._isUsing = false;\n      } else {\n        clippingContext._isUsing = true;\n        const w = clippedDrawTotalMaxX - clippedDrawTotalMinX;\n        const h = clippedDrawTotalMaxY - clippedDrawTotalMinY;\n        clippingContext._allClippedDrawRect.x = clippedDrawTotalMinX;\n        clippingContext._allClippedDrawRect.y = clippedDrawTotalMinY;\n        clippingContext._allClippedDrawRect.width = w;\n        clippingContext._allClippedDrawRect.height = h;\n      }\n    }\n  }\n  constructor() {\n    this._maskRenderTexture = null;\n    this._colorBuffer = null;\n    this._currentFrameNo = 0;\n    this._clippingMaskBufferSize = 256;\n    this._clippingContextListForMask = [];\n    this._clippingContextListForDraw = [];\n    this._channelColors = [];\n    this._tmpBoundsOnModel = new csmRect();\n    this._tmpMatrix = new CubismMatrix44();\n    this._tmpMatrixForMask = new CubismMatrix44();\n    this._tmpMatrixForDraw = new CubismMatrix44();\n    let tmp = new CubismTextureColor();\n    tmp.R = 1;\n    tmp.G = 0;\n    tmp.B = 0;\n    tmp.A = 0;\n    this._channelColors.push(tmp);\n    tmp = new CubismTextureColor();\n    tmp.R = 0;\n    tmp.G = 1;\n    tmp.B = 0;\n    tmp.A = 0;\n    this._channelColors.push(tmp);\n    tmp = new CubismTextureColor();\n    tmp.R = 0;\n    tmp.G = 0;\n    tmp.B = 1;\n    tmp.A = 0;\n    this._channelColors.push(tmp);\n    tmp = new CubismTextureColor();\n    tmp.R = 0;\n    tmp.G = 0;\n    tmp.B = 0;\n    tmp.A = 1;\n    this._channelColors.push(tmp);\n  }\n  release() {\n    var _a, _b, _c;\n    const self = this;\n    for (let i = 0; i < this._clippingContextListForMask.length; i++) {\n      if (this._clippingContextListForMask[i]) {\n        (_a = this._clippingContextListForMask[i]) == null ? void 0 : _a.release();\n      }\n    }\n    self._clippingContextListForMask = void 0;\n    self._clippingContextListForDraw = void 0;\n    if (this._maskTexture) {\n      (_b = this.gl) == null ? void 0 : _b.deleteFramebuffer(this._maskTexture.texture);\n      self._maskTexture = void 0;\n    }\n    self._channelColors = void 0;\n    (_c = this.gl) == null ? void 0 : _c.deleteTexture(this._colorBuffer);\n    this._colorBuffer = null;\n  }\n  initialize(model, drawableCount, drawableMasks, drawableMaskCounts) {\n    for (let i = 0; i < drawableCount; i++) {\n      if (drawableMaskCounts[i] <= 0) {\n        this._clippingContextListForDraw.push(null);\n        continue;\n      }\n      let clippingContext = this.findSameClip(drawableMasks[i], drawableMaskCounts[i]);\n      if (clippingContext == null) {\n        clippingContext = new CubismClippingContext(this, drawableMasks[i], drawableMaskCounts[i]);\n        this._clippingContextListForMask.push(clippingContext);\n      }\n      clippingContext.addClippedDrawable(i);\n      this._clippingContextListForDraw.push(clippingContext);\n    }\n  }\n  setupClippingContext(model, renderer) {\n    this._currentFrameNo++;\n    let usingClipCount = 0;\n    for (let clipIndex = 0; clipIndex < this._clippingContextListForMask.length; clipIndex++) {\n      const cc = this._clippingContextListForMask[clipIndex];\n      this.calcClippedDrawTotalBounds(model, cc);\n      if (cc._isUsing) {\n        usingClipCount++;\n      }\n    }\n    if (usingClipCount > 0) {\n      this.gl.viewport(0, 0, this._clippingMaskBufferSize, this._clippingMaskBufferSize);\n      this._maskRenderTexture = this.getMaskRenderTexture();\n      renderer.getMvpMatrix();\n      renderer.preDraw();\n      this.setupLayoutBounds(usingClipCount);\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._maskRenderTexture);\n      this.gl.clearColor(1, 1, 1, 1);\n      this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n      for (let clipIndex = 0; clipIndex < this._clippingContextListForMask.length; clipIndex++) {\n        const clipContext = this._clippingContextListForMask[clipIndex];\n        const allClipedDrawRect = clipContext._allClippedDrawRect;\n        const layoutBoundsOnTex01 = clipContext._layoutBounds;\n        const MARGIN = 0.05;\n        this._tmpBoundsOnModel.setRect(allClipedDrawRect);\n        this._tmpBoundsOnModel.expand(allClipedDrawRect.width * MARGIN, allClipedDrawRect.height * MARGIN);\n        const scaleX = layoutBoundsOnTex01.width / this._tmpBoundsOnModel.width;\n        const scaleY = layoutBoundsOnTex01.height / this._tmpBoundsOnModel.height;\n        {\n          this._tmpMatrix.loadIdentity();\n          {\n            this._tmpMatrix.translateRelative(-1, -1);\n            this._tmpMatrix.scaleRelative(2, 2);\n          }\n          {\n            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\n            this._tmpMatrix.scaleRelative(scaleX, scaleY);\n            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\n          }\n          this._tmpMatrixForMask.setMatrix(this._tmpMatrix.getArray());\n        }\n        {\n          this._tmpMatrix.loadIdentity();\n          {\n            this._tmpMatrix.translateRelative(layoutBoundsOnTex01.x, layoutBoundsOnTex01.y);\n            this._tmpMatrix.scaleRelative(scaleX, scaleY);\n            this._tmpMatrix.translateRelative(-this._tmpBoundsOnModel.x, -this._tmpBoundsOnModel.y);\n          }\n          this._tmpMatrixForDraw.setMatrix(this._tmpMatrix.getArray());\n        }\n        clipContext._matrixForMask.setMatrix(this._tmpMatrixForMask.getArray());\n        clipContext._matrixForDraw.setMatrix(this._tmpMatrixForDraw.getArray());\n        const clipDrawCount = clipContext._clippingIdCount;\n        for (let i = 0; i < clipDrawCount; i++) {\n          const clipDrawIndex = clipContext._clippingIdList[i];\n          if (!model.getDrawableDynamicFlagVertexPositionsDidChange(clipDrawIndex)) {\n            continue;\n          }\n          renderer.setIsCulling(model.getDrawableCulling(clipDrawIndex) != false);\n          renderer.setClippingContextBufferForMask(clipContext);\n          renderer.drawMesh(model.getDrawableTextureIndices(clipDrawIndex), model.getDrawableVertexIndexCount(clipDrawIndex), model.getDrawableVertexCount(clipDrawIndex), model.getDrawableVertexIndices(clipDrawIndex), model.getDrawableVertices(clipDrawIndex), model.getDrawableVertexUvs(clipDrawIndex), model.getDrawableOpacity(clipDrawIndex), CubismBlendMode.CubismBlendMode_Normal, false);\n        }\n      }\n      this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, s_fbo);\n      renderer.setClippingContextBufferForMask(null);\n      this.gl.viewport(s_viewport[0], s_viewport[1], s_viewport[2], s_viewport[3]);\n    }\n  }\n  findSameClip(drawableMasks, drawableMaskCounts) {\n    for (let i = 0; i < this._clippingContextListForMask.length; i++) {\n      const clippingContext = this._clippingContextListForMask[i];\n      const count = clippingContext._clippingIdCount;\n      if (count != drawableMaskCounts) {\n        continue;\n      }\n      let sameCount = 0;\n      for (let j = 0; j < count; j++) {\n        const clipId = clippingContext._clippingIdList[j];\n        for (let k = 0; k < count; k++) {\n          if (drawableMasks[k] == clipId) {\n            sameCount++;\n            break;\n          }\n        }\n      }\n      if (sameCount == count) {\n        return clippingContext;\n      }\n    }\n    return null;\n  }\n  setupLayoutBounds(usingClipCount) {\n    let div = usingClipCount / ColorChannelCount;\n    let mod = usingClipCount % ColorChannelCount;\n    div = ~~div;\n    mod = ~~mod;\n    let curClipIndex = 0;\n    for (let channelNo = 0; channelNo < ColorChannelCount; channelNo++) {\n      const layoutCount = div + (channelNo < mod ? 1 : 0);\n      if (layoutCount == 0)\n        ;\n      else if (layoutCount == 1) {\n        const clipContext = this._clippingContextListForMask[curClipIndex++];\n        clipContext._layoutChannelNo = channelNo;\n        clipContext._layoutBounds.x = 0;\n        clipContext._layoutBounds.y = 0;\n        clipContext._layoutBounds.width = 1;\n        clipContext._layoutBounds.height = 1;\n      } else if (layoutCount == 2) {\n        for (let i = 0; i < layoutCount; i++) {\n          let xpos = i % 2;\n          xpos = ~~xpos;\n          const cc = this._clippingContextListForMask[curClipIndex++];\n          cc._layoutChannelNo = channelNo;\n          cc._layoutBounds.x = xpos * 0.5;\n          cc._layoutBounds.y = 0;\n          cc._layoutBounds.width = 0.5;\n          cc._layoutBounds.height = 1;\n        }\n      } else if (layoutCount <= 4) {\n        for (let i = 0; i < layoutCount; i++) {\n          let xpos = i % 2;\n          let ypos = i / 2;\n          xpos = ~~xpos;\n          ypos = ~~ypos;\n          const cc = this._clippingContextListForMask[curClipIndex++];\n          cc._layoutChannelNo = channelNo;\n          cc._layoutBounds.x = xpos * 0.5;\n          cc._layoutBounds.y = ypos * 0.5;\n          cc._layoutBounds.width = 0.5;\n          cc._layoutBounds.height = 0.5;\n        }\n      } else if (layoutCount <= 9) {\n        for (let i = 0; i < layoutCount; i++) {\n          let xpos = i % 3;\n          let ypos = i / 3;\n          xpos = ~~xpos;\n          ypos = ~~ypos;\n          const cc = this._clippingContextListForMask[curClipIndex++];\n          cc._layoutChannelNo = channelNo;\n          cc._layoutBounds.x = xpos / 3;\n          cc._layoutBounds.y = ypos / 3;\n          cc._layoutBounds.width = 1 / 3;\n          cc._layoutBounds.height = 1 / 3;\n        }\n      } else if (CubismConfig.supportMoreMaskDivisions && layoutCount <= 16) {\n        for (let i = 0; i < layoutCount; i++) {\n          let xpos = i % 4;\n          let ypos = i / 4;\n          xpos = ~~xpos;\n          ypos = ~~ypos;\n          const cc = this._clippingContextListForMask[curClipIndex++];\n          cc._layoutChannelNo = channelNo;\n          cc._layoutBounds.x = xpos / 4;\n          cc._layoutBounds.y = ypos / 4;\n          cc._layoutBounds.width = 1 / 4;\n          cc._layoutBounds.height = 1 / 4;\n        }\n      } else {\n        CubismLogError(\"not supported mask count : {0}\", layoutCount);\n      }\n    }\n  }\n  getColorBuffer() {\n    return this._colorBuffer;\n  }\n  getClippingContextListForDraw() {\n    return this._clippingContextListForDraw;\n  }\n  setClippingMaskBufferSize(size) {\n    this._clippingMaskBufferSize = size;\n  }\n  getClippingMaskBufferSize() {\n    return this._clippingMaskBufferSize;\n  }\n}\nclass CubismRenderTextureResource {\n  constructor(frameNo, texture) {\n    this.frameNo = frameNo;\n    this.texture = texture;\n  }\n}\nclass CubismClippingContext {\n  constructor(manager, clippingDrawableIndices, clipCount) {\n    this._isUsing = false;\n    this._owner = manager;\n    this._clippingIdList = clippingDrawableIndices;\n    this._clippingIdCount = clipCount;\n    this._allClippedDrawRect = new csmRect();\n    this._layoutBounds = new csmRect();\n    this._clippedDrawableIndexList = [];\n    this._matrixForMask = new CubismMatrix44();\n    this._matrixForDraw = new CubismMatrix44();\n  }\n  release() {\n    const self = this;\n    self._layoutBounds = void 0;\n    self._allClippedDrawRect = void 0;\n    self._clippedDrawableIndexList = void 0;\n  }\n  addClippedDrawable(drawableIndex) {\n    this._clippedDrawableIndexList.push(drawableIndex);\n  }\n  getClippingManager() {\n    return this._owner;\n  }\n  setGl(gl) {\n    this._owner.setGL(gl);\n  }\n}\nclass CubismShader_WebGL {\n  static getInstance() {\n    if (s_instance == null) {\n      s_instance = new CubismShader_WebGL();\n      return s_instance;\n    }\n    return s_instance;\n  }\n  static deleteInstance() {\n    if (s_instance) {\n      s_instance.release();\n      s_instance = void 0;\n    }\n  }\n  constructor() {\n    this._shaderSets = [];\n  }\n  release() {\n    this.releaseShaderProgram();\n  }\n  setupShaderProgram(renderer, textureId, vertexCount, vertexArray, indexArray, uvArray, bufferData, opacity, colorBlendMode, baseColor, isPremultipliedAlpha, matrix4x4, invertedMask) {\n    if (!isPremultipliedAlpha) {\n      CubismLogError(\"NoPremultipliedAlpha is not allowed\");\n    }\n    if (this._shaderSets.length == 0) {\n      this.generateShaders();\n    }\n    let SRC_COLOR;\n    let DST_COLOR;\n    let SRC_ALPHA;\n    let DST_ALPHA;\n    const clippingContextBufferForMask = renderer.getClippingContextBufferForMask();\n    if (clippingContextBufferForMask != null) {\n      const shaderSet = this._shaderSets[ShaderNames.ShaderNames_SetupMask];\n      this.gl.useProgram(shaderSet.shaderProgram);\n      this.gl.activeTexture(this.gl.TEXTURE0);\n      this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n      this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n      if (bufferData.vertex == null) {\n        bufferData.vertex = this.gl.createBuffer();\n      }\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\n      this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n      this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\n      if (bufferData.uv == null) {\n        bufferData.uv = this.gl.createBuffer();\n      }\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n      this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n      this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\n      const channelNo = clippingContextBufferForMask._layoutChannelNo;\n      const colorChannel = clippingContextBufferForMask.getClippingManager().getChannelFlagAsColor(channelNo);\n      this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\n      this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, clippingContextBufferForMask._matrixForMask.getArray());\n      const rect = clippingContextBufferForMask._layoutBounds;\n      this.gl.uniform4f(shaderSet.uniformBaseColorLocation, rect.x * 2 - 1, rect.y * 2 - 1, rect.getRight() * 2 - 1, rect.getBottom() * 2 - 1);\n      SRC_COLOR = this.gl.ZERO;\n      DST_COLOR = this.gl.ONE_MINUS_SRC_COLOR;\n      SRC_ALPHA = this.gl.ZERO;\n      DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\n    } else {\n      const clippingContextBufferForDraw = renderer.getClippingContextBufferForDraw();\n      const masked = clippingContextBufferForDraw != null;\n      const offset = masked ? invertedMask ? 2 : 1 : 0;\n      let shaderSet;\n      switch (colorBlendMode) {\n        case CubismBlendMode.CubismBlendMode_Normal:\n        default:\n          shaderSet = this._shaderSets[ShaderNames.ShaderNames_NormalPremultipliedAlpha + offset];\n          SRC_COLOR = this.gl.ONE;\n          DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\n          SRC_ALPHA = this.gl.ONE;\n          DST_ALPHA = this.gl.ONE_MINUS_SRC_ALPHA;\n          break;\n        case CubismBlendMode.CubismBlendMode_Additive:\n          shaderSet = this._shaderSets[ShaderNames.ShaderNames_AddPremultipliedAlpha + offset];\n          SRC_COLOR = this.gl.ONE;\n          DST_COLOR = this.gl.ONE;\n          SRC_ALPHA = this.gl.ZERO;\n          DST_ALPHA = this.gl.ONE;\n          break;\n        case CubismBlendMode.CubismBlendMode_Multiplicative:\n          shaderSet = this._shaderSets[ShaderNames.ShaderNames_MultPremultipliedAlpha + offset];\n          SRC_COLOR = this.gl.DST_COLOR;\n          DST_COLOR = this.gl.ONE_MINUS_SRC_ALPHA;\n          SRC_ALPHA = this.gl.ZERO;\n          DST_ALPHA = this.gl.ONE;\n          break;\n      }\n      this.gl.useProgram(shaderSet.shaderProgram);\n      if (bufferData.vertex == null) {\n        bufferData.vertex = this.gl.createBuffer();\n      }\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.vertex);\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, vertexArray, this.gl.DYNAMIC_DRAW);\n      this.gl.enableVertexAttribArray(shaderSet.attributePositionLocation);\n      this.gl.vertexAttribPointer(shaderSet.attributePositionLocation, 2, this.gl.FLOAT, false, 0, 0);\n      if (bufferData.uv == null) {\n        bufferData.uv = this.gl.createBuffer();\n      }\n      this.gl.bindBuffer(this.gl.ARRAY_BUFFER, bufferData.uv);\n      this.gl.bufferData(this.gl.ARRAY_BUFFER, uvArray, this.gl.DYNAMIC_DRAW);\n      this.gl.enableVertexAttribArray(shaderSet.attributeTexCoordLocation);\n      this.gl.vertexAttribPointer(shaderSet.attributeTexCoordLocation, 2, this.gl.FLOAT, false, 0, 0);\n      if (clippingContextBufferForDraw != null) {\n        this.gl.activeTexture(this.gl.TEXTURE1);\n        const tex = clippingContextBufferForDraw.getClippingManager().getColorBuffer();\n        this.gl.bindTexture(this.gl.TEXTURE_2D, tex);\n        this.gl.uniform1i(shaderSet.samplerTexture1Location, 1);\n        this.gl.uniformMatrix4fv(shaderSet.uniformClipMatrixLocation, false, clippingContextBufferForDraw._matrixForDraw.getArray());\n        const channelNo = clippingContextBufferForDraw._layoutChannelNo;\n        const colorChannel = clippingContextBufferForDraw.getClippingManager().getChannelFlagAsColor(channelNo);\n        this.gl.uniform4f(shaderSet.uniformChannelFlagLocation, colorChannel.R, colorChannel.G, colorChannel.B, colorChannel.A);\n      }\n      this.gl.activeTexture(this.gl.TEXTURE0);\n      this.gl.bindTexture(this.gl.TEXTURE_2D, textureId);\n      this.gl.uniform1i(shaderSet.samplerTexture0Location, 0);\n      this.gl.uniformMatrix4fv(shaderSet.uniformMatrixLocation, false, matrix4x4.getArray());\n      this.gl.uniform4f(shaderSet.uniformBaseColorLocation, baseColor.R, baseColor.G, baseColor.B, baseColor.A);\n    }\n    if (bufferData.index == null) {\n      bufferData.index = this.gl.createBuffer();\n    }\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, bufferData.index);\n    this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, indexArray, this.gl.DYNAMIC_DRAW);\n    this.gl.blendFuncSeparate(SRC_COLOR, DST_COLOR, SRC_ALPHA, DST_ALPHA);\n  }\n  releaseShaderProgram() {\n    for (let i = 0; i < this._shaderSets.length; i++) {\n      this.gl.deleteProgram(this._shaderSets[i].shaderProgram);\n      this._shaderSets[i].shaderProgram = 0;\n    }\n    this._shaderSets = [];\n  }\n  generateShaders() {\n    for (let i = 0; i < shaderCount; i++) {\n      this._shaderSets.push({});\n    }\n    this._shaderSets[0].shaderProgram = this.loadShaderProgram(vertexShaderSrcSetupMask, fragmentShaderSrcsetupMask);\n    this._shaderSets[1].shaderProgram = this.loadShaderProgram(vertexShaderSrc, fragmentShaderSrcPremultipliedAlpha);\n    this._shaderSets[2].shaderProgram = this.loadShaderProgram(vertexShaderSrcMasked, fragmentShaderSrcMaskPremultipliedAlpha);\n    this._shaderSets[3].shaderProgram = this.loadShaderProgram(vertexShaderSrcMasked, fragmentShaderSrcMaskInvertedPremultipliedAlpha);\n    this._shaderSets[4].shaderProgram = this._shaderSets[1].shaderProgram;\n    this._shaderSets[5].shaderProgram = this._shaderSets[2].shaderProgram;\n    this._shaderSets[6].shaderProgram = this._shaderSets[3].shaderProgram;\n    this._shaderSets[7].shaderProgram = this._shaderSets[1].shaderProgram;\n    this._shaderSets[8].shaderProgram = this._shaderSets[2].shaderProgram;\n    this._shaderSets[9].shaderProgram = this._shaderSets[3].shaderProgram;\n    this._shaderSets[0].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[0].shaderProgram, \"a_position\");\n    this._shaderSets[0].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[0].shaderProgram, \"a_texCoord\");\n    this._shaderSets[0].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[0].shaderProgram, \"s_texture0\");\n    this._shaderSets[0].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[0].shaderProgram, \"u_clipMatrix\");\n    this._shaderSets[0].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[0].shaderProgram, \"u_channelFlag\");\n    this._shaderSets[0].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[0].shaderProgram, \"u_baseColor\");\n    this._shaderSets[1].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[1].shaderProgram, \"a_position\");\n    this._shaderSets[1].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[1].shaderProgram, \"a_texCoord\");\n    this._shaderSets[1].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[1].shaderProgram, \"s_texture0\");\n    this._shaderSets[1].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[1].shaderProgram, \"u_matrix\");\n    this._shaderSets[1].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[1].shaderProgram, \"u_baseColor\");\n    this._shaderSets[2].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[2].shaderProgram, \"a_position\");\n    this._shaderSets[2].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[2].shaderProgram, \"a_texCoord\");\n    this._shaderSets[2].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"s_texture0\");\n    this._shaderSets[2].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"s_texture1\");\n    this._shaderSets[2].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"u_matrix\");\n    this._shaderSets[2].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"u_clipMatrix\");\n    this._shaderSets[2].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"u_channelFlag\");\n    this._shaderSets[2].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[2].shaderProgram, \"u_baseColor\");\n    this._shaderSets[3].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[3].shaderProgram, \"a_position\");\n    this._shaderSets[3].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[3].shaderProgram, \"a_texCoord\");\n    this._shaderSets[3].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"s_texture0\");\n    this._shaderSets[3].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"s_texture1\");\n    this._shaderSets[3].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"u_matrix\");\n    this._shaderSets[3].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"u_clipMatrix\");\n    this._shaderSets[3].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"u_channelFlag\");\n    this._shaderSets[3].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[3].shaderProgram, \"u_baseColor\");\n    this._shaderSets[4].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[4].shaderProgram, \"a_position\");\n    this._shaderSets[4].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[4].shaderProgram, \"a_texCoord\");\n    this._shaderSets[4].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[4].shaderProgram, \"s_texture0\");\n    this._shaderSets[4].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[4].shaderProgram, \"u_matrix\");\n    this._shaderSets[4].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[4].shaderProgram, \"u_baseColor\");\n    this._shaderSets[5].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[5].shaderProgram, \"a_position\");\n    this._shaderSets[5].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[5].shaderProgram, \"a_texCoord\");\n    this._shaderSets[5].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"s_texture0\");\n    this._shaderSets[5].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"s_texture1\");\n    this._shaderSets[5].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"u_matrix\");\n    this._shaderSets[5].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"u_clipMatrix\");\n    this._shaderSets[5].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"u_channelFlag\");\n    this._shaderSets[5].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[5].shaderProgram, \"u_baseColor\");\n    this._shaderSets[6].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[6].shaderProgram, \"a_position\");\n    this._shaderSets[6].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[6].shaderProgram, \"a_texCoord\");\n    this._shaderSets[6].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"s_texture0\");\n    this._shaderSets[6].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"s_texture1\");\n    this._shaderSets[6].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"u_matrix\");\n    this._shaderSets[6].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"u_clipMatrix\");\n    this._shaderSets[6].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"u_channelFlag\");\n    this._shaderSets[6].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[6].shaderProgram, \"u_baseColor\");\n    this._shaderSets[7].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[7].shaderProgram, \"a_position\");\n    this._shaderSets[7].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[7].shaderProgram, \"a_texCoord\");\n    this._shaderSets[7].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[7].shaderProgram, \"s_texture0\");\n    this._shaderSets[7].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[7].shaderProgram, \"u_matrix\");\n    this._shaderSets[7].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[7].shaderProgram, \"u_baseColor\");\n    this._shaderSets[8].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[8].shaderProgram, \"a_position\");\n    this._shaderSets[8].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[8].shaderProgram, \"a_texCoord\");\n    this._shaderSets[8].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"s_texture0\");\n    this._shaderSets[8].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"s_texture1\");\n    this._shaderSets[8].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"u_matrix\");\n    this._shaderSets[8].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"u_clipMatrix\");\n    this._shaderSets[8].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"u_channelFlag\");\n    this._shaderSets[8].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[8].shaderProgram, \"u_baseColor\");\n    this._shaderSets[9].attributePositionLocation = this.gl.getAttribLocation(this._shaderSets[9].shaderProgram, \"a_position\");\n    this._shaderSets[9].attributeTexCoordLocation = this.gl.getAttribLocation(this._shaderSets[9].shaderProgram, \"a_texCoord\");\n    this._shaderSets[9].samplerTexture0Location = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"s_texture0\");\n    this._shaderSets[9].samplerTexture1Location = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"s_texture1\");\n    this._shaderSets[9].uniformMatrixLocation = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"u_matrix\");\n    this._shaderSets[9].uniformClipMatrixLocation = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"u_clipMatrix\");\n    this._shaderSets[9].uniformChannelFlagLocation = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"u_channelFlag\");\n    this._shaderSets[9].uniformBaseColorLocation = this.gl.getUniformLocation(this._shaderSets[9].shaderProgram, \"u_baseColor\");\n  }\n  loadShaderProgram(vertexShaderSource, fragmentShaderSource) {\n    let shaderProgram = this.gl.createProgram();\n    let vertShader = this.compileShaderSource(this.gl.VERTEX_SHADER, vertexShaderSource);\n    if (!vertShader) {\n      CubismLogError(\"Vertex shader compile error!\");\n      return 0;\n    }\n    let fragShader = this.compileShaderSource(this.gl.FRAGMENT_SHADER, fragmentShaderSource);\n    if (!fragShader) {\n      CubismLogError(\"Vertex shader compile error!\");\n      return 0;\n    }\n    this.gl.attachShader(shaderProgram, vertShader);\n    this.gl.attachShader(shaderProgram, fragShader);\n    this.gl.linkProgram(shaderProgram);\n    const linkStatus = this.gl.getProgramParameter(shaderProgram, this.gl.LINK_STATUS);\n    if (!linkStatus) {\n      CubismLogError(\"Failed to link program: {0}\", shaderProgram);\n      this.gl.deleteShader(vertShader);\n      this.gl.deleteShader(fragShader);\n      if (shaderProgram) {\n        this.gl.deleteProgram(shaderProgram);\n      }\n      return 0;\n    }\n    this.gl.deleteShader(vertShader);\n    this.gl.deleteShader(fragShader);\n    return shaderProgram;\n  }\n  compileShaderSource(shaderType, shaderSource) {\n    const source = shaderSource;\n    const shader = this.gl.createShader(shaderType);\n    this.gl.shaderSource(shader, source);\n    this.gl.compileShader(shader);\n    if (!shader) {\n      const log = this.gl.getShaderInfoLog(shader);\n      CubismLogError(\"Shader compile log: {0} \", log);\n    }\n    const status = this.gl.getShaderParameter(shader, this.gl.COMPILE_STATUS);\n    if (!status) {\n      this.gl.deleteShader(shader);\n      return null;\n    }\n    return shader;\n  }\n  setGl(gl) {\n    this.gl = gl;\n  }\n}\nvar ShaderNames = /* @__PURE__ */ ((ShaderNames2) => {\n  ShaderNames2[ShaderNames2[\"ShaderNames_SetupMask\"] = 0] = \"ShaderNames_SetupMask\";\n  ShaderNames2[ShaderNames2[\"ShaderNames_NormalPremultipliedAlpha\"] = 1] = \"ShaderNames_NormalPremultipliedAlpha\";\n  ShaderNames2[ShaderNames2[\"ShaderNames_NormalMaskedPremultipliedAlpha\"] = 2] = \"ShaderNames_NormalMaskedPremultipliedAlpha\";\n  ShaderNames2[ShaderNames2[\"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\"] = 3] = \"ShaderNames_NomralMaskedInvertedPremultipliedAlpha\";\n  ShaderNames2[ShaderNames2[\"ShaderNames_AddPremultipliedAlpha\"] = 4] = \"ShaderNames_AddPremultipliedAlpha\";\n  ShaderNames2[ShaderNames2[\"ShaderNames_AddMaskedPremultipliedAlpha\"] = 5] = \"ShaderNames_AddMaskedPremultipliedAlpha\";\n  ShaderNames2[ShaderNames2[\"ShaderNames_AddMaskedPremultipliedAlphaInverted\"] = 6] = \"ShaderNames_AddMaskedPremultipliedAlphaInverted\";\n  ShaderNames2[ShaderNames2[\"ShaderNames_MultPremultipliedAlpha\"] = 7] = \"ShaderNames_MultPremultipliedAlpha\";\n  ShaderNames2[ShaderNames2[\"ShaderNames_MultMaskedPremultipliedAlpha\"] = 8] = \"ShaderNames_MultMaskedPremultipliedAlpha\";\n  ShaderNames2[ShaderNames2[\"ShaderNames_MultMaskedPremultipliedAlphaInverted\"] = 9] = \"ShaderNames_MultMaskedPremultipliedAlphaInverted\";\n  return ShaderNames2;\n})(ShaderNames || {});\nconst vertexShaderSrcSetupMask = \"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_myPos;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_clipMatrix * a_position;   v_myPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}\";\nconst fragmentShaderSrcsetupMask = \"precision mediump float;varying vec2       v_texCoord;varying vec4       v_myPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;void main(){   float isInside =        step(u_baseColor.x, v_myPos.x/v_myPos.w)       * step(u_baseColor.y, v_myPos.y/v_myPos.w)       * step(v_myPos.x/v_myPos.w, u_baseColor.z)       * step(v_myPos.y/v_myPos.w, u_baseColor.w);   gl_FragColor = u_channelFlag * texture2D(s_texture0, v_texCoord).a * isInside;}\";\nconst vertexShaderSrc = \"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;uniform mat4       u_matrix;void main(){   gl_Position = u_matrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}\";\nconst vertexShaderSrcMasked = \"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform mat4       u_matrix;uniform mat4       u_clipMatrix;void main(){   gl_Position = u_matrix * a_position;   v_clipPos = u_clipMatrix * a_position;   v_texCoord = a_texCoord;   v_texCoord.y = 1.0 - v_texCoord.y;}\";\nconst fragmentShaderSrcPremultipliedAlpha = \"precision mediump float;varying vec2       v_texCoord;uniform vec4       u_baseColor;uniform sampler2D  s_texture0;void main(){   gl_FragColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;}\";\nconst fragmentShaderSrcMaskPremultipliedAlpha = \"precision mediump float;varying vec2       v_texCoord;varying vec4       v_clipPos;uniform vec4       u_baseColor;uniform vec4       u_channelFlag;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;void main(){   vec4 col_formask = texture2D(s_texture0 , v_texCoord) * u_baseColor;   vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;   float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;   col_formask = col_formask * maskVal;   gl_FragColor = col_formask;}\";\nconst fragmentShaderSrcMaskInvertedPremultipliedAlpha = \"precision mediump float;varying vec2 v_texCoord;varying vec4 v_clipPos;uniform sampler2D s_texture0;uniform sampler2D s_texture1;uniform vec4 u_channelFlag;uniform vec4 u_baseColor;void main(){vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;vec4 clipMask = (1.0 - texture2D(s_texture1, v_clipPos.xy / v_clipPos.w)) * u_channelFlag;float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;col_formask = col_formask * (1.0 - maskVal);gl_FragColor = col_formask;}\";\nclass CubismRenderer_WebGL extends CubismRenderer {\n  constructor() {\n    super();\n    this._clippingContextBufferForMask = null;\n    this._clippingContextBufferForDraw = null;\n    this._clippingManager = new CubismClippingManager_WebGL();\n    this.firstDraw = true;\n    this._textures = {};\n    this._sortedDrawableIndexList = [];\n    this._bufferData = {\n      vertex: null,\n      uv: null,\n      index: null\n    };\n  }\n  initialize(model) {\n    if (model.isUsingMasking()) {\n      this._clippingManager = new CubismClippingManager_WebGL();\n      this._clippingManager.initialize(model, model.getDrawableCount(), model.getDrawableMasks(), model.getDrawableMaskCounts());\n    }\n    for (let i = model.getDrawableCount() - 1; i >= 0; i--) {\n      this._sortedDrawableIndexList[i] = 0;\n    }\n    super.initialize(model);\n  }\n  bindTexture(modelTextureNo, glTexture) {\n    this._textures[modelTextureNo] = glTexture;\n  }\n  getBindedTextures() {\n    return this._textures;\n  }\n  setClippingMaskBufferSize(size) {\n    this._clippingManager.release();\n    this._clippingManager = new CubismClippingManager_WebGL();\n    this._clippingManager.setClippingMaskBufferSize(size);\n    this._clippingManager.initialize(this.getModel(), this.getModel().getDrawableCount(), this.getModel().getDrawableMasks(), this.getModel().getDrawableMaskCounts());\n  }\n  getClippingMaskBufferSize() {\n    return this._clippingManager.getClippingMaskBufferSize();\n  }\n  release() {\n    var _a, _b, _c;\n    const self = this;\n    this._clippingManager.release();\n    self._clippingManager = void 0;\n    (_a = this.gl) == null ? void 0 : _a.deleteBuffer(this._bufferData.vertex);\n    this._bufferData.vertex = null;\n    (_b = this.gl) == null ? void 0 : _b.deleteBuffer(this._bufferData.uv);\n    this._bufferData.uv = null;\n    (_c = this.gl) == null ? void 0 : _c.deleteBuffer(this._bufferData.index);\n    this._bufferData.index = null;\n    self._bufferData = void 0;\n    self._textures = void 0;\n  }\n  doDrawModel() {\n    this.preDraw();\n    if (this._clippingManager != null) {\n      this._clippingManager.setupClippingContext(this.getModel(), this);\n    }\n    const drawableCount = this.getModel().getDrawableCount();\n    const renderOrder = this.getModel().getDrawableRenderOrders();\n    for (let i = 0; i < drawableCount; ++i) {\n      const order = renderOrder[i];\n      this._sortedDrawableIndexList[order] = i;\n    }\n    for (let i = 0; i < drawableCount; ++i) {\n      const drawableIndex = this._sortedDrawableIndexList[i];\n      if (!this.getModel().getDrawableDynamicFlagIsVisible(drawableIndex)) {\n        continue;\n      }\n      this.setClippingContextBufferForDraw(this._clippingManager != null ? this._clippingManager.getClippingContextListForDraw()[drawableIndex] : null);\n      this.setIsCulling(this.getModel().getDrawableCulling(drawableIndex));\n      this.drawMesh(this.getModel().getDrawableTextureIndices(drawableIndex), this.getModel().getDrawableVertexIndexCount(drawableIndex), this.getModel().getDrawableVertexCount(drawableIndex), this.getModel().getDrawableVertexIndices(drawableIndex), this.getModel().getDrawableVertices(drawableIndex), this.getModel().getDrawableVertexUvs(drawableIndex), this.getModel().getDrawableOpacity(drawableIndex), this.getModel().getDrawableBlendMode(drawableIndex), this.getModel().getDrawableInvertedMaskBit(drawableIndex));\n    }\n  }\n  drawMesh(textureNo, indexCount, vertexCount, indexArray, vertexArray, uvArray, opacity, colorBlendMode, invertedMask) {\n    if (this.isCulling()) {\n      this.gl.enable(this.gl.CULL_FACE);\n    } else {\n      this.gl.disable(this.gl.CULL_FACE);\n    }\n    this.gl.frontFace(this.gl.CCW);\n    const modelColorRGBA = this.getModelColor();\n    if (this.getClippingContextBufferForMask() == null) {\n      modelColorRGBA.A *= opacity;\n      if (this.isPremultipliedAlpha()) {\n        modelColorRGBA.R *= modelColorRGBA.A;\n        modelColorRGBA.G *= modelColorRGBA.A;\n        modelColorRGBA.B *= modelColorRGBA.A;\n      }\n    }\n    let drawtexture = null;\n    if (this._textures[textureNo] != null) {\n      drawtexture = this._textures[textureNo];\n    }\n    CubismShader_WebGL.getInstance().setupShaderProgram(this, drawtexture, vertexCount, vertexArray, indexArray, uvArray, this._bufferData, opacity, colorBlendMode, modelColorRGBA, this.isPremultipliedAlpha(), this.getMvpMatrix(), invertedMask);\n    this.gl.drawElements(this.gl.TRIANGLES, indexCount, this.gl.UNSIGNED_SHORT, 0);\n    this.gl.useProgram(null);\n    this.setClippingContextBufferForDraw(null);\n    this.setClippingContextBufferForMask(null);\n  }\n  static doStaticRelease() {\n    CubismShader_WebGL.deleteInstance();\n  }\n  setRenderState(fbo, viewport) {\n    s_fbo = fbo;\n    s_viewport = viewport;\n  }\n  preDraw() {\n    if (this.firstDraw) {\n      this.firstDraw = false;\n      this._anisortopy = this.gl.getExtension(\"EXT_texture_filter_anisotropic\") || this.gl.getExtension(\"WEBKIT_EXT_texture_filter_anisotropic\") || this.gl.getExtension(\"MOZ_EXT_texture_filter_anisotropic\");\n    }\n    this.gl.disable(this.gl.SCISSOR_TEST);\n    this.gl.disable(this.gl.STENCIL_TEST);\n    this.gl.disable(this.gl.DEPTH_TEST);\n    this.gl.frontFace(this.gl.CW);\n    this.gl.enable(this.gl.BLEND);\n    this.gl.colorMask(true, true, true, true);\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, null);\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, null);\n  }\n  setClippingContextBufferForMask(clip) {\n    this._clippingContextBufferForMask = clip;\n  }\n  getClippingContextBufferForMask() {\n    return this._clippingContextBufferForMask;\n  }\n  setClippingContextBufferForDraw(clip) {\n    this._clippingContextBufferForDraw = clip;\n  }\n  getClippingContextBufferForDraw() {\n    return this._clippingContextBufferForDraw;\n  }\n  startUp(gl) {\n    this.gl = gl;\n    this._clippingManager.setGL(gl);\n    CubismShader_WebGL.getInstance().setGl(gl);\n  }\n}\nCubismRenderer.staticRelease = () => {\n  CubismRenderer_WebGL.doStaticRelease();\n};\nconst tempMatrix = new CubismMatrix44();\nclass Cubism4InternalModel extends InternalModel {\n  constructor(coreModel, settings, options) {\n    super();\n    this.lipSync = true;\n    this.breath = CubismBreath.create();\n    this.renderer = new CubismRenderer_WebGL();\n    this.idParamAngleX = ParamAngleX;\n    this.idParamAngleY = ParamAngleY;\n    this.idParamAngleZ = ParamAngleZ;\n    this.idParamEyeBallX = ParamEyeBallX;\n    this.idParamEyeBallY = ParamEyeBallY;\n    this.idParamBodyAngleX = ParamBodyAngleX;\n    this.idParamBreath = ParamBreath;\n    this.pixelsPerUnit = 1;\n    this.centeringTransform = new Matrix();\n    this.coreModel = coreModel;\n    this.settings = settings;\n    this.motionManager = new Cubism4MotionManager(settings, options);\n    this.init();\n  }\n  init() {\n    var _a;\n    super.init();\n    if (((_a = this.settings.getEyeBlinkParameters()) == null ? void 0 : _a.length) > 0) {\n      this.eyeBlink = CubismEyeBlink.create(this.settings);\n    }\n    this.breath.setParameters([\n      new BreathParameterData(this.idParamAngleX, 0, 15, 6.5345, 0.5),\n      new BreathParameterData(this.idParamAngleY, 0, 8, 3.5345, 0.5),\n      new BreathParameterData(this.idParamAngleZ, 0, 10, 5.5345, 0.5),\n      new BreathParameterData(this.idParamBodyAngleX, 0, 4, 15.5345, 0.5),\n      new BreathParameterData(this.idParamBreath, 0, 0.5, 3.2345, 0.5)\n    ]);\n    this.renderer.initialize(this.coreModel);\n    this.renderer.setIsPremultipliedAlpha(true);\n  }\n  getSize() {\n    return [this.coreModel.getModel().canvasinfo.CanvasWidth, this.coreModel.getModel().canvasinfo.CanvasHeight];\n  }\n  getLayout() {\n    const layout = {};\n    if (this.settings.layout) {\n      for (const key of Object.keys(this.settings.layout)) {\n        const commonKey = key.charAt(0).toLowerCase() + key.slice(1);\n        layout[commonKey] = this.settings.layout[key];\n      }\n    }\n    return layout;\n  }\n  setupLayout() {\n    super.setupLayout();\n    this.pixelsPerUnit = this.coreModel.getModel().canvasinfo.PixelsPerUnit;\n    this.centeringTransform.scale(this.pixelsPerUnit, this.pixelsPerUnit).translate(this.originalWidth / 2, this.originalHeight / 2);\n  }\n  updateWebGLContext(gl, glContextID) {\n    this.renderer.firstDraw = true;\n    this.renderer._bufferData = {\n      vertex: null,\n      uv: null,\n      index: null\n    };\n    this.renderer.startUp(gl);\n    this.renderer._clippingManager._currentFrameNo = glContextID;\n    this.renderer._clippingManager._maskTexture = void 0;\n    CubismShader_WebGL.getInstance()._shaderSets = [];\n  }\n  bindTexture(index, texture) {\n    this.renderer.bindTexture(index, texture);\n  }\n  getHitAreaDefs() {\n    var _a, _b;\n    return (_b = (_a = this.settings.hitAreas) == null ? void 0 : _a.map((hitArea) => ({\n      id: hitArea.Id,\n      name: hitArea.Name,\n      index: this.coreModel.getDrawableIndex(hitArea.Id)\n    }))) != null ? _b : [];\n  }\n  getDrawableIDs() {\n    return this.coreModel.getDrawableIds();\n  }\n  getDrawableIndex(id) {\n    return this.coreModel.getDrawableIndex(id);\n  }\n  getDrawableVertices(drawIndex) {\n    if (typeof drawIndex === \"string\") {\n      drawIndex = this.coreModel.getDrawableIndex(drawIndex);\n      if (drawIndex === -1)\n        throw new TypeError(\"Unable to find drawable ID: \" + drawIndex);\n    }\n    const arr = this.coreModel.getDrawableVertices(drawIndex).slice();\n    for (let i = 0; i < arr.length; i += 2) {\n      arr[i] = arr[i] * this.pixelsPerUnit + this.originalWidth / 2;\n      arr[i + 1] = -arr[i + 1] * this.pixelsPerUnit + this.originalHeight / 2;\n    }\n    return arr;\n  }\n  updateTransform(transform) {\n    this.drawingMatrix.copyFrom(this.centeringTransform).prepend(this.localTransform).prepend(transform);\n  }\n  update(dt, now) {\n    var _a, _b, _c, _d;\n    super.update(dt, now);\n    dt /= 1e3;\n    now /= 1e3;\n    const model = this.coreModel;\n    this.emit(\"beforeMotionUpdate\");\n    const motionUpdated = this.motionManager.update(this.coreModel, now);\n    this.emit(\"afterMotionUpdate\");\n    model.saveParameters();\n    (_a = this.motionManager.expressionManager) == null ? void 0 : _a.update(model, now);\n    if (!motionUpdated) {\n      (_b = this.eyeBlink) == null ? void 0 : _b.updateParameters(model, dt);\n    }\n    this.updateFocus();\n    this.updateNaturalMovements(dt * 1e3, now * 1e3);\n    (_c = this.physics) == null ? void 0 : _c.evaluate(model, dt);\n    (_d = this.pose) == null ? void 0 : _d.updateParameters(model, dt);\n    this.emit(\"beforeModelUpdate\");\n    model.update();\n    model.loadParameters();\n  }\n  updateFocus() {\n    this.coreModel.addParameterValueById(this.idParamEyeBallX, this.focusController.x);\n    this.coreModel.addParameterValueById(this.idParamEyeBallY, this.focusController.y);\n    this.coreModel.addParameterValueById(this.idParamAngleX, this.focusController.x * 30);\n    this.coreModel.addParameterValueById(this.idParamAngleY, this.focusController.y * 30);\n    this.coreModel.addParameterValueById(this.idParamAngleZ, this.focusController.x * this.focusController.y * -30);\n    this.coreModel.addParameterValueById(this.idParamBodyAngleX, this.focusController.x * 10);\n  }\n  updateNaturalMovements(dt, now) {\n    var _a;\n    (_a = this.breath) == null ? void 0 : _a.updateParameters(this.coreModel, dt / 1e3);\n  }\n  draw(gl) {\n    const matrix = this.drawingMatrix;\n    const array = tempMatrix.getArray();\n    array[0] = matrix.a;\n    array[1] = matrix.b;\n    array[4] = -matrix.c;\n    array[5] = -matrix.d;\n    array[12] = matrix.tx;\n    array[13] = matrix.ty;\n    this.renderer.setMvpMatrix(tempMatrix);\n    this.renderer.setRenderState(gl.getParameter(gl.FRAMEBUFFER_BINDING), this.viewport);\n    this.renderer.drawModel();\n  }\n  destroy() {\n    super.destroy();\n    this.renderer.release();\n    this.coreModel.release();\n    this.renderer = void 0;\n    this.coreModel = void 0;\n  }\n}\nlet startupPromise;\nlet startupRetries = 20;\nfunction cubism4Ready() {\n  if (CubismFramework.isStarted()) {\n    return Promise.resolve();\n  }\n  startupPromise != null ? startupPromise : startupPromise = new Promise((resolve, reject) => {\n    function startUpWithRetry() {\n      try {\n        startUpCubism4();\n        resolve();\n      } catch (e) {\n        startupRetries--;\n        if (startupRetries < 0) {\n          const err = new Error(\"Failed to start up Cubism 4 framework.\");\n          err.cause = e;\n          reject(err);\n          return;\n        }\n        logger.log(\"Cubism4\", \"Startup failed, retrying 10ms later...\");\n        setTimeout(startUpWithRetry, 10);\n      }\n    }\n    startUpWithRetry();\n  });\n  return startupPromise;\n}\nfunction startUpCubism4(options) {\n  options = Object.assign({\n    logFunction: console.log,\n    loggingLevel: LogLevel.LogLevel_Verbose\n  }, options);\n  CubismFramework.startUp(options);\n  CubismFramework.initialize();\n}\nconst Epsilon = 1e-3;\nconst DefaultFadeInSeconds = 0.5;\nclass CubismPose {\n  static create(pose3json) {\n    const ret = new CubismPose();\n    if (typeof pose3json.FadeInTime === \"number\") {\n      ret._fadeTimeSeconds = pose3json.FadeInTime;\n      if (ret._fadeTimeSeconds <= 0) {\n        ret._fadeTimeSeconds = DefaultFadeInSeconds;\n      }\n    }\n    const poseListInfo = pose3json.Groups;\n    const poseCount = poseListInfo.length;\n    for (let poseIndex = 0; poseIndex < poseCount; ++poseIndex) {\n      const idListInfo = poseListInfo[poseIndex];\n      const idCount = idListInfo.length;\n      let groupCount = 0;\n      for (let groupIndex = 0; groupIndex < idCount; ++groupIndex) {\n        const partInfo = idListInfo[groupIndex];\n        const partData = new PartData();\n        partData.partId = partInfo.Id;\n        const linkListInfo = partInfo.Link;\n        if (linkListInfo) {\n          const linkCount = linkListInfo.length;\n          for (let linkIndex = 0; linkIndex < linkCount; ++linkIndex) {\n            const linkPart = new PartData();\n            linkPart.partId = linkListInfo[linkIndex];\n            partData.link.push(linkPart);\n          }\n        }\n        ret._partGroups.push(partData);\n        ++groupCount;\n      }\n      ret._partGroupCounts.push(groupCount);\n    }\n    return ret;\n  }\n  updateParameters(model, deltaTimeSeconds) {\n    if (model != this._lastModel) {\n      this.reset(model);\n    }\n    this._lastModel = model;\n    if (deltaTimeSeconds < 0) {\n      deltaTimeSeconds = 0;\n    }\n    let beginIndex = 0;\n    for (let i = 0; i < this._partGroupCounts.length; i++) {\n      const partGroupCount = this._partGroupCounts[i];\n      this.doFade(model, deltaTimeSeconds, beginIndex, partGroupCount);\n      beginIndex += partGroupCount;\n    }\n    this.copyPartOpacities(model);\n  }\n  reset(model) {\n    let beginIndex = 0;\n    for (let i = 0; i < this._partGroupCounts.length; ++i) {\n      const groupCount = this._partGroupCounts[i];\n      for (let j = beginIndex; j < beginIndex + groupCount; ++j) {\n        this._partGroups[j].initialize(model);\n        const partsIndex = this._partGroups[j].partIndex;\n        const paramIndex = this._partGroups[j].parameterIndex;\n        if (partsIndex < 0) {\n          continue;\n        }\n        model.setPartOpacityByIndex(partsIndex, j == beginIndex ? 1 : 0);\n        model.setParameterValueByIndex(paramIndex, j == beginIndex ? 1 : 0);\n        for (let k = 0; k < this._partGroups[j].link.length; ++k) {\n          this._partGroups[j].link[k].initialize(model);\n        }\n      }\n      beginIndex += groupCount;\n    }\n  }\n  copyPartOpacities(model) {\n    for (let groupIndex = 0; groupIndex < this._partGroups.length; ++groupIndex) {\n      const partData = this._partGroups[groupIndex];\n      if (partData.link.length == 0) {\n        continue;\n      }\n      const partIndex = this._partGroups[groupIndex].partIndex;\n      const opacity = model.getPartOpacityByIndex(partIndex);\n      for (let linkIndex = 0; linkIndex < partData.link.length; ++linkIndex) {\n        const linkPart = partData.link[linkIndex];\n        const linkPartIndex = linkPart.partIndex;\n        if (linkPartIndex < 0) {\n          continue;\n        }\n        model.setPartOpacityByIndex(linkPartIndex, opacity);\n      }\n    }\n  }\n  doFade(model, deltaTimeSeconds, beginIndex, partGroupCount) {\n    let visiblePartIndex = -1;\n    let newOpacity = 1;\n    const phi = 0.5;\n    const backOpacityThreshold = 0.15;\n    for (let i = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partIndex = this._partGroups[i].partIndex;\n      const paramIndex = this._partGroups[i].parameterIndex;\n      if (model.getParameterValueByIndex(paramIndex) > Epsilon) {\n        if (visiblePartIndex >= 0) {\n          break;\n        }\n        visiblePartIndex = i;\n        newOpacity = model.getPartOpacityByIndex(partIndex);\n        newOpacity += deltaTimeSeconds / this._fadeTimeSeconds;\n        if (newOpacity > 1) {\n          newOpacity = 1;\n        }\n      }\n    }\n    if (visiblePartIndex < 0) {\n      visiblePartIndex = 0;\n      newOpacity = 1;\n    }\n    for (let i = beginIndex; i < beginIndex + partGroupCount; ++i) {\n      const partsIndex = this._partGroups[i].partIndex;\n      if (visiblePartIndex == i) {\n        model.setPartOpacityByIndex(partsIndex, newOpacity);\n      } else {\n        let opacity = model.getPartOpacityByIndex(partsIndex);\n        let a1;\n        if (newOpacity < phi) {\n          a1 = newOpacity * (phi - 1) / phi + 1;\n        } else {\n          a1 = (1 - newOpacity) * phi / (1 - phi);\n        }\n        const backOpacity = (1 - a1) * (1 - newOpacity);\n        if (backOpacity > backOpacityThreshold) {\n          a1 = 1 - backOpacityThreshold / (1 - newOpacity);\n        }\n        if (opacity > a1) {\n          opacity = a1;\n        }\n        model.setPartOpacityByIndex(partsIndex, opacity);\n      }\n    }\n  }\n  constructor() {\n    this._fadeTimeSeconds = DefaultFadeInSeconds;\n    this._lastModel = void 0;\n    this._partGroups = [];\n    this._partGroupCounts = [];\n  }\n}\nclass PartData {\n  constructor(v) {\n    this.parameterIndex = 0;\n    this.partIndex = 0;\n    this.partId = \"\";\n    this.link = [];\n    if (v != void 0) {\n      this.assignment(v);\n    }\n  }\n  assignment(v) {\n    this.partId = v.partId;\n    this.link = v.link.map((link) => link.clone());\n    return this;\n  }\n  initialize(model) {\n    this.parameterIndex = model.getParameterIndex(this.partId);\n    this.partIndex = model.getPartIndex(this.partId);\n    model.setParameterValueByIndex(this.parameterIndex, 1);\n  }\n  clone() {\n    const clonePartData = new PartData();\n    clonePartData.partId = this.partId;\n    clonePartData.parameterIndex = this.parameterIndex;\n    clonePartData.partIndex = this.partIndex;\n    clonePartData.link = this.link.map((link) => link.clone());\n    return clonePartData;\n  }\n}\nclass CubismModel {\n  update() {\n    this._model.update();\n    this._model.drawables.resetDynamicFlags();\n  }\n  getCanvasWidth() {\n    if (this._model == null) {\n      return 0;\n    }\n    return this._model.canvasinfo.CanvasWidth / this._model.canvasinfo.PixelsPerUnit;\n  }\n  getCanvasHeight() {\n    if (this._model == null) {\n      return 0;\n    }\n    return this._model.canvasinfo.CanvasHeight / this._model.canvasinfo.PixelsPerUnit;\n  }\n  saveParameters() {\n    const parameterCount = this._model.parameters.count;\n    const savedParameterCount = this._savedParameters.length;\n    for (let i = 0; i < parameterCount; ++i) {\n      if (i < savedParameterCount) {\n        this._savedParameters[i] = this._parameterValues[i];\n      } else {\n        this._savedParameters.push(this._parameterValues[i]);\n      }\n    }\n  }\n  getModel() {\n    return this._model;\n  }\n  getPartIndex(partId) {\n    let partIndex;\n    const partCount = this._model.parts.count;\n    for (partIndex = 0; partIndex < partCount; ++partIndex) {\n      if (partId == this._partIds[partIndex]) {\n        return partIndex;\n      }\n    }\n    if (partId in this._notExistPartId) {\n      return this._notExistPartId[partId];\n    }\n    partIndex = partCount + this._notExistPartId.length;\n    this._notExistPartId[partId] = partIndex;\n    this._notExistPartOpacities[partIndex] = 0;\n    return partIndex;\n  }\n  getPartCount() {\n    return this._model.parts.count;\n  }\n  setPartOpacityByIndex(partIndex, opacity) {\n    if (partIndex in this._notExistPartOpacities) {\n      this._notExistPartOpacities[partIndex] = opacity;\n      return;\n    }\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n    this._partOpacities[partIndex] = opacity;\n  }\n  setPartOpacityById(partId, opacity) {\n    const index = this.getPartIndex(partId);\n    if (index < 0) {\n      return;\n    }\n    this.setPartOpacityByIndex(index, opacity);\n  }\n  getPartOpacityByIndex(partIndex) {\n    if (partIndex in this._notExistPartOpacities) {\n      return this._notExistPartOpacities[partIndex];\n    }\n    CSM_ASSERT(0 <= partIndex && partIndex < this.getPartCount());\n    return this._partOpacities[partIndex];\n  }\n  getPartOpacityById(partId) {\n    const index = this.getPartIndex(partId);\n    if (index < 0) {\n      return 0;\n    }\n    return this.getPartOpacityByIndex(index);\n  }\n  getParameterIndex(parameterId) {\n    let parameterIndex;\n    const idCount = this._model.parameters.count;\n    for (parameterIndex = 0; parameterIndex < idCount; ++parameterIndex) {\n      if (parameterId != this._parameterIds[parameterIndex]) {\n        continue;\n      }\n      return parameterIndex;\n    }\n    if (parameterId in this._notExistParameterId) {\n      return this._notExistParameterId[parameterId];\n    }\n    parameterIndex = this._model.parameters.count + Object.keys(this._notExistParameterId).length;\n    this._notExistParameterId[parameterId] = parameterIndex;\n    this._notExistParameterValues[parameterIndex] = 0;\n    return parameterIndex;\n  }\n  getParameterCount() {\n    return this._model.parameters.count;\n  }\n  getParameterMaximumValue(parameterIndex) {\n    return this._model.parameters.maximumValues[parameterIndex];\n  }\n  getParameterMinimumValue(parameterIndex) {\n    return this._model.parameters.minimumValues[parameterIndex];\n  }\n  getParameterDefaultValue(parameterIndex) {\n    return this._model.parameters.defaultValues[parameterIndex];\n  }\n  getParameterValueByIndex(parameterIndex) {\n    if (parameterIndex in this._notExistParameterValues) {\n      return this._notExistParameterValues[parameterIndex];\n    }\n    CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\n    return this._parameterValues[parameterIndex];\n  }\n  getParameterValueById(parameterId) {\n    const parameterIndex = this.getParameterIndex(parameterId);\n    return this.getParameterValueByIndex(parameterIndex);\n  }\n  setParameterValueByIndex(parameterIndex, value, weight = 1) {\n    if (parameterIndex in this._notExistParameterValues) {\n      this._notExistParameterValues[parameterIndex] = weight == 1 ? value : this._notExistParameterValues[parameterIndex] * (1 - weight) + value * weight;\n      return;\n    }\n    CSM_ASSERT(0 <= parameterIndex && parameterIndex < this.getParameterCount());\n    if (this._model.parameters.maximumValues[parameterIndex] < value) {\n      value = this._model.parameters.maximumValues[parameterIndex];\n    }\n    if (this._model.parameters.minimumValues[parameterIndex] > value) {\n      value = this._model.parameters.minimumValues[parameterIndex];\n    }\n    this._parameterValues[parameterIndex] = weight == 1 ? value : this._parameterValues[parameterIndex] = this._parameterValues[parameterIndex] * (1 - weight) + value * weight;\n  }\n  setParameterValueById(parameterId, value, weight = 1) {\n    const index = this.getParameterIndex(parameterId);\n    this.setParameterValueByIndex(index, value, weight);\n  }\n  addParameterValueByIndex(parameterIndex, value, weight = 1) {\n    this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) + value * weight);\n  }\n  addParameterValueById(parameterId, value, weight = 1) {\n    const index = this.getParameterIndex(parameterId);\n    this.addParameterValueByIndex(index, value, weight);\n  }\n  multiplyParameterValueById(parameterId, value, weight = 1) {\n    const index = this.getParameterIndex(parameterId);\n    this.multiplyParameterValueByIndex(index, value, weight);\n  }\n  multiplyParameterValueByIndex(parameterIndex, value, weight = 1) {\n    this.setParameterValueByIndex(parameterIndex, this.getParameterValueByIndex(parameterIndex) * (1 + (value - 1) * weight));\n  }\n  getDrawableIds() {\n    return this._drawableIds.slice();\n  }\n  getDrawableIndex(drawableId) {\n    const drawableCount = this._model.drawables.count;\n    for (let drawableIndex = 0; drawableIndex < drawableCount; ++drawableIndex) {\n      if (this._drawableIds[drawableIndex] == drawableId) {\n        return drawableIndex;\n      }\n    }\n    return -1;\n  }\n  getDrawableCount() {\n    return this._model.drawables.count;\n  }\n  getDrawableId(drawableIndex) {\n    return this._model.drawables.ids[drawableIndex];\n  }\n  getDrawableRenderOrders() {\n    return this._model.drawables.renderOrders;\n  }\n  getDrawableTextureIndices(drawableIndex) {\n    return this._model.drawables.textureIndices[drawableIndex];\n  }\n  getDrawableDynamicFlagVertexPositionsDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVertexPositionsDidChangeBit(dynamicFlags[drawableIndex]);\n  }\n  getDrawableVertexIndexCount(drawableIndex) {\n    return this._model.drawables.indexCounts[drawableIndex];\n  }\n  getDrawableVertexCount(drawableIndex) {\n    return this._model.drawables.vertexCounts[drawableIndex];\n  }\n  getDrawableVertices(drawableIndex) {\n    return this.getDrawableVertexPositions(drawableIndex);\n  }\n  getDrawableVertexIndices(drawableIndex) {\n    return this._model.drawables.indices[drawableIndex];\n  }\n  getDrawableVertexPositions(drawableIndex) {\n    return this._model.drawables.vertexPositions[drawableIndex];\n  }\n  getDrawableVertexUvs(drawableIndex) {\n    return this._model.drawables.vertexUvs[drawableIndex];\n  }\n  getDrawableOpacity(drawableIndex) {\n    return this._model.drawables.opacities[drawableIndex];\n  }\n  getDrawableCulling(drawableIndex) {\n    const constantFlags = this._model.drawables.constantFlags;\n    return !Live2DCubismCore.Utils.hasIsDoubleSidedBit(constantFlags[drawableIndex]);\n  }\n  getDrawableBlendMode(drawableIndex) {\n    const constantFlags = this._model.drawables.constantFlags;\n    return Live2DCubismCore.Utils.hasBlendAdditiveBit(constantFlags[drawableIndex]) ? CubismBlendMode.CubismBlendMode_Additive : Live2DCubismCore.Utils.hasBlendMultiplicativeBit(constantFlags[drawableIndex]) ? CubismBlendMode.CubismBlendMode_Multiplicative : CubismBlendMode.CubismBlendMode_Normal;\n  }\n  getDrawableInvertedMaskBit(drawableIndex) {\n    const constantFlags = this._model.drawables.constantFlags;\n    return Live2DCubismCore.Utils.hasIsInvertedMaskBit(constantFlags[drawableIndex]);\n  }\n  getDrawableMasks() {\n    return this._model.drawables.masks;\n  }\n  getDrawableMaskCounts() {\n    return this._model.drawables.maskCounts;\n  }\n  isUsingMasking() {\n    for (let d = 0; d < this._model.drawables.count; ++d) {\n      if (this._model.drawables.maskCounts[d] <= 0) {\n        continue;\n      }\n      return true;\n    }\n    return false;\n  }\n  getDrawableDynamicFlagIsVisible(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasIsVisibleBit(dynamicFlags[drawableIndex]);\n  }\n  getDrawableDynamicFlagVisibilityDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasVisibilityDidChangeBit(dynamicFlags[drawableIndex]);\n  }\n  getDrawableDynamicFlagOpacityDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasOpacityDidChangeBit(dynamicFlags[drawableIndex]);\n  }\n  getDrawableDynamicFlagRenderOrderDidChange(drawableIndex) {\n    const dynamicFlags = this._model.drawables.dynamicFlags;\n    return Live2DCubismCore.Utils.hasRenderOrderDidChangeBit(dynamicFlags[drawableIndex]);\n  }\n  loadParameters() {\n    let parameterCount = this._model.parameters.count;\n    const savedParameterCount = this._savedParameters.length;\n    if (parameterCount > savedParameterCount) {\n      parameterCount = savedParameterCount;\n    }\n    for (let i = 0; i < parameterCount; ++i) {\n      this._parameterValues[i] = this._savedParameters[i];\n    }\n  }\n  initialize() {\n    this._parameterValues = this._model.parameters.values;\n    this._partOpacities = this._model.parts.opacities;\n    this._parameterMaximumValues = this._model.parameters.maximumValues;\n    this._parameterMinimumValues = this._model.parameters.minimumValues;\n    {\n      const parameterIds = this._model.parameters.ids;\n      const parameterCount = this._model.parameters.count;\n      for (let i = 0; i < parameterCount; ++i) {\n        this._parameterIds.push(parameterIds[i]);\n      }\n    }\n    {\n      const partIds = this._model.parts.ids;\n      const partCount = this._model.parts.count;\n      for (let i = 0; i < partCount; ++i) {\n        this._partIds.push(partIds[i]);\n      }\n    }\n    {\n      const drawableIds = this._model.drawables.ids;\n      const drawableCount = this._model.drawables.count;\n      for (let i = 0; i < drawableCount; ++i) {\n        this._drawableIds.push(drawableIds[i]);\n      }\n    }\n  }\n  constructor(model) {\n    this._model = model;\n    this._savedParameters = [];\n    this._parameterIds = [];\n    this._drawableIds = [];\n    this._partIds = [];\n    this._notExistPartId = {};\n    this._notExistParameterId = {};\n    this._notExistParameterValues = {};\n    this._notExistPartOpacities = {};\n    this.initialize();\n  }\n  release() {\n    this._model.release();\n    this._model = void 0;\n  }\n}\nclass CubismMoc {\n  static create(mocBytes) {\n    const moc = Live2DCubismCore.Moc.fromArrayBuffer(mocBytes);\n    if (moc) {\n      return new CubismMoc(moc);\n    }\n    throw new Error(\"Unknown error\");\n  }\n  createModel() {\n    let cubismModel;\n    const model = Live2DCubismCore.Model.fromMoc(this._moc);\n    if (model) {\n      cubismModel = new CubismModel(model);\n      ++this._modelCount;\n      return cubismModel;\n    }\n    throw new Error(\"Unknown error\");\n  }\n  deleteModel(model) {\n    if (model != null) {\n      --this._modelCount;\n    }\n  }\n  constructor(moc) {\n    this._moc = moc;\n    this._modelCount = 0;\n  }\n  release() {\n    this._moc._release();\n    this._moc = void 0;\n  }\n}\nvar CubismPhysicsTargetType = /* @__PURE__ */ ((CubismPhysicsTargetType2) => {\n  CubismPhysicsTargetType2[CubismPhysicsTargetType2[\"CubismPhysicsTargetType_Parameter\"] = 0] = \"CubismPhysicsTargetType_Parameter\";\n  return CubismPhysicsTargetType2;\n})(CubismPhysicsTargetType || {});\nvar CubismPhysicsSource = /* @__PURE__ */ ((CubismPhysicsSource2) => {\n  CubismPhysicsSource2[CubismPhysicsSource2[\"CubismPhysicsSource_X\"] = 0] = \"CubismPhysicsSource_X\";\n  CubismPhysicsSource2[CubismPhysicsSource2[\"CubismPhysicsSource_Y\"] = 1] = \"CubismPhysicsSource_Y\";\n  CubismPhysicsSource2[CubismPhysicsSource2[\"CubismPhysicsSource_Angle\"] = 2] = \"CubismPhysicsSource_Angle\";\n  return CubismPhysicsSource2;\n})(CubismPhysicsSource || {});\nclass CubismPhysicsParticle {\n  constructor() {\n    this.initialPosition = new CubismVector2(0, 0);\n    this.position = new CubismVector2(0, 0);\n    this.lastPosition = new CubismVector2(0, 0);\n    this.lastGravity = new CubismVector2(0, 0);\n    this.force = new CubismVector2(0, 0);\n    this.velocity = new CubismVector2(0, 0);\n  }\n}\nclass CubismPhysicsSubRig {\n  constructor() {\n    this.normalizationPosition = {};\n    this.normalizationAngle = {};\n  }\n}\nclass CubismPhysicsInput {\n  constructor() {\n    this.source = {};\n  }\n}\nclass CubismPhysicsOutput {\n  constructor() {\n    this.destination = {};\n    this.translationScale = new CubismVector2(0, 0);\n  }\n}\nclass CubismPhysicsRig {\n  constructor() {\n    this.settings = [];\n    this.inputs = [];\n    this.outputs = [];\n    this.particles = [];\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n  }\n}\nclass CubismPhysicsJson {\n  constructor(json) {\n    this._json = json;\n  }\n  release() {\n    this._json = void 0;\n  }\n  getGravity() {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this._json.Meta.EffectiveForces.Gravity.X;\n    ret.y = this._json.Meta.EffectiveForces.Gravity.Y;\n    return ret;\n  }\n  getWind() {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this._json.Meta.EffectiveForces.Wind.X;\n    ret.y = this._json.Meta.EffectiveForces.Wind.Y;\n    return ret;\n  }\n  getSubRigCount() {\n    return this._json.Meta.PhysicsSettingCount;\n  }\n  getTotalInputCount() {\n    return this._json.Meta.TotalInputCount;\n  }\n  getTotalOutputCount() {\n    return this._json.Meta.TotalOutputCount;\n  }\n  getVertexCount() {\n    return this._json.Meta.VertexCount;\n  }\n  getNormalizationPositionMinimumValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Position.Minimum;\n  }\n  getNormalizationPositionMaximumValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Position.Maximum;\n  }\n  getNormalizationPositionDefaultValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Position.Default;\n  }\n  getNormalizationAngleMinimumValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Angle.Minimum;\n  }\n  getNormalizationAngleMaximumValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Angle.Maximum;\n  }\n  getNormalizationAngleDefaultValue(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Normalization.Angle.Default;\n  }\n  getInputCount(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Input.length;\n  }\n  getInputWeight(physicsSettingIndex, inputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Weight;\n  }\n  getInputReflect(physicsSettingIndex, inputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Reflect;\n  }\n  getInputType(physicsSettingIndex, inputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Type;\n  }\n  getInputSourceId(physicsSettingIndex, inputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Input[inputIndex].Source.Id;\n  }\n  getOutputCount(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output.length;\n  }\n  getOutputVertexIndex(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].VertexIndex;\n  }\n  getOutputAngleScale(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Scale;\n  }\n  getOutputWeight(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Weight;\n  }\n  getOutputDestinationId(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Destination.Id;\n  }\n  getOutputType(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Type;\n  }\n  getOutputReflect(physicsSettingIndex, outputIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Output[outputIndex].Reflect;\n  }\n  getParticleCount(physicsSettingIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices.length;\n  }\n  getParticleMobility(physicsSettingIndex, vertexIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Mobility;\n  }\n  getParticleDelay(physicsSettingIndex, vertexIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Delay;\n  }\n  getParticleAcceleration(physicsSettingIndex, vertexIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Acceleration;\n  }\n  getParticleRadius(physicsSettingIndex, vertexIndex) {\n    return this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Radius;\n  }\n  getParticlePosition(physicsSettingIndex, vertexIndex) {\n    const ret = new CubismVector2(0, 0);\n    ret.x = this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Position.X;\n    ret.y = this._json.PhysicsSettings[physicsSettingIndex].Vertices[vertexIndex].Position.Y;\n    return ret;\n  }\n}\nconst PhysicsTypeTagX = \"X\";\nconst PhysicsTypeTagY = \"Y\";\nconst PhysicsTypeTagAngle = \"Angle\";\nconst AirResistance = 5;\nconst MaximumWeight = 100;\nconst MovementThreshold = 1e-3;\nclass CubismPhysics {\n  static create(json) {\n    const ret = new CubismPhysics();\n    ret.parse(json);\n    ret._physicsRig.gravity.y = 0;\n    return ret;\n  }\n  evaluate(model, deltaTimeSeconds) {\n    let totalAngle;\n    let weight;\n    let radAngle;\n    let outputValue;\n    const totalTranslation = new CubismVector2();\n    let currentSetting;\n    let currentInput;\n    let currentOutput;\n    let currentParticles;\n    let parameterValue;\n    let parameterMaximumValue;\n    let parameterMinimumValue;\n    let parameterDefaultValue;\n    parameterValue = model.getModel().parameters.values;\n    parameterMaximumValue = model.getModel().parameters.maximumValues;\n    parameterMinimumValue = model.getModel().parameters.minimumValues;\n    parameterDefaultValue = model.getModel().parameters.defaultValues;\n    for (let settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\n      totalAngle = { angle: 0 };\n      totalTranslation.x = 0;\n      totalTranslation.y = 0;\n      currentSetting = this._physicsRig.settings[settingIndex];\n      currentInput = this._physicsRig.inputs.slice(currentSetting.baseInputIndex);\n      currentOutput = this._physicsRig.outputs.slice(currentSetting.baseOutputIndex);\n      currentParticles = this._physicsRig.particles.slice(currentSetting.baseParticleIndex);\n      for (let i = 0; i < currentSetting.inputCount; ++i) {\n        weight = currentInput[i].weight / MaximumWeight;\n        if (currentInput[i].sourceParameterIndex == -1) {\n          currentInput[i].sourceParameterIndex = model.getParameterIndex(currentInput[i].source.id);\n        }\n        currentInput[i].getNormalizedParameterValue(totalTranslation, totalAngle, parameterValue[currentInput[i].sourceParameterIndex], parameterMinimumValue[currentInput[i].sourceParameterIndex], parameterMaximumValue[currentInput[i].sourceParameterIndex], parameterDefaultValue[currentInput[i].sourceParameterIndex], currentSetting.normalizationPosition, currentSetting.normalizationAngle, currentInput[i].reflect, weight);\n      }\n      radAngle = CubismMath.degreesToRadian(-totalAngle.angle);\n      totalTranslation.x = totalTranslation.x * CubismMath.cos(radAngle) - totalTranslation.y * CubismMath.sin(radAngle);\n      totalTranslation.y = totalTranslation.x * CubismMath.sin(radAngle) + totalTranslation.y * CubismMath.cos(radAngle);\n      updateParticles(currentParticles, currentSetting.particleCount, totalTranslation, totalAngle.angle, this._options.wind, MovementThreshold * currentSetting.normalizationPosition.maximum, deltaTimeSeconds, AirResistance);\n      for (let i = 0; i < currentSetting.outputCount; ++i) {\n        const particleIndex = currentOutput[i].vertexIndex;\n        if (particleIndex < 1 || particleIndex >= currentSetting.particleCount) {\n          break;\n        }\n        if (currentOutput[i].destinationParameterIndex == -1) {\n          currentOutput[i].destinationParameterIndex = model.getParameterIndex(currentOutput[i].destination.id);\n        }\n        const translation = new CubismVector2();\n        translation.x = currentParticles[particleIndex].position.x - currentParticles[particleIndex - 1].position.x;\n        translation.y = currentParticles[particleIndex].position.y - currentParticles[particleIndex - 1].position.y;\n        outputValue = currentOutput[i].getValue(translation, currentParticles, particleIndex, currentOutput[i].reflect, this._options.gravity);\n        const destinationParameterIndex = currentOutput[i].destinationParameterIndex;\n        const outParameterValue = !Float32Array.prototype.slice && \"subarray\" in Float32Array.prototype ? JSON.parse(JSON.stringify(parameterValue.subarray(destinationParameterIndex))) : parameterValue.slice(destinationParameterIndex);\n        updateOutputParameterValue(outParameterValue, parameterMinimumValue[destinationParameterIndex], parameterMaximumValue[destinationParameterIndex], outputValue, currentOutput[i]);\n        for (let offset = destinationParameterIndex, outParamIndex = 0; offset < parameterValue.length; offset++, outParamIndex++) {\n          parameterValue[offset] = outParameterValue[outParamIndex];\n        }\n      }\n    }\n  }\n  setOptions(options) {\n    this._options = options;\n  }\n  getOption() {\n    return this._options;\n  }\n  constructor() {\n    this._options = new Options();\n    this._options.gravity.y = -1;\n    this._options.gravity.x = 0;\n    this._options.wind.x = 0;\n    this._options.wind.y = 0;\n  }\n  release() {\n    this._physicsRig = void 0;\n  }\n  parse(physicsJson) {\n    this._physicsRig = new CubismPhysicsRig();\n    let json = new CubismPhysicsJson(physicsJson);\n    this._physicsRig.gravity = json.getGravity();\n    this._physicsRig.wind = json.getWind();\n    this._physicsRig.subRigCount = json.getSubRigCount();\n    let inputIndex = 0, outputIndex = 0, particleIndex = 0;\n    for (let i = 0; i < this._physicsRig.subRigCount; ++i) {\n      const setting = new CubismPhysicsSubRig();\n      setting.normalizationPosition.minimum = json.getNormalizationPositionMinimumValue(i);\n      setting.normalizationPosition.maximum = json.getNormalizationPositionMaximumValue(i);\n      setting.normalizationPosition.defalut = json.getNormalizationPositionDefaultValue(i);\n      setting.normalizationAngle.minimum = json.getNormalizationAngleMinimumValue(i);\n      setting.normalizationAngle.maximum = json.getNormalizationAngleMaximumValue(i);\n      setting.normalizationAngle.defalut = json.getNormalizationAngleDefaultValue(i);\n      setting.inputCount = json.getInputCount(i);\n      setting.baseInputIndex = inputIndex;\n      inputIndex += setting.inputCount;\n      for (let j = 0; j < setting.inputCount; ++j) {\n        const input = new CubismPhysicsInput();\n        input.sourceParameterIndex = -1;\n        input.weight = json.getInputWeight(i, j);\n        input.reflect = json.getInputReflect(i, j);\n        switch (json.getInputType(i, j)) {\n          case PhysicsTypeTagX:\n            input.type = CubismPhysicsSource.CubismPhysicsSource_X;\n            input.getNormalizedParameterValue = getInputTranslationXFromNormalizedParameterValue;\n            break;\n          case PhysicsTypeTagY:\n            input.type = CubismPhysicsSource.CubismPhysicsSource_Y;\n            input.getNormalizedParameterValue = getInputTranslationYFromNormalizedParamterValue;\n            break;\n          case PhysicsTypeTagAngle:\n            input.type = CubismPhysicsSource.CubismPhysicsSource_Angle;\n            input.getNormalizedParameterValue = getInputAngleFromNormalizedParameterValue;\n            break;\n        }\n        input.source.targetType = CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\n        input.source.id = json.getInputSourceId(i, j);\n        this._physicsRig.inputs.push(input);\n      }\n      setting.outputCount = json.getOutputCount(i);\n      setting.baseOutputIndex = outputIndex;\n      outputIndex += setting.outputCount;\n      for (let j = 0; j < setting.outputCount; ++j) {\n        const output = new CubismPhysicsOutput();\n        output.destinationParameterIndex = -1;\n        output.vertexIndex = json.getOutputVertexIndex(i, j);\n        output.angleScale = json.getOutputAngleScale(i, j);\n        output.weight = json.getOutputWeight(i, j);\n        output.destination.targetType = CubismPhysicsTargetType.CubismPhysicsTargetType_Parameter;\n        output.destination.id = json.getOutputDestinationId(i, j);\n        switch (json.getOutputType(i, j)) {\n          case PhysicsTypeTagX:\n            output.type = CubismPhysicsSource.CubismPhysicsSource_X;\n            output.getValue = getOutputTranslationX;\n            output.getScale = getOutputScaleTranslationX;\n            break;\n          case PhysicsTypeTagY:\n            output.type = CubismPhysicsSource.CubismPhysicsSource_Y;\n            output.getValue = getOutputTranslationY;\n            output.getScale = getOutputScaleTranslationY;\n            break;\n          case PhysicsTypeTagAngle:\n            output.type = CubismPhysicsSource.CubismPhysicsSource_Angle;\n            output.getValue = getOutputAngle;\n            output.getScale = getOutputScaleAngle;\n            break;\n        }\n        output.reflect = json.getOutputReflect(i, j);\n        this._physicsRig.outputs.push(output);\n      }\n      setting.particleCount = json.getParticleCount(i);\n      setting.baseParticleIndex = particleIndex;\n      particleIndex += setting.particleCount;\n      for (let j = 0; j < setting.particleCount; ++j) {\n        const particle = new CubismPhysicsParticle();\n        particle.mobility = json.getParticleMobility(i, j);\n        particle.delay = json.getParticleDelay(i, j);\n        particle.acceleration = json.getParticleAcceleration(i, j);\n        particle.radius = json.getParticleRadius(i, j);\n        particle.position = json.getParticlePosition(i, j);\n        this._physicsRig.particles.push(particle);\n      }\n      this._physicsRig.settings.push(setting);\n    }\n    this.initialize();\n    json.release();\n  }\n  initialize() {\n    let strand;\n    let currentSetting;\n    let radius;\n    for (let settingIndex = 0; settingIndex < this._physicsRig.subRigCount; ++settingIndex) {\n      currentSetting = this._physicsRig.settings[settingIndex];\n      strand = this._physicsRig.particles.slice(currentSetting.baseParticleIndex);\n      strand[0].initialPosition = new CubismVector2(0, 0);\n      strand[0].lastPosition = new CubismVector2(strand[0].initialPosition.x, strand[0].initialPosition.y);\n      strand[0].lastGravity = new CubismVector2(0, -1);\n      strand[0].lastGravity.y *= -1;\n      strand[0].velocity = new CubismVector2(0, 0);\n      strand[0].force = new CubismVector2(0, 0);\n      for (let i = 1; i < currentSetting.particleCount; ++i) {\n        radius = new CubismVector2(0, 0);\n        radius.y = strand[i].radius;\n        strand[i].initialPosition = new CubismVector2(strand[i - 1].initialPosition.x + radius.x, strand[i - 1].initialPosition.y + radius.y);\n        strand[i].position = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);\n        strand[i].lastPosition = new CubismVector2(strand[i].initialPosition.x, strand[i].initialPosition.y);\n        strand[i].lastGravity = new CubismVector2(0, -1);\n        strand[i].lastGravity.y *= -1;\n        strand[i].velocity = new CubismVector2(0, 0);\n        strand[i].force = new CubismVector2(0, 0);\n      }\n    }\n  }\n}\nclass Options {\n  constructor() {\n    this.gravity = new CubismVector2(0, 0);\n    this.wind = new CubismVector2(0, 0);\n  }\n}\nfunction getInputTranslationXFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\n  targetTranslation.x += normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;\n}\nfunction getInputTranslationYFromNormalizedParamterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition, normalizationAngle, isInverted, weight) {\n  targetTranslation.y += normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationPosition.minimum, normalizationPosition.maximum, normalizationPosition.defalut, isInverted) * weight;\n}\nfunction getInputAngleFromNormalizedParameterValue(targetTranslation, targetAngle, value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizaitionPosition, normalizationAngle, isInverted, weight) {\n  targetAngle.angle += normalizeParameterValue(value, parameterMinimumValue, parameterMaximumValue, parameterDefaultValue, normalizationAngle.minimum, normalizationAngle.maximum, normalizationAngle.defalut, isInverted) * weight;\n}\nfunction getOutputTranslationX(translation, particles, particleIndex, isInverted, parentGravity) {\n  let outputValue = translation.x;\n  if (isInverted) {\n    outputValue *= -1;\n  }\n  return outputValue;\n}\nfunction getOutputTranslationY(translation, particles, particleIndex, isInverted, parentGravity) {\n  let outputValue = translation.y;\n  if (isInverted) {\n    outputValue *= -1;\n  }\n  return outputValue;\n}\nfunction getOutputAngle(translation, particles, particleIndex, isInverted, parentGravity) {\n  let outputValue;\n  if (particleIndex >= 2) {\n    parentGravity = particles[particleIndex - 1].position.substract(particles[particleIndex - 2].position);\n  } else {\n    parentGravity = parentGravity.multiplyByScaler(-1);\n  }\n  outputValue = CubismMath.directionToRadian(parentGravity, translation);\n  if (isInverted) {\n    outputValue *= -1;\n  }\n  return outputValue;\n}\nfunction getRangeValue(min, max) {\n  return Math.abs(Math.max(min, max) - Math.min(min, max));\n}\nfunction getDefaultValue(min, max) {\n  const minValue = Math.min(min, max);\n  return minValue + getRangeValue(min, max) / 2;\n}\nfunction getOutputScaleTranslationX(translationScale, angleScale) {\n  return translationScale.x;\n}\nfunction getOutputScaleTranslationY(translationScale, angleScale) {\n  return translationScale.y;\n}\nfunction getOutputScaleAngle(translationScale, angleScale) {\n  return angleScale;\n}\nfunction updateParticles(strand, strandCount, totalTranslation, totalAngle, windDirection, thresholdValue, deltaTimeSeconds, airResistance) {\n  let totalRadian;\n  let delay;\n  let radian;\n  let currentGravity;\n  let direction = new CubismVector2(0, 0);\n  let velocity = new CubismVector2(0, 0);\n  let force = new CubismVector2(0, 0);\n  let newDirection = new CubismVector2(0, 0);\n  strand[0].position = new CubismVector2(totalTranslation.x, totalTranslation.y);\n  totalRadian = CubismMath.degreesToRadian(totalAngle);\n  currentGravity = CubismMath.radianToDirection(totalRadian);\n  currentGravity.normalize();\n  for (let i = 1; i < strandCount; ++i) {\n    strand[i].force = currentGravity.multiplyByScaler(strand[i].acceleration).add(windDirection);\n    strand[i].lastPosition = new CubismVector2(strand[i].position.x, strand[i].position.y);\n    delay = strand[i].delay * deltaTimeSeconds * 30;\n    direction = strand[i].position.substract(strand[i - 1].position);\n    radian = CubismMath.directionToRadian(strand[i].lastGravity, currentGravity) / airResistance;\n    direction.x = CubismMath.cos(radian) * direction.x - direction.y * CubismMath.sin(radian);\n    direction.y = CubismMath.sin(radian) * direction.x + direction.y * CubismMath.cos(radian);\n    strand[i].position = strand[i - 1].position.add(direction);\n    velocity = strand[i].velocity.multiplyByScaler(delay);\n    force = strand[i].force.multiplyByScaler(delay).multiplyByScaler(delay);\n    strand[i].position = strand[i].position.add(velocity).add(force);\n    newDirection = strand[i].position.substract(strand[i - 1].position);\n    newDirection.normalize();\n    strand[i].position = strand[i - 1].position.add(newDirection.multiplyByScaler(strand[i].radius));\n    if (CubismMath.abs(strand[i].position.x) < thresholdValue) {\n      strand[i].position.x = 0;\n    }\n    if (delay != 0) {\n      strand[i].velocity = strand[i].position.substract(strand[i].lastPosition);\n      strand[i].velocity = strand[i].velocity.divisionByScalar(delay);\n      strand[i].velocity = strand[i].velocity.multiplyByScaler(strand[i].mobility);\n    }\n    strand[i].force = new CubismVector2(0, 0);\n    strand[i].lastGravity = new CubismVector2(currentGravity.x, currentGravity.y);\n  }\n}\nfunction updateOutputParameterValue(parameterValue, parameterValueMinimum, parameterValueMaximum, translation, output) {\n  let outputScale;\n  let value;\n  let weight;\n  outputScale = output.getScale(output.translationScale, output.angleScale);\n  value = translation * outputScale;\n  if (value < parameterValueMinimum) {\n    if (value < output.valueBelowMinimum) {\n      output.valueBelowMinimum = value;\n    }\n    value = parameterValueMinimum;\n  } else if (value > parameterValueMaximum) {\n    if (value > output.valueExceededMaximum) {\n      output.valueExceededMaximum = value;\n    }\n    value = parameterValueMaximum;\n  }\n  weight = output.weight / MaximumWeight;\n  if (weight >= 1) {\n    parameterValue[0] = value;\n  } else {\n    value = parameterValue[0] * (1 - weight) + value * weight;\n    parameterValue[0] = value;\n  }\n}\nfunction normalizeParameterValue(value, parameterMinimum, parameterMaximum, parameterDefault, normalizedMinimum, normalizedMaximum, normalizedDefault, isInverted) {\n  let result = 0;\n  const maxValue = CubismMath.max(parameterMaximum, parameterMinimum);\n  if (maxValue < value) {\n    value = maxValue;\n  }\n  const minValue = CubismMath.min(parameterMaximum, parameterMinimum);\n  if (minValue > value) {\n    value = minValue;\n  }\n  const minNormValue = CubismMath.min(normalizedMinimum, normalizedMaximum);\n  const maxNormValue = CubismMath.max(normalizedMinimum, normalizedMaximum);\n  const middleNormValue = normalizedDefault;\n  const middleValue = getDefaultValue(minValue, maxValue);\n  const paramValue = value - middleValue;\n  switch (Math.sign(paramValue)) {\n    case 1: {\n      const nLength = maxNormValue - middleNormValue;\n      const pLength = maxValue - middleValue;\n      if (pLength != 0) {\n        result = paramValue * (nLength / pLength);\n        result += middleNormValue;\n      }\n      break;\n    }\n    case -1: {\n      const nLength = minNormValue - middleNormValue;\n      const pLength = minValue - middleValue;\n      if (pLength != 0) {\n        result = paramValue * (nLength / pLength);\n        result += middleNormValue;\n      }\n      break;\n    }\n    case 0: {\n      result = middleNormValue;\n      break;\n    }\n  }\n  return isInverted ? result : result * -1;\n}\nLive2DFactory.registerRuntime({\n  version: 4,\n  ready: cubism4Ready,\n  test(source) {\n    return source instanceof Cubism4ModelSettings || Cubism4ModelSettings.isValidJSON(source);\n  },\n  isValidMoc(modelData) {\n    if (modelData.byteLength < 4) {\n      return false;\n    }\n    const view = new Int8Array(modelData, 0, 4);\n    return String.fromCharCode(...view) === \"MOC3\";\n  },\n  createModelSettings(json) {\n    return new Cubism4ModelSettings(json);\n  },\n  createCoreModel(data) {\n    const moc = CubismMoc.create(data);\n    try {\n      const model = moc.createModel();\n      model.__moc = moc;\n      return model;\n    } catch (e) {\n      try {\n        moc.release();\n      } catch (ignored) {\n      }\n      throw e;\n    }\n  },\n  createInternalModel(coreModel, settings, options) {\n    const model = new Cubism4InternalModel(coreModel, settings, options);\n    const coreModelWithMoc = coreModel;\n    if (coreModelWithMoc.__moc) {\n      model.__moc = coreModelWithMoc.__moc;\n      delete coreModelWithMoc.__moc;\n      model.once(\"destroy\", releaseMoc);\n    }\n    return model;\n  },\n  createPhysics(coreModel, data) {\n    return CubismPhysics.create(data);\n  },\n  createPose(coreModel, data) {\n    return CubismPose.create(data);\n  }\n});\nfunction releaseMoc() {\n  var _a;\n  (_a = this.__moc) == null ? void 0 : _a.release();\n}\nexport { Cubism2ExpressionManager, Cubism2InternalModel, Cubism2ModelSettings, Cubism2MotionManager, Cubism4ExpressionManager, Cubism4InternalModel, Cubism4ModelSettings, Cubism4MotionManager, ExpressionManager, FileLoader, FocusController, InteractionMixin, InternalModel, LOGICAL_HEIGHT, LOGICAL_WIDTH, Live2DExpression, Live2DEyeBlink, Live2DFactory, Live2DLoader, Live2DModel, Live2DPhysics, Live2DPose, Live2DTransform, ModelSettings, MotionManager, MotionPreloadStrategy, MotionPriority, MotionState, SoundManager, VERSION, XHRLoader, ZipLoader, applyMixins, clamp, config, copyArray, copyProperty, cubism4Ready, folderName, logger, rand, remove, startUpCubism4 };\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n"],"names":["ENV","RENDERER_TYPE","BUFFER_BITS","BLEND_MODES","DRAW_MODES","FORMATS","TARGETS","TYPES","SAMPLER_TYPES","SCALE_MODES","WRAP_MODES","MIPMAP_MODES","ALPHA_MODES","CLEAR_MODES","GC_MODES","PRECISION","MASK_TYPES","COLOR_MASK_BITS","MSAA_QUALITY","BUFFER_TYPE","BrowserAdapter","createCanvas","width","height","canvas","document","createElement","getWebGLRenderingContext","WebGLRenderingContext","getNavigator","navigator","getBaseUrl","_a","baseURI","window","location","href","fetch","url","options","appleIphone","appleIpod","appleTablet","appleUniversal","androidPhone","androidTablet","amazonPhone","amazonTablet","windowsPhone","windowsTablet","otherBlackBerry","otherBlackBerry10","otherOpera","otherChrome","otherFirefox","isAppleTabletOnIos13","platform","maxTouchPoints","MSStream","isMobile","param","nav","userAgent","tmp","split","match","regex","test","createMatch","result","apple","phone","ipod","tablet","universal","device","amazon","android","windows","other","blackberry","blackberry10","opera","firefox","chrome","any","isMobile$1","globalThis","settings","ADAPTER","MIPMAP_TEXTURES","POW2","ANISOTROPIC_LEVEL","RESOLUTION","FILTER_RESOLUTION","FILTER_MULTISAMPLE","NONE","SPRITE_MAX_TEXTURES","max","allowMax","parseInt","maxRecommendedTextures","SPRITE_BATCH_SIZE","RENDER_OPTIONS","view","autoDensity","backgroundColor","backgroundAlpha","useContextAlpha","clearBeforeRender","antialias","preserveDrawingBuffer","GC_MODE","AUTO","GC_MAX_IDLE","GC_MAX_CHECK_COUNT","WRAP_MODE","CLAMP","SCALE_MODE","LINEAR","PRECISION_VERTEX","HIGH","PRECISION_FRAGMENT","MEDIUM","CAN_UPLOAD_SAME_BUFFER","CREATE_IMAGE_BITMAP","ROUND_PIXELS","parse","format","resolve","RETINA_PREFIX","FAIL_IF_MAJOR_PERFORMANCE_CAVEAT","supported","saidHello","VERSION","premultiplyBlendMode","pm","npm","i","NORMAL_NPM","NORMAL","ADD_NPM","ADD","SCREEN_NPM","SCREEN","array","push","mapPremultipliedBlendModes","getBufferType","BYTES_PER_ELEMENT","Float32Array","Uint32Array","Uint16Array","Uint8Array","Int32Array","nextPow2","v","isPow2","log2","r","shift","removeItems","arr","startIdx","removeCount","length","len","nextUid","uid","warnings","deprecation","version","message","ignoreDepth","stack","Error","console","warn","splice","join","groupCollapsed","groupEnd","ProgramCache","TextureCache","Object","create","BaseTextureCache","CanvasRenderTarget","resolution","this","context","getContext","resize","prototype","clear","setTransform","clearRect","desiredWidth","desiredHeight","Math","round","destroy","defineProperty","get","set","val","tempAnchor","getResolutionOfUrl","defaultValue","exec","parseFloat","undefined","SHAPES","PI_2","PI","RAD_TO_DEG","DEG_TO_RAD","Point","x","y","clone","copyFrom","p","copyTo","equals","toString","tempPoints","Rectangle","Number","type","RECT","rectangle","contains","intersects","transform","x0_1","right","y0_1","bottom","x0","left","x1","y0","top","y1","lt","lb","rt","rb","s","sign","a","d","b","c","apply","min","nx","ny","n00","n10","n01","n11","mx","my","m00","m10","m01","m11","pad","paddingX","paddingY","fit","x2","y2","ceil","eps","floor","enlarge","ObservablePoint","Circle","radius","CIRC","r2","dx","dy","getBounds","Ellipse","halfWidth","halfHeight","ELIP","normx","normy","Polygon","points","_i","arguments","arguments$1","flat","Array","isArray","il","POLY","closeStroke","polygon","slice","inside","j","xi","yi","xj","yj","reduce","pointsDesc","currentPoint","RoundedRectangle","RREC","radius2","cb","scope","_x","_y","call","value","Matrix","tx","ty","fromArray","toArray","transpose","out","pos","newPos","applyInverse","id","translate","scale","rotate","angle","cos","sin","a1","c1","tx1","append","matrix","b1","d1","pivotX","pivotY","scaleX","scaleY","rotation","skewX","skewY","prepend","decompose","pivot","atan2","delta","abs","skew","sqrt","position","invert","n","identity","ux","uy","vx","vy","rotationCayley","rotationMatrices","signum","row","_ux","_uy","_vx","_vy","k","mat","init","ExtensionType","groupD8","E","SE","S","SW","W","NW","N","NE","MIRROR_VERTICAL","MAIN_DIAGONAL","MIRROR_HORIZONTAL","REVERSE_DIAGONAL","uX","ind","uY","vX","vY","inv","add","rotationSecond","rotationFirst","sub","rotate180","isVertical","byDirection","matrixAppendRotationInv","Transform","worldTransform","localTransform","onChange","updateSkew","_rotation","_cx","_sx","_cy","_sy","_localID","_currentLocalID","_worldID","_parentID","updateLocalTransform","updateTransform","parentTransform","pt","wt","setFromMatrix","IDENTITY","__assign","assign","t","hasOwnProperty","UPDATE_PRIORITY","normalizeExtension","ext","extension","metadata","ref","extensions","_addHandlers","_removeHandlers","_queue","remove","_this","map","forEach","_b","handlers","queue","handle","onAdd","onRemove","addHandlers","removeHandlers","handleByMap","name","handleByList","list","includes","Loader","index","indexOf","Runner","items","_name","_aliasCount","emit","a0","a2","a3","a4","a5","a6","a7","ensureNonAliasedItems","item","removeAll","defineProperties","dispatch","run","TARGET_FPMS","TickerListener","fn","priority","once","next","previous","_destroyed","deltaTime","redirect","connect","hard","Ticker","autoStart","lastTime","speed","started","_requestId","_maxElapsedMS","_minElapsedMS","_protected","_lastFrame","_head","Infinity","deltaMS","elapsedMS","_tick","time","update","requestAnimationFrame","_requestIfNeeded","performance","now","_cancelIfNeeded","cancelAnimationFrame","_startIfPossible","start","_addListener","addOnce","listener","current","count","stop","currentTime","head","fps","minFPS","maxFPS","minFPMS","_shared","shared","_system","system","TickerPlugin","sharedTicker","ticker","_ticker","render","LOW","oldTicker","Application","PREFER_ENV","WEBGL","WEBGL2","STRICT_TEXTURE_CACHE","INSTALLED","autoDetectResource","source","toLowerCase","ResourcePlugin","extendStatics","setPrototypeOf","__proto__","__extends","__","constructor","Resource","_width","_height","destroyed","internal","onResize","onUpdate","onError","bind","baseTexture","unbind","load","Promise","style","_renderer","_baseTexture","_glTexture","dispose","_source","_extension","BufferResource","_super","data","upload","renderer","glTexture","gl","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","alphaMode","UNPACK","realWidth","realHeight","texSubImage2D","target","texImage2D","internalFormat","defaultBufferOptions","scaleMode","NEAREST","RGBA","NPM","BaseTexture","resource","mipmap","anisotropicLevel","wrapMode","resourceOptions","_mipmap","_wrapMode","_scaleMode","UNSIGNED_BYTE","TEXTURE_2D","touched","isPowerOfTwo","_refreshPOT","_glTextures","dirtyId","dirtyStyleId","cacheId","valid","textureCacheIds","_batchEnabled","_batchLocation","parentTextureArray","setResource","setStyle","dirty","setSize","setRealSize","setResolution","oldResolution","event","removeFromCache","castToBaseTexture","from","strict","isFrame","_pixiId","prefix","pixiIdPrefix","addToCache","fromBuffer","buffer","FLOAT","baseTextureFromCache","_globalBatch","EventEmitter","AbstractMultiResource","itemDirtyIds","partTexture","_load","initFromArray","resources","addBaseTextureAt","addResourceAt","on","off","promises","filter","all","then","ArrayResource","urls","TEXTURE_2D_ARRAY","texture","texImage3D","texSubImage3D","BaseImageResource","sourceAny","naturalWidth","videoWidth","naturalHeight","videoHeight","noSubImage","crossOrigin","element","crossorigin","url$1","loc","parsedUrl","samePort","port","hostname","protocol","determineCrossOrigin","HTMLImageElement","complete","HTMLVideoElement","readyState","CanvasResource","OffscreenCanvas","HTMLCanvasElement","CubeResource","autoLoad","linkBaseTexture","SIDES","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP","keys","side","ImageResource","imageElement","Image","src","_process","preserveBitmap","createBitmap","createImageBitmap","bitmap","reject","completed","onload","onerror","process","cors","mode","blob","premultiplyAlpha","flag","glTextures","key","otherTex","close","SVGResource","sourceBase64","svg","_overrideWidth","_overrideHeight","_resolve","_crossorigin","SVG_XML","trim","btoa","unescape","encodeURIComponent","_loadSvg","tempImage","svgWidth","svgHeight","drawImage","getSize","svgString","sizeMatch","SVG_SIZE","size","startsWith","VideoResource","videoElement","setAttribute","firstSrc","sourceElement","mime","baseSrc","lastIndexOf","MIME_TYPES","appendChild","_autoUpdate","_isConnectedToTicker","_updateFPS","updateFPS","_msToNextUpdate","autoPlay","_onCanPlay","_onError","_deltaTime","playbackRate","HAVE_ENOUGH_DATA","HAVE_FUTURE_DATA","addEventListener","_onPlayStart","_onPlayStop","_isSourceReady","removeEventListener","_isSourcePlaying","paused","ended","autoUpdate","play","pause","ogv","mov","m4v","ImageBitmapResource","ImageBitmap","DepthResource","Framebuffer","stencil","depth","dirtyFormat","dirtySize","depthTexture","colorTextures","glFramebuffers","disposeRunner","multisample","addColorTexture","OFF","addDepthTexture","DEPTH_COMPONENT","UNSIGNED_SHORT","enableDepth","enableStencil","destroyDepthTexture","BaseRenderTexture","clearColor","framebuffer","maskStack","filterStack","TextureUvs","x3","y3","uvsFloat32","frame","baseFrame","tw","th","w2","h2","cX","cY","DEFAULT_UVS","removeAllHandlers","tex","Texture","orig","anchor","noFrame","_frame","_uvs","uvMatrix","_rotate","defaultAnchor","_updateID","onBaseTextureUpdated","updateUvs","destroyBase","clonedFrame","clonedOrig","clonedTexture","fromURL","fromLoader","imageUrl","textureFromCache","xNotFit","yNotFit","relationship","errorX","errorY","_EMPTY","_WHITE","fillStyle","fillRect","RenderTexture","baseRenderTexture","filterFrame","filterPoolKey","resizeBaseTexture","rest","RenderTexturePool","textureOptions","texturePool","enableFullScreen","_pixelsWidth","_pixelsHeight","createTexture","getOptimalTexture","minWidth","minHeight","renderTexture","pop","getFilterTexture","input","filterTexture","returnTexture","returnFilterTexture","destroyTextures","textures","setScreenSize","SCREEN_KEY","Attribute","normalized","stride","instance","UID$4","Buffer","_static","_glBuffers","static","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","map$1","byteSizeMap$1","UID$3","Geometry","buffers","attributes","indexBuffer","glVertexArrayObjects","instanced","instanceCount","refCount","addAttribute","ids","bufferIndex","getAttribute","getBuffer","addIndex","getIndex","interleave","arrays","sizes","interleavedBuffer","attribute","outSize","views","ArrayBuffer","littleOffset","interleaveTypedArrays","geometry","attrib","merge","geometries","geometryOut","offsets","offset","offset2","bufferIndexToCount","indexBufferData","Quad","QuadUv","vertices","uvs","vertexBuffer","uvBuffer","targetTextureFrame","destinationFrame","invalidate","UID$2","UniformGroup","uniforms","isStatic","isUbo","group","syncUniforms","ubo","UNIFORM_BUFFER","autoManage","_ubo","uboFrom","FilterState","legacy","sourceFrame","bindingSourceFrame","bindingDestinationFrame","filters","tempMatrix$2","FilterSystem","defaultFilterStack","statePool","quad","quadUv","tempRect","activeState","globalUniforms","outputFrame","inputSize","inputPixel","inputClamp","filterArea","filterClamp","forceClear","useMaxPadding","state","renderTextureSystem","padding","autoFit","sourceFrameProjected","projection","transformAABB","roundFrame","getOptimalFilterTexture","lastState","blit","BLEND","flip","flop","CLEAR","bindAndClear","clearMode","stateSystem","autoClear","stateId","BLIT","applyFilter","output","uSampler","filterGlobals","shader","program","attributeData","aTextureCoord","draw","TRIANGLES","TRIANGLE_STRIP","calculateSpriteMatrix","outputMatrix","sprite","_texture","mappedMatrix","TEMP_MATRIX","swap","emptyPool","rect","ObjectRenderer","flush","_object","BatchSystem","emptyRenderer","currentRenderer","setObjectRenderer","objectRenderer","reset","copyBoundTextures","maxTextures","boundTextures","boundArray","texArray","batchId","elements","bound","CONTEXT_UID_COUNTER","ContextSystem","webGLVersion","supports","uint32Indices","handleContextLost","handleContextRestored","isContextLost","contextChange","CONTEXT_UID","initFromContext","validateContext","runners","initFromOptions","createContext","getExtensions","common","loseContext","getExtension","anisotropicFiltering","floatTextureLinear","s3tc","s3tc_sRGB","etc","etc1","pvrtc","atc","astc","drawBuffers","vertexArrayObject","uint32ElementIndex","floatTexture","textureHalfFloat","textureHalfFloatLinear","colorBufferFloat","preventDefault","setTimeout","restoreContext","useProgram","postrender","renderingToScreen","getContextAttributes","isWebGl2","WebGL2RenderingContext","hasuint32","GLFramebuffer","msaaBuffer","blitFramebuffer","mipLevel","tempRectangle","FramebufferSystem","managedFramebuffers","unknownFramebuffer","msaaSamples","disposeAll","viewport","hasMRT","writeDepthTexture","nativeDrawBuffersExtension_1","nativeDepthTextureExtension","WEBGL_LEGACY","activeTextures","drawBuffersWEBGL","getInternalformatParameter","RENDERBUFFER","RGBA8","SAMPLES","fbo","initFramebuffer","bindFramebuffer","FRAMEBUFFER","updateFramebuffer","resizeFramebuffer","mipWidth","mipHeight","setViewport","g","mask","COLOR","DEPTH","createFramebuffer","detectSamples","bindRenderbuffer","renderbufferStorageMultisample","DEPTH24_STENCIL8","renderbufferStorage","DEPTH_STENCIL","parentTexture","canMultisampleFramebuffer","createRenderbuffer","framebufferRenderbuffer","COLOR_ATTACHMENT0","deleteRenderbuffer","framebufferTexture2D","DEPTH_ATTACHMENT","DEPTH_STENCIL_ATTACHMENT","samples","res","sourcePixels","destPixels","colorTexture","sameSize","READ_FRAMEBUFFER","COLOR_BUFFER_BIT","disposeFramebuffer","contextLost","deleteFramebuffer","forceStencil","w","h","byteSizeMap","GeometrySystem","_activeGeometry","_activeVao","hasVao","hasInstance","canUseUInt32ElementIndex","managedGeometries","nativeVaoExtension_1","createVertexArray","createVertexArrayOES","bindVertexArray","vao","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","instanceExt_1","vertexAttribDivisor","vertexAttribDivisorANGLE","drawElementsInstanced","e","drawElementsInstancedANGLE","drawArraysInstanced","drawArraysInstancedANGLE","vaos","incRefCount","initGeometryVao","activateVao","updateBuffers","bufferSystem","checkCompatibility","geometryAttributes","shaderAttributes","getSignature","attribs","strings","glPrograms","generateProgram","signature","vaoObjectHash","tempStride","tempStart","attribSize","disposeGeometry","buf","vaoId","lastBuffer","glBuffer","enableVertexAttribArray","vertexAttribPointer","byteSize","glType","UNSIGNED_INT","drawElements","drawArrays","MaskData","maskObject","autoDetect","pooled","isMaskData","enabled","colorMask","_filters","_stencilCounter","_scissorCounter","_scissorRect","_scissorRectLocal","_colorMask","_target","copyCountersOrReset","maskAbove","compileShader","createShader","shaderSource","logPrettyShaderError","shaderSrc","getShaderSource","line","shaderLog","getShaderInfoLog","splitShader","dedupe","lineNumbers","replace","logArgs","number","fragmentSourceToLog","error","booleanArray","maxFragmentPrecision","unknownContext","getMaxFragmentPrecision","getTestContext","getShaderPrecisionFormat","shaderFragment","FRAGMENT_SHADER","HIGH_FLOAT","precision","setPrecision","requestedPrecision","maxSupportedPrecision","substring","GLSL_TO_SIZE","float","vec2","vec3","vec4","int","ivec2","ivec3","ivec4","uint","uvec2","uvec3","uvec4","bool","bvec2","bvec3","bvec4","mat2","mat3","mat4","sampler2D","mapSize","GL_TABLE","GL_TO_GLSL_TYPES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_2D","SAMPLER_CUBE","INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_CUBE","SAMPLER_2D_ARRAY","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D_ARRAY","mapType","typeNames","tn","uniformParsers","code","uniform","codeUbo","GLSL_TO_SINGLE_SETTERS_CACHED","samplerCube","sampler2DArray","GLSL_TO_ARRAY_SETTERS","unsafeEval","fragTemplate","generateIfTestSrc","maxIfs","UID$1","nameCache","Program","vertexSrc","fragmentSrc","defaultVertexSrc","defaultFragmentSrc","Shader","uniformBindCount","uniformGroup","checkUniformExists","State","blendMode","polygonOffset","blend","depthMask","_blendMode","_polygonOffset","clockwiseFrontFace","culling","for2d","depthTest","Filter","filterManager","_currentState","_resolution","tempMat","TextureMatrix","clampMargin","mapCoord","uClampFrame","uClampOffset","_textureID","clampOffset","isSimple","multiplyUvs","forceUpdate","texBase","margin","SpriteMaskFilter","maskSprite","maskMatrix","_maskSprite","renderable","npmAlpha","otherMatrix","alpha","worldAlpha","maskClamp","MaskSystem","enableScissor","alphaMaskPool","maskDataPool","alphaMaskIndex","setMaskStack","scissor","maskDataOrTarget","maskData","detect","SPRITE","SCISSOR","STENCIL","pushSpriteMask","pushColorMask","popSpriteMask","popColorMask","maskCurrent","isSprite","testScissor","alphaMaskFilter","stashFilterArea","currColorMask","nextColorMask","AbstractMaskSystem","glConst","getStackLength","curStackLen","newStackLen","disable","enable","_useCurrent","tempMatrix$1","rectPool","ScissorSystem","SCISSOR_TEST","calcScissorRect","prevData","roundFrameToPixels","isMatrixRotated","isFastRect","StencilSystem","STENCIL_TEST","prevMaskCount","clearStencil","STENCIL_BUFFER_BIT","stencilFunc","EQUAL","stencilOp","KEEP","INCR","batch","DECR","ProjectionSystem","defaultFrame","projectionMatrix","root","calculateProjection","syncUniformGroup","globals","_destinationFrame","_matrix","tempRect2","RenderTextureSystem","_backgroundColorRgba","defaultMaskStack","viewportFrame","screen","clearMask","uboUpdate","_ud","_uv","_syncData","UBO_TO_SINGLE_SETTERS","GLSL_TO_STD40_SIZE","generateUniformBufferSync","uniformData","syncFunc","usedUniformDatas","sort","getUBOData","uboElements","dataLen","chunkSize","uboElement","lineUpValue","createUBOElements","funcFragments","parsed","uniformParser","size_1","rowSize","elementSize","remainder","template","Function","GLProgram","uniformGroups","uniformDirtyGroups","uniformBufferBindings","glVertShader","VERTEX_SHADER","glFragShader","webGLProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","vertexShader","fragmentShader","getShaderParameter","COMPILE_STATUS","getProgramInfoLog","logProgramError","totalAttributes","ACTIVE_ATTRIBUTES","attribData","getActiveAttrib","getAttribLocation","getAttributeData","totalUniforms","ACTIVE_UNIFORMS","getActiveUniform","getUniformData","bindAttribLocation","deleteShader","getUniformLocation","UID","defaultSyncData","textureCount","uboCount","ShaderSystem","systemCheck","cache","_uboCache","func","unsafeEvalSupported","dontSync","glProgram","setUniforms","syncData","getGlProgram","createSyncGroups","generateUniformsSync","syncUniformBufferGroup","createSyncBufferGroup","bindBufferBase","uniformBlockIndex","getUniformBlockIndex","uniformBlockBinding","uboData","preFix","disposeShader","StateSystem","_blendEq","setBlend","setOffset","setCullFace","setDepthTest","setFrontFace","setDepthMask","checks","defaultState","blendModes","ONE","ONE_MINUS_SRC_ALPHA","MULTIPLY","DST_COLOR","ONE_MINUS_SRC_COLOR","OVERLAY","DARKEN","LIGHTEN","COLOR_DODGE","COLOR_BURN","HARD_LIGHT","SOFT_LIGHT","DIFFERENCE","EXCLUSION","HUE","SATURATION","LUMINOSITY","SRC_ALPHA","SRC_IN","DST_ALPHA","ZERO","SRC_OUT","ONE_MINUS_DST_ALPHA","SRC_ATOP","DST_OVER","DST_IN","DST_OUT","DST_ATOP","XOR","SUBTRACT","FUNC_REVERSE_SUBTRACT","FUNC_ADD","mapWebGLBlendModesToPixi","diff","forceState","updateCheck","checkBlendMode","checkPolygonOffset","POLYGON_OFFSET_FILL","DEPTH_TEST","CULL_FACE","frontFace","setBlendMode","blendFunc","blendFuncSeparate","blendEquationSeparate","setPolygonOffset","UNPACK_FLIP_Y_WEBGL","TextureGCSystem","checkCount","maxIdle","checkCountMax","MANUAL","tm","managedTextures","wasRemoved","destroyTexture","unload","displayObject","children","GLTexture","samplerType","TextureSystem","currentLocation","_unknownBoundTextures","unknownTexture","hasIntegerTextures","internalFormats","table","RGB","RGB8","RG","RG8","RED","R8","RGBA_INTEGER","RGBA8UI","RGB_INTEGER","RGB8UI","RG_INTEGER","RG8UI","RED_INTEGER","R8UI","ALPHA","LUMINANCE","LUMINANCE_ALPHA","BYTE","_c","RGBA8_SNORM","RGB8_SNORM","RG8_SNORM","R8_SNORM","RGBA8I","RGB8I","RG8I","R8I","_d","RGBA16UI","RGB16UI","RG16UI","R16UI","DEPTH_COMPONENT16","SHORT","_e","RGBA16I","RGB16I","RG16I","R16I","_f","RGBA32UI","RGB32UI","RG32UI","R32UI","DEPTH_COMPONENT24","_g","RGBA32I","RGB32I","RG32I","R32I","_h","RGBA32F","RGB32F","RG32F","R32F","DEPTH_COMPONENT32F","HALF_FLOAT","_j","RGBA16F","RGB16F","RG16F","R16F","UNSIGNED_SHORT_5_6_5","_k","RGB565","UNSIGNED_SHORT_4_4_4_4","_l","RGBA4","UNSIGNED_SHORT_5_5_5_1","_m","RGB5_A1","UNSIGNED_INT_2_10_10_10_REV","_o","RGB10_A2","RGB10_A2UI","UNSIGNED_INT_10F_11F_11F_REV","_p","R11F_G11F_B10F","UNSIGNED_INT_5_9_9_9_REV","_q","RGB9_E5","UNSIGNED_INT_24_8","_r","FLOAT_32_UNSIGNED_INT_24_8_REV","_s","DEPTH32F_STENCIL8","_t","_u","_v","_w","mapTypeAndFormatToInternalFormat","getParameter","MAX_TEXTURE_IMAGE_UNITS","emptyTextures","emptyTexture2D","bindTexture","texParameteri","TEXTURE_MAG_FILTER","TEXTURE_MIN_FILTER","textureGC","initTexture","activeTexture","TEXTURE0","updateTexture","updateTextureStyle","ensureSamplerType","initTextureType","skipRemove","deleteTexture","ON_MANUAL","generateMipmap","TEXTURE_WRAP_S","TEXTURE_WRAP_T","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","anisotropicExt","level","MAX_TEXTURE_MAX_ANISOTROPY_EXT","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","tempMatrix","AbstractRenderer","UNKNOWN","_backgroundColor","_backgroundColorString","transparent","_lastObjectRendered","plugins","initPlugins","staticMap","o","desiredScreenWidth","desiredScreenHeight","screenWidth","screenHeight","generateTexture","region","manualRegion","getOwnPropertySymbols","propertyIsEnumerable","__rest","getLocalBounds","skipUpdateTransform","parent","removeView","parentNode","removeChild","thisAny","_tempDisplayObjectParent","hex","hexString","hex2string","GLBuffer","updateID","byteLength","BufferSystem","managedBuffers","boundBufferBases","createGLBuffer","bindBuffer","bindBufferRange","bufferSubData","drawType","STATIC_DRAW","DYNAMIC_DRAW","bufferData","deleteBuffer","createBuffer","Renderer","prerender","addSystem","__plugins","premultipliedAlpha","powerPreference","args","log","sayHello","contextOptions","failIfMajorPerformanceCaveat","success","FRAMEBUFFER_BINDING","DRAW_FRAMEBUFFER_BINDING","DRAW_FRAMEBUFFER","ClassRef","isLost","cacheParent","enableTempParent","disableTempParent","extract","registerPlugin","pluginName","ctor","extensions$1","RendererPlugin","System","BatchDrawCall","BatchTextureArray","ViewableBuffer","sizeOrBuffer","rawBinaryData","uint32View","float32View","_int8View","Int8Array","_uint8View","_int16View","Int16Array","_uint16View","_int32View","sizeOf","AbstractBatchRenderer","shaderGenerator","geometryClass","vertexSize","_vertexCount","_indexCount","_bufferedElements","_bufferedTextures","_bufferSize","_shader","_packedGeometries","_packedGeometryPoolSize","_flushId","_aBuffers","_iBuffers","MAX_TEXTURES","onPrerender","_dcIndex","_aIndex","_iIndex","_attributeBuffer","_indexBuffer","_tempBoundTextures","checkMaxIfStatementsInShader","generateShader","initFlushBuffers","_drawCallPool","_textureArrayPool","MAX_SPRITES","MAX_TA","vertexData","indices","buildTexturesAndDrawCalls","textureArrays","touch","TICK","countTexArrays","buildDrawCalls","finish","drawCalls","dcIndex","aIndex","iIndex","drawCall","spriteBlendMode","packInterleavedGeometry","bindAndClearTexArray","textureSystem","updateGeometry","packedGeometries","attributeBuffer","_buffer","drawBatches","dcCount","curTexArray","getAttributeBuffer","getIndexBuffer","roundedP2","roundedSizeIndex","roundedSize","packedVertices","indicies","textureId","argb","tint","R","G","B","premultiplyTint","_tintRGB","BatchShaderGenerator","programCache","defaultGroupCache","sampleValues","uSamplers","generateSampleSrc","translationMatrix","default","BatchGeometry","BatchPluginFactory","vertex","defaultVertex","fragment","defaultFragment","BatchPlugin","BatchRenderer","_resources","systems","_systems","SORTABLE_CHILDREN","Bounds","minX","minY","maxX","maxY","isEmpty","getRectangle","EMPTY","addPoint","point","addPointMatrix","addQuad","addFrame","addFrameMatrix","addVertexData","beginOffset","endOffset","addVertices","addVerticesMatrix","padX","padY","rawX","rawY","addBounds","bounds","addBoundsMask","_minX","_minY","_maxX","_maxY","addBoundsMatrix","addBoundsArea","area","addFramePad","DisplayObject","tempDisplayObjectParent","visible","cullable","cullArea","_lastSortedIndex","_zIndex","_enabledFilters","_bounds","_localBounds","_boundsID","_boundsRect","_localBoundsRect","_mask","_maskRefCount","isMask","mixin","propertyName","getOwnPropertyDescriptor","_recursivePostUpdateTransform","skipUpdate","calculateBounds","transformRef","parentRef","worldBounds","worldBoundsID","toGlobal","displayObjectUpdateTransform","toLocal","setParent","container","addChild","_options","hitArea","interactive","interactiveChildren","removeAllListeners","TemporaryDisplayObject","myParent","sortDirty","sortChildren","zIndex","Container","sortableChildren","onChildrenChange","_length","child","addChildAt","swapChildren","child2","index1","getChildIndex","index2","setChildIndex","currentIndex","getChildAt","removeChildAt","removeChildren","beginIndex","endIndex","removed","begin","range","RangeError","sortRequired","_calculateBounds","skipChildrenUpdate","_renderWithCulling","_render","childCullable","renderAdvanced","destroyChildren","oldChildren","containerUpdateTransform","__pow","pow","__async","__this","__arguments","generator","fulfilled","step","rejected","throw","done","CubismConfig","CubismConfig2","config","config2","supportMoreMaskDivisions","setOpacityFromMotion","LOG_LEVEL_VERBOSE","LOG_LEVEL_WARNING","LOG_LEVEL_ERROR","LOG_LEVEL_NONE","logLevel","sound","motionSync","motionFadingDuration","idleMotionFadingDuration","expressionFadingDuration","preserveExpressionOnMotion","cubism4","logger","tag","_len","messages","_key","concat","_len2","_key2","_len3","_key3","clamp","num","lower","upper","copyProperty","to","fromKey","toKey","copyArray","applyMixins","derivedCtor","baseCtors","baseCtor","getOwnPropertyNames","ExpressionManager","super","expressions","reserveExpressionIndex","defaultExpression","createExpression","currentExpression","stopAllExpressions","loadExpression","definitions","expression","_loadExpression","setRandomExpression","availableIndices","random","setExpression","resetExpression","_setExpression","restoreExpression","getExpressionIndex","model","isFinished","updateParameters","MAX_SPEED","ACCELERATION_TIME","FocusController","targetX","targetY","focus","instant","dt","maxSpeed","ax","ay","maxA","maxV","ModelSettings","json","url2","TypeError","lastSlashIndex","folderName","resolveURL","path","replaceFiles","replacer","moc","pose","physics","getDefinedFiles","files","file","validateFiles","assertFileExists","expectedFile","shouldThrow","actualPath","MotionPriority","MotionPriority2","MotionState","debug","currentPriority","reservePriority","reserve","currentGroup","dump","reservedGroup","reservedIndex","reservedIdleGroup","reservedIdleIndex","setReservedIdle","setReserved","motion","setCurrent","isActive","shouldRequestIdleMotion","shouldOverrideExpression","requestedGroup","requestedIndex","SoundManager","volume","_volume","audios","audio","onFinish","Audio","preload","catch","dispatchEvent","ErrorEvent","removeAttribute","MotionManager","motionGroups","playing","idleMotionGroup","groups","idle","setupMotions","stopAllMotions","motionPreload","loadMotion","_loadMotion","startMotion","_0","_1","definition","currentAudio","soundURL","getSoundFile","readyToPlay","getMotionName","expressionManager","_startMotion","startRandomMotion","groupDefs","_stopAllMotions","IDLE","tempBounds","InternalModel","focusController","originalWidth","originalHeight","drawingMatrix","hitAreas","textureFlipY","setupLayout","setupHitAreas","self","layout","getLayout","offsetX","centerX","offsetY","centerY","getHitAreaDefs","def","hitTest","hitAreaName","isHit","drawIndex","getDrawableBounds","getDrawableVertices","motionManager","NetworkError","status","aborted","_XHRLoader","createXHR","xhr","XMLHttpRequest","allXhrSet","xhrSet","xhrMap","Set","listeners","cancelXHRs","open","responseType","response","onabort","onloadend","delete","abort","release","WeakMap","XHRLoader","runMiddlewares","middleware","err","err2","loader","send","Live2DLoader","middlewares","TAG","urlToJSON","live2dModel","jsonToSettings","runtime","Live2DFactory","findRuntime","createModelSettings","waitUntilReady","ready","setupOptionals","internalModel","tasks","createPose","coreModel","createPhysics","setupEssentials","live2DModel","textureLoadings","_live2d_load","errorHandler","createInternalModel","modelData","isValidMoc","createCoreModel","_Live2DFactory","registerRuntime","runtimes","setupLive2DModel","textureLoaded","modelLoaded","readyEventEmitted","live2DModelMiddlewares","handleError","releaseTasks","motionTasksMap","taskGroup","getMotionFile","motionDataType","_a2","taskGroup2","createMotion","expressionTasksMap","getExpressionFile","tasks2","onTap","tap","global","onPointerMove","Live2DTransform","tempPoint","tickerRef","Live2DModel","onAnchorChange","glContextID","elapsedTime","fromSync","onLoad","registerTicker","tickerClass","PIXI","onTickerUpdate","autoInteract","toModelPosition","radian","hitAreaNames","containsPoint","registerInteraction","interaction","shouldUpdateTexture","updateWebGLContext","internalTransform","unregisterInteraction","_autoInteract","manager","interactionManager","_FileLoader","settingsURL","filePath","resolved","filesMap","fileMap","definedFile","decodeURI","actualFile","find","webkitRelativePath","URL","createObjectURL","_objectURL","createSettings","settingsFile","endsWith","settingsText","readText","settingsJSON","JSON","reader","FileReader","readAsText","FileLoader","factory","File","encodeURI","objectURL","revokeObjectURL","resourceObjectURL","values","unshift","_ZipLoader","unzip","filePaths","getFilePaths","requiredFilePaths","getFiles","settingsFilePath","zipReader","paths","releaseReader","ZipLoader","ZIP_PROTOCOL","sourceURL","zipBlob","Live2D","originalUpdateParam","Live2DMotion","updateParam","entry","onFinishHandler","Live2DExpression","AMotion","params","setFadeIn","fade_in","setFadeOut","fade_out","calc","updateParamExe","weight","motionQueueEnt","setParamFloat","Cubism2ExpressionManager","queueManager","MotionQueueManager","findIndex","Cubism2MotionManager","motions","defaultFadingDuration","Live2DEyeBlink","blinkInterval","closingDuration","closedDuration","openingDuration","eyeState","eyeParamValue","closedTimer","nextBlinkTimeLeft","leftParam","getParamIndex","rightParam","setEyeParams","tempMatrixArray","Cubism2InternalModel","drawDataCount","disableCulling","eyeBlink","eyeballXParamIndex","eyeballYParamIndex","angleXParamIndex","angleYParamIndex","angleZParamIndex","bodyAngleXParamIndex","breathParamIndex","initParams","_ref","initOpacities","_ref2","setPartsOpacity","saveParam","getModelContext","_$aS","drawParamWebGL","clipManager","originalSetupClip","setupClip","modelContext","drawParam","getCanvasWidth","getCanvasHeight","commonKey","firstDraw","setGL","glno","prop","WebGLBuffer","curFrameNo","getMaskRenderTexture","setTexture","getDrawDataIndex","getDrawableIDs","drawData","getDrawData","getDrawDataID","getDrawableIndex","getTransformedPoints","motionUpdated","updateFocus","updateNaturalMovements","loadParam","addToParamFloat","setMatrix","Cubism2ModelSettings","isValidJSON","copy","every","entries","SRC_TYPE_MAP","PhysicsHair","Src","SRC_TO_X","SRC_TO_Y","SRC_TO_G_ANGLE","TARGET_TYPE_MAP","Live2DPhysics","physicsHairs","physics_hair","physicsHair","setup","regist","mass","_ref3","ptype","addSrcParam","targets","_ref4","addTargetParam","elapsed","Live2DPartsParam","paramIndex","partsIndex","link","initIndex","getPartsDataIndex","PartsDataID","getID","Live2DPose","opacityAnimDuration","partsGroups","parts_visible","_ref5","_ref6","parts","l","getParamFloat","normalizePartsOpacityGroup","partsGroup","phi","visibleOpacity","visibleIndex","_ref7","originalOpacity","getPartsOpacity","_ref8","opacity","copyOpacity","_ref9","_ref0","partsIndex2","partGroup","String","fromCharCode","Live2DModelWebGL","loadModel","getError","Live2DCubismCore","CubismVector2","vector2","ret","substract","multiply","multiplyByScaler","scalar","division","divisionByScalar","getLength","getDistanceWith","dot","normalize","isEqual","rhs","isNotEqual","_CubismMath","cbrt","cx","isNegativeNumber","exp","getEasingSine","degreesToRadian","degrees","radianToDegrees","directionToRadian","directionToDegrees","degree","radianToDirection","totalAngle","quadraticEquation","Epsilon","cardanoAlgorithmForBezier","ba","ca","p3","q","q2","discriminant","center","threshold","mp3","mp33","cosphi","acos","t1","root12","root2","root3","u12","sd","root1","CubismMath","CubismMatrix44","_tr","loadIdentity","dst","tr","getArray","getScaleX","getScaleY","getTranslateX","getTranslateY","transformX","transformY","invertTransformX","invertTransformY","translateRelative","tr1","translateX","translateY","scaleRelative","multiplyByMatrix","m","cloneMatrix","CubismRenderer","initialize","_model","drawModel","getModel","doDrawModel","setMvpMatrix","matrix44","_mvpMatrix4x4","getMvpMatrix","setModelColor","red","green","blue","_modelColor","A","getModelColor","setIsPremultipliedAlpha","_isPremultipliedAlpha","isPremultipliedAlpha","setIsCulling","_isCulling","isCulling","setAnisotropy","_anisortopy","getAnisotropy","CubismTextureColor","CubismBlendMode","CubismBlendMode2","s_option","s_isStarted","s_isInitialized","Constant","CubismFramework","startUp","option","CubismLogInfo","_isStarted","Logging","csmSetLogFunction","logFunction","Version","csmGetVersion","minor","patch","versionNumber","cleanUp","CubismLogWarning","staticRelease","isStarted","isInitialized","coreLogFunction","csmGetLogFunction","getLoggingLevel","loggingLevel","LogLevel","LogLevel_Off","LogLevel2","CubismLogDebug","fmt","_len4","_key4","CubismDebug","print","LogLevel_Debug","_len5","_key5","LogLevel_Info","_len6","_key6","LogLevel_Warning","CubismLogError","_len7","_key7","LogLevel_Error","logPrint","dumpBytes","ACubismMotion","_fadeInSeconds","_fadeOutSeconds","_weight","_offsetSeconds","_firedEventValues","motionQueueEntry","userTimeSeconds","isAvailable","setIsStarted","setStartTime","setFadeInStartTime","duration","getDuration","getEndTime","setEndTime","getStartTime","fadeWeight","getFadeInStartTime","setState","doUpdateParameters","setIsFinished","setFadeInTime","fadeInSeconds","setFadeOutTime","fadeOutSeconds","getFadeOutTime","getFadeInTime","setWeight","getWeight","getLoopDuration","setOffsetTime","offsetSeconds","getFiredEvent","beforeCheckTimeSeconds","motionTimeSeconds","setFinishedMotionHandler","onFinishedMotionHandler","_onFinishedMotion","getFinishedMotionHandler","CubismExpressionMotion","_parameters","fadeInTime","FadeInTime","fadeOutTime","FadeOutTime","parameters","Parameters","parameterId","Id","Value","blendType","Blend","ExpressionBlendType","ExpressionBlendType_Multiply","ExpressionBlendType_Overwrite","ExpressionBlendType_Add","parameter","addParameterValueById","multiplyParameterValueById","setParameterValueById","ExpressionBlendType2","CubismMotionQueueEntry","_autoDelete","_available","_finished","_started","_startTimeSeconds","_fadeInStartTimeSeconds","_endTimeSeconds","_stateTimeSeconds","_stateWeight","_lastEventCheckSeconds","_motionQueueEntryHandle","_isTriggeredFadeOut","_motion","startFadeOut","newEndTimeSeconds","startTime","endTime","f","setIsAvailable","timeSeconds","getStateTime","getStateWeight","getLastCheckEventSeconds","setLastCheckEventSeconds","checkSeconds","isTriggeredFadeOut","getFadeOutSeconds","CubismMotionQueueManager","_userTimeSeconds","_eventCustomData","_motions","autoDelete","InvalidMotionQueueEntryHandleValue","isFinishedByHandle","motionQueueEntryNumber","getCubismMotionQueueEntry","setEventCallback","callback","customData","_eventCallBack","doUpdateMotion","updated","firedList","i2","Cubism4ExpressionManager","Name","CubismModelSettingsJson","Groups","HitAreas","Layout","FileReferences","Moc","Expressions","Motions","Textures","Physics","Pose","getEyeBlinkParameters","Ids","getLipSyncParameters","Cubism4ModelSettings","Sound","CubismMotionCurveTarget","CubismMotionCurveTarget2","CubismMotionSegmentType","CubismMotionSegmentType2","CubismMotionPoint","CubismMotionSegment","basePointIndex","segmentType","CubismMotionCurve","segmentCount","baseSegmentIndex","CubismMotionEvent","fireTime","CubismMotionData","loop","curveCount","eventCount","curves","segments","events","CubismMotionJson","_json","getMotionDuration","Meta","Duration","isMotionLoop","Loop","getEvaluationOptionFlag","flagType","EvaluationOptionFlag","EvaluationOptionFlag_AreBeziersRistricted","AreBeziersRestricted","getMotionCurveCount","CurveCount","getMotionFps","Fps","getMotionTotalSegmentCount","TotalSegmentCount","getMotionTotalPointCount","TotalPointCount","getMotionFadeInTime","getMotionFadeOutTime","getMotionCurveTarget","curveIndex","Curves","Target","getMotionCurveId","getMotionCurveFadeInTime","getMotionCurveFadeOutTime","getMotionCurveSegmentCount","Segments","getMotionCurveSegment","segmentIndex","getEventCount","UserDataCount","getTotalEventValueSize","TotalUserDataSize","getEventTime","userDataIndex","UserData","Time","getEventValue","EvaluationOptionFlag2","lerpPoints","linearEvaluate","bezierEvaluate","p01","p12","p23","p012","p123","bezierEvaluateCardanoInterpretation","cx1","cx2","steppedEvaluate","inverseSteppedEvaluate","evaluateCurve","motionData","curve","totalSegmentCount","pointPosition","CubismMotionSegmentType_Bezier","segment","evaluate","CubismMotion","_eyeBlinkParameterIds","_lipSyncParameterIds","_sourceFrameRate","_loopDurationSeconds","_isLoop","_isLoopFadeIn","_lastWeight","_motionData","_modelCurveIdEyeBlink","_modelCurveIdLipSync","timeOffsetSeconds","lipSyncValue","MAX_VALUE","eyeBlinkValue","MaxTargetSize","lipSyncFlags","eyeBlinkFlags","tmpFadeIn","tmpFadeOut","parameterIndex","CubismMotionCurveTarget_Model","CubismMotionCurveTarget_Parameter","getParameterIndex","sourceValue","getParameterValueByIndex","fin","fout","setParameterValueByIndex","getParameterValueById","CubismMotionCurveTarget_PartOpacity","setPartOpacityById","setIsLoop","isLoop","setIsLoopFadeIn","loopFadeIn","isLoopFadeIn","setParameterFadeInTime","setParameterFadeOutTime","getParameterFadeInTime","getParameterFadeOutTime","setEffectIds","eyeBlinkParameterIds","lipSyncParameterIds","motionJson","areBeziersRestructed","totalPointCount","segmentPosition","CubismMotionSegmentType_Linear","CubismMotionSegmentType_Stepped","CubismMotionSegmentType_InverseStepped","userdatacount","u","Cubism4MotionManager","eyeBlinkIds","lipSyncIds","caller","eventValue","CubismBreath","_breathParameters","_currentTime","setParameters","breathParameters","getParameters","deltaTimeSeconds","peak","cycle","BreathParameterData","_CubismEyeBlink","modelSetting","setBlinkingInterval","blinkingInterval","_blinkingIntervalSeconds","setBlinkingSetting","closing","closed","opening","_closingSeconds","_closedSeconds","_openingSeconds","setParameterIds","parameterIds","_parameterIds","getParameterIds","parameterValue","_blinkingState","EyeState","EyeState_Closing","_stateStartTimeSeconds","EyeState_Closed","EyeState_Opening","EyeState_Interval","_nextBlinkingTime","determinNextBlinkingTiming","EyeState_First","CloseIfZero","CubismEyeBlink","EyeState2","csmRect","getCenterX","getCenterY","getRight","getBottom","setRect","expand","s_instance","s_viewport","s_fbo","CubismClippingManager_WebGL","getChannelFlagAsColor","channelNo","_channelColors","_maskTexture","frameNo","_currentFrameNo","_clippingMaskBufferSize","_colorBuffer","CLAMP_TO_EDGE","CubismRenderTextureResource","calcClippedDrawTotalBounds","clippingContext","clippedDrawTotalMinX","clippedDrawTotalMinY","clippedDrawTotalMaxX","MIN_VALUE","clippedDrawTotalMaxY","clippedDrawCount","_clippedDrawableIndexList","clippedDrawableIndex","drawableIndex","drawableVertexCount","getDrawableVertexCount","drawableVertexes","pi","_allClippedDrawRect","_isUsing","_maskRenderTexture","_clippingContextListForMask","_clippingContextListForDraw","_tmpBoundsOnModel","_tmpMatrix","_tmpMatrixForMask","_tmpMatrixForDraw","drawableCount","drawableMasks","drawableMaskCounts","findSameClip","CubismClippingContext","addClippedDrawable","setupClippingContext","usingClipCount","clipIndex","cc","preDraw","setupLayoutBounds","clipContext","allClipedDrawRect","layoutBoundsOnTex01","_layoutBounds","MARGIN","_matrixForMask","_matrixForDraw","clipDrawCount","_clippingIdCount","clipDrawIndex","_clippingIdList","getDrawableDynamicFlagVertexPositionsDidChange","getDrawableCulling","setClippingContextBufferForMask","drawMesh","getDrawableTextureIndices","getDrawableVertexIndexCount","getDrawableVertexIndices","getDrawableVertexUvs","getDrawableOpacity","CubismBlendMode_Normal","sameCount","clipId","div","mod","curClipIndex","layoutCount","_layoutChannelNo","xpos","ypos","getColorBuffer","getClippingContextListForDraw","setClippingMaskBufferSize","getClippingMaskBufferSize","clippingDrawableIndices","clipCount","_owner","getClippingManager","setGl","CubismShader_WebGL","getInstance","deleteInstance","_shaderSets","releaseShaderProgram","setupShaderProgram","vertexCount","vertexArray","indexArray","uvArray","colorBlendMode","baseColor","matrix4x4","invertedMask","SRC_COLOR","generateShaders","clippingContextBufferForMask","getClippingContextBufferForMask","shaderSet","ShaderNames","ShaderNames_SetupMask","shaderProgram","uniform1i","samplerTexture0Location","attributePositionLocation","uv","attributeTexCoordLocation","colorChannel","uniform4f","uniformChannelFlagLocation","uniformMatrix4fv","uniformClipMatrixLocation","uniformBaseColorLocation","clippingContextBufferForDraw","getClippingContextBufferForDraw","ShaderNames_NormalPremultipliedAlpha","CubismBlendMode_Additive","ShaderNames_AddPremultipliedAlpha","CubismBlendMode_Multiplicative","ShaderNames_MultPremultipliedAlpha","TEXTURE1","samplerTexture1Location","uniformMatrixLocation","deleteProgram","loadShaderProgram","vertexShaderSrcSetupMask","fragmentShaderSrcsetupMask","vertexShaderSrc","fragmentShaderSrcPremultipliedAlpha","vertexShaderSrcMasked","fragmentShaderSrcMaskPremultipliedAlpha","fragmentShaderSrcMaskInvertedPremultipliedAlpha","vertexShaderSource","fragmentShaderSource","vertShader","compileShaderSource","fragShader","shaderType","ShaderNames2","CubismRenderer_WebGL","_clippingContextBufferForMask","_clippingContextBufferForDraw","_clippingManager","_textures","_sortedDrawableIndexList","_bufferData","isUsingMasking","getDrawableCount","getDrawableMasks","getDrawableMaskCounts","modelTextureNo","getBindedTextures","renderOrder","getDrawableRenderOrders","order","getDrawableDynamicFlagIsVisible","setClippingContextBufferForDraw","getDrawableBlendMode","getDrawableInvertedMaskBit","textureNo","indexCount","CCW","modelColorRGBA","drawtexture","doStaticRelease","setRenderState","CW","clip","Cubism4InternalModel","lipSync","breath","idParamAngleX","idParamAngleY","idParamAngleZ","idParamEyeBallX","idParamEyeBallY","idParamBodyAngleX","idParamBreath","pixelsPerUnit","centeringTransform","canvasinfo","CanvasWidth","CanvasHeight","charAt","PixelsPerUnit","getDrawableIds","saveParameters","loadParameters","startupPromise","startupRetries","CubismPose","pose3json","_fadeTimeSeconds","poseListInfo","poseCount","poseIndex","idListInfo","idCount","groupCount","groupIndex","partInfo","partData","PartData","partId","linkListInfo","Link","linkCount","linkIndex","linkPart","_partGroups","_partGroupCounts","_lastModel","partGroupCount","doFade","copyPartOpacities","partIndex","setPartOpacityByIndex","getPartOpacityByIndex","linkPartIndex","visiblePartIndex","newOpacity","assignment","getPartIndex","clonePartData","CubismModel","drawables","resetDynamicFlags","parameterCount","savedParameterCount","_savedParameters","_parameterValues","partCount","_partIds","_notExistPartId","_notExistPartOpacities","getPartCount","_partOpacities","getPartOpacityById","_notExistParameterId","_notExistParameterValues","getParameterCount","getParameterMaximumValue","maximumValues","getParameterMinimumValue","minimumValues","getParameterDefaultValue","defaultValues","addParameterValueByIndex","multiplyParameterValueByIndex","_drawableIds","drawableId","getDrawableId","renderOrders","textureIndices","dynamicFlags","Utils","hasVertexPositionsDidChangeBit","indexCounts","vertexCounts","getDrawableVertexPositions","vertexPositions","vertexUvs","opacities","constantFlags","hasIsDoubleSidedBit","hasBlendAdditiveBit","hasBlendMultiplicativeBit","hasIsInvertedMaskBit","masks","maskCounts","hasIsVisibleBit","getDrawableDynamicFlagVisibilityDidChange","hasVisibilityDidChangeBit","getDrawableDynamicFlagOpacityDidChange","hasOpacityDidChangeBit","getDrawableDynamicFlagRenderOrderDidChange","hasRenderOrderDidChangeBit","_parameterMaximumValues","_parameterMinimumValues","partIds","drawableIds","CubismMoc","mocBytes","fromArrayBuffer","createModel","cubismModel","Model","fromMoc","_moc","_modelCount","deleteModel","_release","CubismPhysicsTargetType","CubismPhysicsTargetType2","CubismPhysicsSource","CubismPhysicsSource2","CubismPhysicsParticle","initialPosition","lastPosition","lastGravity","force","velocity","CubismPhysicsSubRig","normalizationPosition","normalizationAngle","CubismPhysicsInput","CubismPhysicsOutput","destination","translationScale","CubismPhysicsRig","inputs","outputs","particles","gravity","wind","CubismPhysicsJson","getGravity","EffectiveForces","Gravity","X","Y","getWind","Wind","getSubRigCount","PhysicsSettingCount","getTotalInputCount","TotalInputCount","getTotalOutputCount","TotalOutputCount","getVertexCount","VertexCount","getNormalizationPositionMinimumValue","physicsSettingIndex","PhysicsSettings","Normalization","Position","Minimum","getNormalizationPositionMaximumValue","Maximum","getNormalizationPositionDefaultValue","Default","getNormalizationAngleMinimumValue","Angle","getNormalizationAngleMaximumValue","getNormalizationAngleDefaultValue","getInputCount","Input","getInputWeight","inputIndex","Weight","getInputReflect","Reflect","getInputType","Type","getInputSourceId","Source","getOutputCount","Output","getOutputVertexIndex","outputIndex","VertexIndex","getOutputAngleScale","Scale","getOutputWeight","getOutputDestinationId","Destination","getOutputType","getOutputReflect","getParticleCount","Vertices","getParticleMobility","vertexIndex","Mobility","getParticleDelay","Delay","getParticleAcceleration","Acceleration","getParticleRadius","Radius","getParticlePosition","PhysicsTypeTagAngle","CubismPhysics","_physicsRig","radAngle","outputValue","totalTranslation","currentSetting","currentInput","currentOutput","currentParticles","parameterMaximumValue","parameterMinimumValue","parameterDefaultValue","settingIndex","subRigCount","baseInputIndex","baseOutputIndex","baseParticleIndex","inputCount","sourceParameterIndex","getNormalizedParameterValue","reflect","updateParticles","particleCount","maximum","outputCount","particleIndex","destinationParameterIndex","translation","getValue","outParameterValue","stringify","subarray","updateOutputParameterValue","outParamIndex","setOptions","getOption","Options","physicsJson","setting","minimum","defalut","CubismPhysicsSource_X","getInputTranslationXFromNormalizedParameterValue","CubismPhysicsSource_Y","getInputTranslationYFromNormalizedParamterValue","CubismPhysicsSource_Angle","getInputAngleFromNormalizedParameterValue","targetType","CubismPhysicsTargetType_Parameter","angleScale","getOutputTranslationX","getScale","getOutputScaleTranslationX","getOutputTranslationY","getOutputScaleTranslationY","getOutputAngle","getOutputScaleAngle","particle","mobility","delay","acceleration","strand","targetTranslation","targetAngle","isInverted","normalizeParameterValue","normalizaitionPosition","parentGravity","getDefaultValue","getRangeValue","strandCount","windDirection","thresholdValue","airResistance","totalRadian","currentGravity","direction","newDirection","parameterValueMinimum","parameterValueMaximum","outputScale","valueBelowMinimum","valueExceededMaximum","parameterMinimum","parameterMaximum","parameterDefault","normalizedMinimum","normalizedMaximum","normalizedDefault","maxValue","minValue","minNormValue","maxNormValue","middleNormValue","middleValue","paramValue","pLength","releaseMoc","__moc","startUpWithRetry","LogLevel_Verbose","cause","ignored","coreModelWithMoc","has","Events","EE","addListener","emitter","evt","_events","_eventsCount","clearEvent","eventNames","names","ee","listenerCount","removeListener","prefixed","module","exports"],"sourceRoot":""}