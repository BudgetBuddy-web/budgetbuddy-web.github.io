{"version":3,"file":"static/js/37.119a2524.chunk.js","mappings":"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","sources":["pages/Dashboard.js"],"sourcesContent":["/**\n * Dashboard Page\n * Main dashboard with financial overview and charts\n * Optimized with lazy loading for charts\n */\n\nimport React, { useState, useEffect, useCallback, lazy, Suspense } from 'react';\nimport { useAuth } from '../contexts/AuthContext';\nimport { useAssistant } from '../contexts/AssistantContext';\nimport { transactionAPI, reportAPI } from '../services/api';\nimport { toast } from 'react-toastify';\nimport './Dashboard.css';\n\n// Lazy load charts to reduce initial bundle size\nconst Charts = lazy(() => import('../components/DashboardCharts'));\n\nconst Dashboard = () => {\n  const { user } = useAuth();\n  const { celebrate, worry, encourage, idle } = useAssistant();\n  const [summary, setSummary] = useState(null);\n  const [recentTransactions, setRecentTransactions] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [viewMode, setViewMode] = useState('current-month'); // 'current-month' or 'all-time'\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n  const [monthlyGoalProgress, setMonthlyGoalProgress] = useState(0); // For assistant reactions (percentage of goal achieved)\n\n  // Memoize reaction functions to avoid dependency issues\n  const triggerReactions = useCallback(() => {\n    // React based on monthly goal progress (percentage of savings goal achieved)\n    const goalProgressPercentage = monthlyGoalProgress;\n    \n    // Reactions based on progress toward savings goal\n    if (goalProgressPercentage >= 100) {\n      // Goal exceeded! - celebrate!\n      celebrate();\n    } else if (goalProgressPercentage >= 75) {\n      // Great progress (75-99%) - celebrate\n      celebrate();\n    } else if (goalProgressPercentage >= 50) {\n      // Good progress (50-74%) - idle/steady\n      idle();\n    } else if (goalProgressPercentage >= 25) {\n      // Moderate progress (25-49%) - encourage\n      encourage();\n    } else if (goalProgressPercentage >= 10) {\n      // Low progress (10-24%) - worry\n      worry();\n    } else {\n      // Very low progress (< 10%) - worry more\n      worry();\n    }\n  }, [monthlyGoalProgress, celebrate, encourage, idle, worry]);\n\n  useEffect(() => {\n    loadDashboardData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [viewMode, selectedMonth, selectedYear]); // Reload when view mode or date changes\n\n  useEffect(() => {\n    triggerReactions();\n  }, [triggerReactions]);\n\n  const loadDashboardData = async () => {\n    try {\n      // Get all transactions first\n      const transactionsRes = await transactionAPI.getAll();\n      const allTransactions = transactionsRes.data;\n      \n      // Set recent transactions\n      setRecentTransactions(allTransactions.slice(0, 5));\n      \n      // ALWAYS calculate current month's goal progress for assistant reactions\n      const currentMonth = new Date().getMonth() + 1;\n      const currentYear = new Date().getFullYear();\n      const currentMonthStart = new Date(currentYear, currentMonth - 1, 1);\n      const currentMonthEnd = new Date(currentYear, currentMonth, 0, 23, 59, 59);\n      \n      const currentMonthTransactions = allTransactions.filter(t => {\n        const transactionDate = new Date(t.date);\n        return transactionDate >= currentMonthStart && transactionDate <= currentMonthEnd;\n      });\n      \n      const currentMonthIncome = currentMonthTransactions\n        .filter(t => t.type === 'income')\n        .reduce((sum, t) => sum + t.amount, 0);\n      \n      const currentMonthExpenses = currentMonthTransactions\n        .filter(t => t.type === 'expense')\n        .reduce((sum, t) => sum + t.amount, 0);\n      \n      const currentMonthSavings = currentMonthIncome - currentMonthExpenses;\n      const monthlySavingsGoal = user?.savingsGoal || 20000;\n      \n      // Calculate goal progress percentage (how much of the goal is achieved)\n      const goalProgress = monthlySavingsGoal > 0 \n        ? (currentMonthSavings / monthlySavingsGoal) * 100 \n        : 0;\n      \n      // Set monthly goal progress for assistant reactions\n      setMonthlyGoalProgress(goalProgress);\n      \n      // Calculate summary based on view mode\n      if (viewMode === 'all-time') {\n        // Calculate all-time totals from all transactions\n        const totalIncome = allTransactions\n          .filter(t => t.type === 'income')\n          .reduce((sum, t) => sum + t.amount, 0);\n        \n        const totalExpenses = allTransactions\n          .filter(t => t.type === 'expense')\n          .reduce((sum, t) => sum + t.amount, 0);\n        \n        const balance = totalIncome - totalExpenses;\n        \n        // Category breakdown\n        const categoryBreakdown = {};\n        allTransactions\n          .filter(t => t.type === 'expense')\n          .forEach(t => {\n            categoryBreakdown[t.category] = (categoryBreakdown[t.category] || 0) + t.amount;\n          });\n        \n        // Calculate savings\n        const savingsGoal = user?.allTimeGoal || 20000;\n        const savings = balance;\n        const savingsPercentage = totalIncome > 0 ? ((savings / totalIncome) * 100) : 0;\n        \n        // Generate insights\n        const insights = [];\n        if (savings >= savingsGoal) {\n          insights.push(`Excellent! You saved ₹${savings.toFixed(2)}, exceeding your goal by ₹${(savings - savingsGoal).toFixed(2)}`);\n        } else if (savings > 0) {\n          insights.push(`You saved ₹${savings.toFixed(2)} (${savingsPercentage.toFixed(2)}% of income)`);\n        } else if (savings < 0) {\n          insights.push(`Warning: You spent ₹${Math.abs(savings).toFixed(2)} more than you earned`);\n        }\n        \n        const highestCategory = Object.entries(categoryBreakdown)\n          .sort((a, b) => b[1] - a[1])[0];\n        if (highestCategory) {\n          insights.push(`Your highest expense category is ${highestCategory[0]} (₹${highestCategory[1].toFixed(2)})`);\n        }\n        \n        setSummary({\n          period: {\n            display: 'All Time'\n          },\n          summary: {\n            totalIncome,\n            totalExpenses,\n            balance,\n            savingsGoal,\n            savings,\n            savingsPercentage\n          },\n          categoryBreakdown,\n          insights,\n          transactionCount: {\n            income: allTransactions.filter(t => t.type === 'income').length,\n            expense: allTransactions.filter(t => t.type === 'expense').length,\n            total: allTransactions.length\n          }\n        });\n      } else {\n        // Get current month summary from API\n        const summaryRes = await reportAPI.getSummary({\n          month: selectedMonth,\n          year: selectedYear\n        });\n        setSummary(summaryRes.data);\n      }\n    } catch (error) {\n      toast.error('Failed to load dashboard data');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"loading\"><div className=\"spinner\"></div></div>;\n  }\n\n  if (!summary) {\n    return <div className=\"container\">No data available</div>;\n  }\n\n  const { totalIncome, totalExpenses, balance, savingsGoal, savings, savingsPercentage } = summary.summary;\n  const { categoryBreakdown, insights } = summary;\n\n  // Ensure all values are numbers with defaults\n  const safeIncome = Number(totalIncome) || 0;\n  const safeExpenses = Number(totalExpenses) || 0;\n  const safeBalance = Number(balance) || 0;\n  const safeSavingsGoal = Number(savingsGoal) || 20000;\n  const safeSavings = Number(savings) || 0;\n  const safeSavingsPercentage = Number(savingsPercentage) || 0;\n\n  // Calculate progress toward savings goal\n  const goalProgress = safeSavingsGoal > 0 ? (safeSavings / safeSavingsGoal) * 100 : 0;\n\n  return (\n    <div className=\"dashboard\">\n      <div className=\"dashboard-header\">\n        <div>\n          <h1>Welcome back, {user?.name}! 👋</h1>\n          <p>Here's your financial overview</p>\n        </div>\n        <div className=\"header-controls\">\n          <div className=\"view-toggle\">\n            <button \n              className={`toggle-btn ${viewMode === 'current-month' ? 'active' : ''}`}\n              onClick={() => setViewMode('current-month')}\n            >\n              📅 This Month\n            </button>\n            <button \n              className={`toggle-btn ${viewMode === 'all-time' ? 'active' : ''}`}\n              onClick={() => setViewMode('all-time')}\n            >\n              🌍 All Time\n            </button>\n          </div>\n          \n          {viewMode === 'current-month' && (\n            <div className=\"month-selector\">\n              <select\n                value={selectedMonth}\n                onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\n                className=\"month-select\"\n              >\n                {Array.from({ length: 12 }, (_, i) => (\n                  <option key={i + 1} value={i + 1}>\n                    {new Date(2000, i, 1).toLocaleString('default', { month: 'short' })}\n                  </option>\n                ))}\n              </select>\n              <select\n                value={selectedYear}\n                onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n                className=\"year-select\"\n              >\n                {Array.from({ length: 5 }, (_, i) => {\n                  const year = new Date().getFullYear() - i;\n                  return <option key={year} value={year}>{year}</option>;\n                })}\n              </select>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n            {/* Summary Cards */}\n      <div className=\"grid grid-4 mb-4\">\n        <div className=\"stat-card income\">\n          <div className=\"stat-icon\">💰</div>\n          <div className=\"stat-info\">\n            <p className=\"stat-label\">Total Income</p>\n            <h2 className=\"stat-value\">₹{safeIncome.toFixed(2)}</h2>\n          </div>\n        </div>\n\n        <div className=\"stat-card expense\">\n          <div className=\"stat-icon\">💸</div>\n          <div className=\"stat-info\">\n            <p className=\"stat-label\">Total Expenses</p>\n            <h2 className=\"stat-value\">₹{safeExpenses.toFixed(2)}</h2>\n          </div>\n        </div>\n\n        <div className=\"stat-card balance\">\n          <div className=\"stat-icon\">💵</div>\n          <div className=\"stat-info\">\n            <p className=\"stat-label\">Balance</p>\n            <h2 className=\"stat-value\">₹{safeBalance.toFixed(2)}</h2>\n          </div>\n        </div>\n\n        <div className=\"stat-card goal\">\n          <div className=\"stat-icon\">🎯</div>\n          <div className=\"stat-info\">\n            <p className=\"stat-label\">Savings Goal</p>\n            <h2 className=\"stat-value\">₹{safeSavingsGoal.toFixed(2)}</h2>\n          </div>\n        </div>\n      </div>\n\n      {/* Savings Progress */}\n      <div className=\"card mb-4\">\n        <h3 className=\"card-title\">Savings Progress</h3>\n        <div className=\"budget-progress\">\n          <div className=\"progress-bar\">\n            <div \n              className={`progress-fill ${goalProgress >= 100 ? 'good-savings' : goalProgress < 10 ? 'low-savings' : ''}`}\n              style={{ width: `${Math.min(goalProgress, 100)}%` }}\n            ></div>\n          </div>\n          <div className=\"progress-info\">\n            <span>{goalProgress.toFixed(1)}% of goal achieved</span>\n            <span>₹{safeSavings.toFixed(2)} saved / ₹{safeSavingsGoal.toFixed(2)} goal</span>\n          </div>\n          <div className=\"progress-info\" style={{ marginTop: '8px', fontSize: '14px', color: '#666' }}>\n            <span>💡 Savings rate: {safeSavingsPercentage.toFixed(2)}% of income</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Insights */}\n      {insights.length > 0 && (\n        <div className=\"card mb-4\">\n          <h3 className=\"card-title\">💡 Insights</h3>\n          <ul className=\"insights-list\">\n            {insights.map((insight, index) => (\n              <li key={index}>{insight}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Charts - Lazy loaded for performance */}\n      <Suspense fallback={\n        <div className=\"grid grid-2 mb-4\">\n          <div className=\"card\">\n            <h3 className=\"card-title\">Category Breakdown</h3>\n            <div style={{ textAlign: 'center', padding: '40px' }}>Loading charts...</div>\n          </div>\n          <div className=\"card\">\n            <h3 className=\"card-title\">Income vs Expenses</h3>\n            <div style={{ textAlign: 'center', padding: '40px' }}>Loading charts...</div>\n          </div>\n        </div>\n      }>\n        <Charts \n          categoryBreakdown={categoryBreakdown}\n          totalIncome={totalIncome}\n          totalExpenses={totalExpenses}\n        />\n      </Suspense>\n\n      {/* Recent Transactions */}\n      <div className=\"card\">\n        <h3 className=\"card-title\">Recent Transactions</h3>\n        {recentTransactions.length > 0 ? (\n          <div className=\"transactions-list\">\n            {recentTransactions.map((transaction) => (\n              <div key={transaction._id} className=\"transaction-item\">\n                <div className=\"transaction-icon\">\n                  {transaction.type === 'income' ? '💰' : '💸'}\n                </div>\n                <div className=\"transaction-details\">\n                  <p className=\"transaction-category\">{transaction.category}</p>\n                  <p className=\"transaction-note\">{transaction.note || 'No description'}</p>\n                </div>\n                <div className={`transaction-amount ${transaction.type}`}>\n                  {transaction.type === 'income' ? '+' : '-'}₹{transaction.amount.toFixed(2)}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <p className=\"text-center\">No transactions yet</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"names":["Charts","lazy","Dashboard","user","useAuth","celebrate","worry","encourage","idle","useAssistant","summary","setSummary","useState","recentTransactions","setRecentTransactions","loading","setLoading","viewMode","setViewMode","selectedMonth","setSelectedMonth","Date","getMonth","selectedYear","setSelectedYear","getFullYear","monthlyGoalProgress","setMonthlyGoalProgress","triggerReactions","useCallback","goalProgressPercentage","useEffect","loadDashboardData","async","allTransactions","transactionAPI","getAll","data","slice","currentMonth","currentYear","currentMonthStart","currentMonthEnd","currentMonthTransactions","filter","t","transactionDate","date","currentMonthIncome","type","reduce","sum","amount","currentMonthSavings","monthlySavingsGoal","savingsGoal","totalIncome","totalExpenses","balance","categoryBreakdown","forEach","category","allTimeGoal","savings","savingsPercentage","insights","push","concat","toFixed","Math","abs","highestCategory","Object","entries","sort","a","b","period","display","transactionCount","income","length","expense","total","summaryRes","reportAPI","getSummary","month","year","error","toast","console","_jsx","className","children","safeIncome","Number","safeExpenses","safeBalance","safeSavingsGoal","safeSavings","safeSavingsPercentage","goalProgress","_jsxs","name","onClick","value","onChange","e","parseInt","target","Array","from","_","i","toLocaleString","style","width","min","marginTop","fontSize","color","map","insight","index","Suspense","fallback","textAlign","padding","transaction","note","_id"],"sourceRoot":""}