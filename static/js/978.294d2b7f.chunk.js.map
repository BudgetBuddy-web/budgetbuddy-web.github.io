{"version":3,"file":"static/js/978.294d2b7f.chunk.js","mappings":"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","sources":["pages/Reports.js"],"sourcesContent":["/**\n * Reports Page\n * View financial summaries and export data\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { reportAPI } from '../services/api';\nimport { toast } from 'react-toastify';\nimport './Reports.css';\n\nconst Reports = () => {\n  const [summary, setSummary] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n\n  const loadSummary = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await reportAPI.getSummary({\n        month: selectedMonth,\n        year: selectedYear\n      });\n      setSummary(response.data);\n    } catch (error) {\n      toast.error('Failed to load summary');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [selectedMonth, selectedYear]);\n\n  useEffect(() => {\n    loadSummary();\n  }, [loadSummary]);\n\n  const handleExportCSV = async () => {\n    try {\n      const response = await reportAPI.exportCSV({\n        month: selectedMonth,\n        year: selectedYear\n      });\n      \n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `transactions_${selectedMonth}_${selectedYear}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      \n      toast.success('CSV exported successfully');\n    } catch (error) {\n      toast.error('Failed to export CSV');\n      console.error(error);\n    }\n  };\n\n  const handleExportPDF = async () => {\n    try {\n      const response = await reportAPI.exportPDF({\n        month: selectedMonth,\n        year: selectedYear\n      });\n      \n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `transactions_${selectedMonth}_${selectedYear}.pdf`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      \n      toast.success('PDF exported successfully');\n    } catch (error) {\n      toast.error('Failed to export PDF');\n      console.error(error);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"loading\"><div className=\"spinner\"></div></div>;\n  }\n\n  if (!summary) {\n    return <div className=\"container\">No data available</div>;\n  }\n\n  const { totalIncome, totalExpenses, balance } = summary.summary;\n  const { categoryBreakdown, insights } = summary;\n\n  return (\n    <div className=\"reports-page\">\n      <div className=\"page-header\">\n        <div>\n          <h1>Financial Reports</h1>\n          <p>View your financial summaries and export data</p>\n        </div>\n      </div>\n\n      {/* Period Selector */}\n      <div className=\"card mb-4\">\n        <div className=\"period-selector\">\n          <div className=\"form-group\">\n            <label className=\"form-label\">Month</label>\n            <select\n              value={selectedMonth}\n              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\n              className=\"form-select\"\n            >\n              {Array.from({ length: 12 }, (_, i) => (\n                <option key={i + 1} value={i + 1}>\n                  {new Date(2000, i, 1).toLocaleString('default', { month: 'long' })}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Year</label>\n            <select\n              value={selectedYear}\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n              className=\"form-select\"\n            >\n              {Array.from({ length: 5 }, (_, i) => {\n                const year = new Date().getFullYear() - i;\n                return <option key={year} value={year}>{year}</option>;\n              })}\n            </select>\n          </div>\n\n          <div className=\"export-buttons\">\n            <button className=\"btn btn-outline\" onClick={handleExportCSV}>\n              ðŸ“Š Export CSV\n            </button>\n            <button className=\"btn btn-outline\" onClick={handleExportPDF}>\n              ðŸ“„ Export PDF\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-3 mb-4\">\n        <div className=\"summary-card\">\n          <h3>Total Income</h3>\n          <p className=\"amount income\">â‚¹{totalIncome.toFixed(2)}</p>\n        </div>\n        <div className=\"summary-card\">\n          <h3>Total Expenses</h3>\n          <p className=\"amount expense\">â‚¹{totalExpenses.toFixed(2)}</p>\n        </div>\n        <div className=\"summary-card\">\n          <h3>Net Balance</h3>\n          <p className={`amount ${balance >= 0 ? 'income' : 'expense'}`}>\n            â‚¹{balance.toFixed(2)}\n          </p>\n        </div>\n      </div>\n\n      {/* Category Breakdown */}\n      <div className=\"card mb-4\">\n        <h3 className=\"card-title\">Expense Breakdown by Category</h3>\n        {Object.keys(categoryBreakdown).length > 0 ? (\n          <div className=\"category-list\">\n            {Object.entries(categoryBreakdown)\n              .sort((a, b) => b[1] - a[1])\n              .map(([category, amount]) => {\n                const percentage = ((amount / totalExpenses) * 100).toFixed(1);\n                return (\n                  <div key={category} className=\"category-item\">\n                    <div className=\"category-header\">\n                      <span className=\"category-name\">{category}</span>\n                      <span className=\"category-amount\">â‚¹{amount.toFixed(2)}</span>\n                    </div>\n                    <div className=\"category-bar\">\n                      <div \n                        className=\"category-fill\"\n                        style={{ width: `${percentage}%` }}\n                      ></div>\n                    </div>\n                    <span className=\"category-percentage\">{percentage}%</span>\n                  </div>\n                );\n              })}\n          </div>\n        ) : (\n          <p className=\"text-center\">No expense data for this period</p>\n        )}\n      </div>\n\n      {/* Insights */}\n      {insights.length > 0 && (\n        <div className=\"card\">\n          <h3 className=\"card-title\">ðŸ’¡ Financial Insights</h3>\n          <ul className=\"insights-list\">\n            {insights.map((insight, index) => (\n              <li key={index}>{insight}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Reports;\n"],"names":["Reports","summary","setSummary","useState","loading","setLoading","selectedMonth","setSelectedMonth","Date","getMonth","selectedYear","setSelectedYear","getFullYear","loadSummary","useCallback","async","response","reportAPI","getSummary","month","year","data","error","toast","console","useEffect","_jsx","className","children","totalIncome","totalExpenses","balance","categoryBreakdown","insights","_jsxs","value","onChange","e","parseInt","target","Array","from","length","_","i","toLocaleString","onClick","exportCSV","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","concat","body","appendChild","click","remove","success","exportPDF","toFixed","Object","keys","entries","sort","a","b","map","_ref","category","amount","percentage","style","width","insight","index"],"sourceRoot":""}