{"version":3,"file":"static/js/978.b4bb5776.chunk.js","mappings":"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","sources":["pages/Reports.js"],"sourcesContent":["/**\n * Reports Page\n * View financial summaries and export data\n */\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { reportAPI } from '../services/api';\nimport { toast } from 'react-toastify';\nimport { format } from 'date-fns';\nimport './Reports.css';\n\nconst Reports = () => {\n  const [summary, setSummary] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [selectedMonth, setSelectedMonth] = useState(new Date().getMonth() + 1);\n  const [selectedYear, setSelectedYear] = useState(new Date().getFullYear());\n\n  const loadSummary = useCallback(async () => {\n    setLoading(true);\n    try {\n      const response = await reportAPI.getSummary({\n        month: selectedMonth,\n        year: selectedYear\n      });\n      setSummary(response.data);\n    } catch (error) {\n      toast.error('Failed to load summary');\n      console.error(error);\n    } finally {\n      setLoading(false);\n    }\n  }, [selectedMonth, selectedYear]);\n\n  useEffect(() => {\n    loadSummary();\n  }, [loadSummary]);\n\n  const handleExportCSV = async () => {\n    try {\n      const response = await reportAPI.exportCSV({\n        month: selectedMonth,\n        year: selectedYear\n      });\n      \n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `transactions_${selectedMonth}_${selectedYear}.csv`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      \n      toast.success('CSV exported successfully');\n    } catch (error) {\n      toast.error('Failed to export CSV');\n      console.error(error);\n    }\n  };\n\n  const handleExportPDF = async () => {\n    try {\n      const response = await reportAPI.exportPDF({\n        month: selectedMonth,\n        year: selectedYear\n      });\n      \n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', `transactions_${selectedMonth}_${selectedYear}.pdf`);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      \n      toast.success('PDF exported successfully');\n    } catch (error) {\n      toast.error('Failed to export PDF');\n      console.error(error);\n    }\n  };\n\n  if (loading) {\n    return <div className=\"loading\"><div className=\"spinner\"></div></div>;\n  }\n\n  if (!summary) {\n    return <div className=\"container\">No data available</div>;\n  }\n\n  const { totalIncome, totalExpenses, balance } = summary.summary;\n  const { categoryBreakdown, insights, transactions = [] } = summary;\n\n  return (\n    <div className=\"reports-page\">\n      <div className=\"page-header\">\n        <div>\n          <h1>Financial Reports</h1>\n          <p>View your financial summaries and export data</p>\n        </div>\n      </div>\n\n      {/* Period Selector */}\n      <div className=\"card mb-4\">\n        <div className=\"period-selector\">\n          <div className=\"form-group\">\n            <label className=\"form-label\">Month</label>\n            <select\n              value={selectedMonth}\n              onChange={(e) => setSelectedMonth(parseInt(e.target.value))}\n              className=\"form-select\"\n            >\n              {Array.from({ length: 12 }, (_, i) => (\n                <option key={i + 1} value={i + 1}>\n                  {new Date(2000, i, 1).toLocaleString('default', { month: 'long' })}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"form-label\">Year</label>\n            <select\n              value={selectedYear}\n              onChange={(e) => setSelectedYear(parseInt(e.target.value))}\n              className=\"form-select\"\n            >\n              {Array.from({ length: 5 }, (_, i) => {\n                const year = new Date().getFullYear() - i;\n                return <option key={year} value={year}>{year}</option>;\n              })}\n            </select>\n          </div>\n\n          <div className=\"export-buttons\">\n            <button className=\"btn btn-outline\" onClick={handleExportCSV}>\n              📊 Export CSV\n            </button>\n            <button className=\"btn btn-outline\" onClick={handleExportPDF}>\n              📄 Export PDF\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <div className=\"grid grid-3 mb-4\">\n        <div className=\"summary-card\">\n          <h3>Total Income</h3>\n          <p className=\"amount income\">₹{totalIncome.toFixed(2)}</p>\n        </div>\n        <div className=\"summary-card\">\n          <h3>Total Expenses</h3>\n          <p className=\"amount expense\">₹{totalExpenses.toFixed(2)}</p>\n        </div>\n        <div className=\"summary-card\">\n          <h3>Net Balance</h3>\n          <p className={`amount ${balance >= 0 ? 'income' : 'expense'}`}>\n            ₹{balance.toFixed(2)}\n          </p>\n        </div>\n      </div>\n\n      {/* Category Breakdown */}\n      <div className=\"card mb-4\">\n        <h3 className=\"card-title\">Expense Breakdown by Category</h3>\n        {Object.keys(categoryBreakdown).length > 0 ? (\n          <div className=\"category-list\">\n            {Object.entries(categoryBreakdown)\n              .sort((a, b) => b[1] - a[1])\n              .map(([category, amount]) => {\n                const percentage = ((amount / totalExpenses) * 100).toFixed(1);\n                return (\n                  <div key={category} className=\"category-item\">\n                    <div className=\"category-header\">\n                      <span className=\"category-name\">{category}</span>\n                      <span className=\"category-amount\">₹{amount.toFixed(2)}</span>\n                    </div>\n                    <div className=\"category-bar\">\n                      <div \n                        className=\"category-fill\"\n                        style={{ width: `${percentage}%` }}\n                      ></div>\n                    </div>\n                    <span className=\"category-percentage\">{percentage}%</span>\n                  </div>\n                );\n              })}\n          </div>\n        ) : (\n          <p className=\"text-center\">No expense data for this period</p>\n        )}\n      </div>\n\n      {/* Insights */}\n      {insights.length > 0 && (\n        <div className=\"card mb-4\">\n          <h3 className=\"card-title\">💡 Financial Insights</h3>\n          <ul className=\"insights-list\">\n            {insights.map((insight, index) => (\n              <li key={index}>{insight}</li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Transactions List */}\n      <div className=\"card transactions-section\">\n        <div className=\"section-header\">\n          <h3 className=\"card-title\">📋 Transaction Details</h3>\n          <button \n            className=\"btn btn-primary\"\n            onClick={() => window.print()}\n          >\n            🖨️ Print Report\n          </button>\n        </div>\n        \n        {transactions.length > 0 ? (\n          <div className=\"table-responsive\">\n            <table className=\"transactions-table\">\n              <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Type</th>\n                  <th>Category</th>\n                  <th>Amount</th>\n                  <th>Note</th>\n                </tr>\n              </thead>\n              <tbody>\n                {transactions.map((transaction) => (\n                  <tr key={transaction._id}>\n                    <td>\n                      <div>{format(new Date(transaction.date), 'MMM dd, yyyy')}</div>\n                      <div style={{ fontSize: '12px', color: '#888' }}>\n                        {format(new Date(transaction.date), 'HH:mm')}\n                      </div>\n                    </td>\n                    <td>\n                      <span className={`badge ${transaction.type}`}>\n                        {transaction.type}\n                      </span>\n                    </td>\n                    <td>{transaction.category}</td>\n                    <td className={`amount ${transaction.type}`}>\n                      {transaction.type === 'income' ? '+' : '-'}₹{transaction.amount.toFixed(2)}\n                    </td>\n                    <td>{transaction.note || '-'}</td>\n                  </tr>\n                ))}\n              </tbody>\n              <tfoot>\n                <tr className=\"total-row\">\n                  <td colspan=\"3\"><strong>Total</strong></td>\n                  <td><strong className=\"amount income\">+₹{totalIncome.toFixed(2)}</strong></td>\n                  <td></td>\n                </tr>\n                <tr className=\"total-row\">\n                  <td colspan=\"3\"><strong>Total Expenses</strong></td>\n                  <td><strong className=\"amount expense\">-₹{totalExpenses.toFixed(2)}</strong></td>\n                  <td></td>\n                </tr>\n                <tr className=\"total-row highlight\">\n                  <td colspan=\"3\"><strong>Net Balance</strong></td>\n                  <td>\n                    <strong className={`amount ${balance >= 0 ? 'income' : 'expense'}`}>\n                      ₹{balance.toFixed(2)}\n                    </strong>\n                  </td>\n                  <td></td>\n                </tr>\n              </tfoot>\n            </table>\n          </div>\n        ) : (\n          <p className=\"text-center\">No transactions for this period</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Reports;\n"],"names":["Reports","summary","setSummary","useState","loading","setLoading","selectedMonth","setSelectedMonth","Date","getMonth","selectedYear","setSelectedYear","getFullYear","loadSummary","useCallback","async","response","reportAPI","getSummary","month","year","data","error","toast","console","useEffect","_jsx","className","children","totalIncome","totalExpenses","balance","categoryBreakdown","insights","transactions","_jsxs","value","onChange","e","parseInt","target","Array","from","length","_","i","toLocaleString","onClick","exportCSV","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","concat","body","appendChild","click","remove","success","exportPDF","toFixed","Object","keys","entries","sort","a","b","map","_ref","category","amount","percentage","style","width","insight","index","print","transaction","format","date","fontSize","color","type","note","_id","colspan"],"sourceRoot":""}